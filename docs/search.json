[
  {
    "objectID": "aula_p1.html#como-estudar-esse-conteúdo",
    "href": "aula_p1.html#como-estudar-esse-conteúdo",
    "title": "Introdução à Programação suportada por IA",
    "section": "Como estudar esse conteúdo?",
    "text": "Como estudar esse conteúdo?\nUma dica fundamental é: just do it!"
  },
  {
    "objectID": "aula_p1.html#section",
    "href": "aula_p1.html#section",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "O conteúdo dessa aula é baseado nos capítulos 1 e 2 do livro abaixo."
  },
  {
    "objectID": "aula_p1.html#section-1",
    "href": "aula_p1.html#section-1",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Você conhece alguma indústria ou negócio cuja forma de trabalho não tem sofrido impacto do uso de softwares?\n\nDifícil de imaginar, não é?\nSoftware é essencial hoje em dia.\n\n\nO resultado tem sido que cada vez mais pessoas querem aprender a programar\n\nE não estamos falando apenas de graduação em área de TI.\n\nPode ser um cientista que precisa de um programa para analisar dados.\nOu um trabalhador de escritório que gostaria de automatizar alguma tarefa repetitiva chata.\nOu alguém que quer criar um jogo por hobby."
  },
  {
    "objectID": "aula_p1.html#section-2",
    "href": "aula_p1.html#section-2",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Apesar do desejo de aprender a programar\n\nDécadas de pesquisa na área de educação em computação mostram que programar é difícil.\nFerramentas de IA podem facilitar muito aprendizado\n\nEvitando que o aluno tenha que saber detalhes de regras de sintaxe.\n\n\n\nNesta disciplina usaremos o GitHub Copilot como um assistente de IA.\n\nAlgumas pessoas dizem que assistentes de IA acabarão com todos os empregros de desenvolvedores.\nOutros acham que assistentes de IA nunca serão confiáveis.\nMas é fácil encontrar falhas nesses dois argumentos opostos e extremos.\n\n\n\nO fato é que achar que assistentes de IA não deveriam ser usados hoje em dia\n\nseria o mesmo que um carpinteiro se recusar a usar ferramentas elétricas."
  },
  {
    "objectID": "aula_p1.html#section-3",
    "href": "aula_p1.html#section-3",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Os assistentes de IA possuem vantagens que são inegáveis\n\nGeram códigos que, na grande maioria das vezes, não têm erros de sintaxe.\n\nEvitando frustrações comuns de iniciantes.\n\nSão muito boas para explicar o que um código já implementado faz.\n\nFazendo com que um aluno não dependa tanto de um professor, monitor ou colega para ajudá-lo.\n\n\n\nE, claro, muitas vezes assistentes de IA geram códigos corretos para problemas comuns\n\nJá que é treinado a partir de uma quantidade imensa de códigos.\nPor que então não utilizá-los?"
  },
  {
    "objectID": "aula_p1.html#section-4",
    "href": "aula_p1.html#section-4",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Isso não quer dizer que criar software agora é algo trivial e podemos confiar toda habilidade de programação para a IA.\n\nO fato é que as habilidades para se criar um bom software estão evoluindo.\n\n\nHabilidades como:\n\ndecomposição de problemas\nespecificação de código\nleitura de código\nteste de código\n\n\n\nSe tornaram mais importantes do que eram no passado.\n\n\nJá habilidades como conhecer a semântica e sintaxe de uma biblioteca são agora menos importantes."
  },
  {
    "objectID": "aula_p1.html#section-5",
    "href": "aula_p1.html#section-5",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "O que essa disciplina espera de você:\n\nQue conheça o básico de programação\n\nTendo feito IALG ou FP1.\n\nQue esteja disposto a realmente criar software útil com auxílio de IA.\n\nNão faz sentido fazer uma disciplina para virar um operator de TAB :)\n\nQue tenha resiliência para lidar com todo o ciclo de desenvolvimento.\n\nQue envolve criar, testar, corrigir, melhorar, documentar, etc.\n\n\n\nEsperamos que ao final da disciplina você consiga\n\nCriar programas em Python com auxílio de IA.\nSaiba identificar se os programas funcionam corretamente e, se não funcionam, o que fazer para corrigir.\nConsiga ler e entender códigos em Python.\nSaiba utilizar bibliotecas de análise e visualização de dados em Python.\nSaiba automatizar tarefas repetitivas com Python."
  },
  {
    "objectID": "aula_p1.html#section-6",
    "href": "aula_p1.html#section-6",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Há um desafio ao utilizar assistentes de IA, que é especialmente relevante no caso de uma disciplina.\n\nAssistentes de IA estão evoluindo muito rapidamente,\ne ainda possuem comportamento não-determinístico.\nCom isso, se você resolver a mesma tarefa várias vezes, você pode obter soluções diferentes.\n\n\nO resultado é que o que você fizer pode não bater exatamente com o que o professor preparou para a aula.\n\nPor isso é tão importante que você aprenda como verificar se uma solução do assistente de IA está correta ou não."
  },
  {
    "objectID": "aula_p1.html#section-7",
    "href": "aula_p1.html#section-7",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "O que você acha que esse código faz?\nsection .text \nglobal _start \n_start: \n    mov ecx, 10 \n    mov eax, '0' \n    l1: \n    mov [num], eax \n    mov eax, 4 \n    mov ebx, 1 \n    push ecx \n    mov ecx, num \n    mov edx, 1 \n    int 0x80 \n    mov eax, [num] \n    inc eax \n    pop ecx \n    loop l1 \n    mov eax, 1 \n    int 0x80 \nsection .bss \n    num resb 1\n\nEle faz com que o computador conte de 0 a 9 e imprima os números na tela.\n\nEra assim que se programava antigamente."
  },
  {
    "objectID": "aula_p1.html#section-8",
    "href": "aula_p1.html#section-8",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "O que você acha que esse código faz?\nsection .text \nglobal _start \n_start: \n    mov ecx, 10 \n    mov eax, '0' \n    l1: \n    mov [num], eax \n    mov eax, 4 \n    mov ebx, 1 \n    push ecx \n    mov ecx, num \n    mov edx, 1 \n    int 0x80 \n    mov eax, [num] \n    inc eax \n    pop ecx \n    loop l1 \n    mov eax, 1 \n    int 0x80 \nsection .bss \n    num resb 1\nEssa monstruosidade foi escrita em código Assembly.\n\nProjetada para ser entendida por máquinas e não humanos.\nMesmo na década de 90 jogos como Doom e Quake tinham trechos escritos em Assembly para garantir desempenho."
  },
  {
    "objectID": "aula_p1.html#section-9",
    "href": "aula_p1.html#section-9",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Uma forma mais moderna de escrever o mesmo programa seria:\n\nfor numero in range(9):\n    print(numero)\n\n\nEscrito em Python, que se parece muito mais com uma linguagem natural.\n\nEspecialmente para quem fala inglês.\n\nE é mais fácil para uma pessoa tentar adivinhar o que o código faz, mesmo que não conheça Python.\n\n\nMas infelizmente, o código está errado, ele não exibe os números de 0 a 9.\n\nApesar de parecer inglês, Python não é inglês.\nE, assim, confundir algum detalhe das regras de um programa pode “quebrá-lo”."
  },
  {
    "objectID": "aula_p1.html#section-10",
    "href": "aula_p1.html#section-10",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Com assitentes de IA, o trabalho ficou muito mais fácil.\n\nPodemos escrever em português, e o GitHub Copilot gera o código em Python para nós.\n\n\nSe escrevemos, por exemplo, o comentário abaixo:\n\n# Exiba os números de 0 a 9\n\n\n\nProvavelmente, o GitHub Copilot irá sugerir o código a seguir\n\nque, diferentemente do código anterior, esse está correto.\n\n\n# Exiba os números de 0 a 9\nfor i in range(10):\n    print(i)"
  },
  {
    "objectID": "aula_p1.html#section-11",
    "href": "aula_p1.html#section-11",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Antes dos assistentes de IA, programadores profissionais costumavam trabalhar com duas telas.\n\nUma com a IDE para programar\nOutra com o Google e/ou Stack Overflow para pesquisar como resolver problemas.\n\n\nMuitas vezes a solução encontrada na internet já era o que o programador estava tentando fazer.\n\nespecialmente no caso de programadores iniciantes.\n\n\n\nUma das coisas que os assistentes de IA fazem de melhor é automatizar esse processo.\n\nFazendo isso não só mais rápido, como também contextualizado no código que está sendo escrito."
  },
  {
    "objectID": "aula_p1.html#section-12",
    "href": "aula_p1.html#section-12",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Mas o que é exatamente um assistente de IA?\n\nÉ um agente de IA que te ajuda a completar uma tarefa de programação.\nDe forma similar à Alexa, da Amazon, um assistente de IA entende instruções em linguagem natural.\n\n\nNo caso do Copilot, uma das tarefas que ele faz é:\n\nconverter uma linguagem, como o Português, em programas de computador.\n\n\n\nCopilot é apenas um exemplo de assistente desse tipo.\n\nExistem outros como Amazon Q Developer, Tabnine, Ghostwriter, etc."
  },
  {
    "objectID": "aula_p1.html#section-13",
    "href": "aula_p1.html#section-13",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Mas como o Copilot funciona?\n\nEle pode ser visto como uma camada entre você e o programa que você está implementando.\nEm vez de escrever diretamente em Python, você descreve o que você quer em palavras e o Copilot gera o programa para você.\nEssas palavras que escrevemos é o que chamamos de prompt.\n\n\nO “cérebro” por traz do Copilot é um programa de computador bacana que chamamos de LLM.\n\nLLM vem do inglês Large Language Model, ou Modelo de Linguagem de Larga Escala.\nUm LLM guarda informações sobre o relacionamento entre palavras\n\nIncluindo quais palavras fazem sentido em certos contextos\nE usa isso para prever a melhor sequência de palavras para responder um prompt."
  },
  {
    "objectID": "aula_p1.html#section-14",
    "href": "aula_p1.html#section-14",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Imagine por exemplo que você pergunte qual a próxima palavra deveria ver na frase:\n\n“A pessoa abriu a _____”.\n\n\nHá várias palavras que fariam sentido nesse contexto, como “porta”, “caixa” ou “sessão”.\n\nJá outras claramente não fariam sentido como: “o”, “ele” ou “abrir”.\n\n\n\nUm LLM leva em conta o contexto para completar a próxima palavra e vai fazendo isso, palavra a palavra, até chegar na resposta final.\n\nO LLM faz isso de maneira não determinística, o que significa que há uma certa aleatoriedade no processo.\nAssim, às vezes a frase poderia ser completada com “caixa” e outras vezes com “porta”, por exemplo.\n\n\n\nIsso é importante pois significa que o Copilot pode gerar códigos diferentes cada vez que você pede que ele seja gerado."
  },
  {
    "objectID": "aula_p1.html#section-15",
    "href": "aula_p1.html#section-15",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Repare que em nenhum momento dissemos que o Copilot “entende” o que ele está fazendo.\n\nEle simplesmente completa o código com aquilo que parece fazer mais sentido.\n\n\nAssim, durante nossa jornada na disciplina,\n\ncaberá a você conferir se o que está sendo gerado é realmente o que você precisa que seja feito"
  },
  {
    "objectID": "aula_p1.html#section-16",
    "href": "aula_p1.html#section-16",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Funcionamento do Copilot:\n\nobs.: atualmente você pode escolher diferentes LLMs no Copilot, não só o GPT da OpenAI."
  },
  {
    "objectID": "aula_p1.html#section-17",
    "href": "aula_p1.html#section-17",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Não seria mais prático se o Copilot gerasse código de máquina diretamente?\n\nPor que você acha que o usamos para gerar um código em uma linguagem de programação como Python?\n\n\nA questão é que o Copilot cometerá erros\n\nE nós precisaremos encontrá-los e corrigi-los (mesmo que com a ajuda do próprio Copilot).\nÉ muito mais fácil fazer isso em uma linguagem de alto nível como Python do que em código de máquina."
  },
  {
    "objectID": "aula_p1.html#section-18",
    "href": "aula_p1.html#section-18",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "O vídeo abaixo é bem interessante e explica de forma simples como funcionam os modelos LLM.\n\n\n\n\n\nFica a dica:\n\nEsse canal 3Blue1Brown é muito bom.\nExplica diversos conceitos matemáticos de forma visual e intuitiva."
  },
  {
    "objectID": "aula_p1.html#section-19",
    "href": "aula_p1.html#section-19",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Programadores, especialmente iniciantes, gastam muito tempo aprendendo a escrever código sintaticamente correto.\n\nMesmo programadores mais experientes podem gastar muito tempo quando utilizam uma nova linguagem de programação ou mesmo uma nova biblioteca em uma linguagem que já conhecem.\n\n\nAssistentes como o Copilot podem ajudar muito nesse aspecto.\n\nPois quase sempre geram códigos que são sintaticamente corretos.\nEvitando que precisemos escrevê-los do zero.\n\n\n\nCom isso, conseguimos criar softwares mais complexos em menos tempo e com menos frustrações."
  },
  {
    "objectID": "aula_p1.html#section-20",
    "href": "aula_p1.html#section-20",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Não ter que se preocupar com detalhes de sintaxe pode ser um grande fator de aumento de produtividade.\n\nAfinal de contas o que precisamos é resolver o problema do usuário final, independente dos detalhes de como o código precisa ser escrito.\nMas não é só assim que o Copilot pode nos ajudar."
  },
  {
    "objectID": "aula_p1.html#section-21",
    "href": "aula_p1.html#section-21",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "O Copilot, assim como outros assistentes de IA, também pode:\n\nExplicar códigos que já existem\n\nIsso é útil tanto quando temos que trabalhar em um código que não fomos nós que escrevemos.\nComo também quando queremos entender um código que foi gerado pelo próprio Copilot.\n\n\n\nTornar código mais fácil de entender\n\nHá diferentes formas de escrever um código que resolve a mesma tarefa.\nE algumas são mais fáceis de entender do que outras.\nPodemos então pedir ao Copilot para reorganizar o código de forma que ele fique mais fácil de entender."
  },
  {
    "objectID": "aula_p1.html#section-22",
    "href": "aula_p1.html#section-22",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "O Copilot, assim como outros assistentes de IA, também pode:\nEncontrar e corrigir bugs\n\nComo já foi mencionado o código gerado pelo Copilot pode não funcionar corretamente.\nOu pode funcionar em quase todos os casos, mas falhar em alguns.\nPodemos então pedir ao Copilot para nos ajudar a encontrar e corrigir esses bugs.\n\n\nExplicar erros\n\nAs mensagens de erro geradas pelas linguagens de programação podem ser difíceis de entender.\nO Copilot pode nos ajudar a entender o que está acontecendo e como corrigir o erro.\nÉ útil passar para o Copilot não só a mensagem de erro, como também a pilha de execução."
  },
  {
    "objectID": "aula_p1.html#section-23",
    "href": "aula_p1.html#section-23",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "O Copilot, assim como outros assistentes de IA, também pode:\nEncontrar bibliotecas que podem ser úteis\n\nMuitas vezes não sabemos que bibliotecas existem ou como utilizá-las.\nO Copilot pode nos ajudar a encontrar bibliotecas que podem ser úteis para o nosso problema.\nE também pode nos ajudar a entender como utilizá-las.\n\n\nMelhorar o desempenho do código\n\nO Copilot pode nos ajudar a identificar gargalos de desempenho no código.\nE sugerir melhorias para torná-lo mais eficiente."
  },
  {
    "objectID": "aula_p1.html#section-24",
    "href": "aula_p1.html#section-24",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Uma dica geral para utilizar assistentes de IA é:\n\nInteraja com o assistente de IA, fazendo ciclos de perguntas e feedbacks.\n\n\nVocê pode, por exemplo:\n\nPedir ao Copilot para gerar um código que resolva um problema específico.\nPedir que ele explique o código que fez.\nPedir que ele melhore o código, tornando-o mais fácil de entender.\nPedir que ele encontre e corrija bugs no código.\nSe necessário, pedir para melhorar o desempenho depois de ter a solução funcionando."
  },
  {
    "objectID": "aula_p1.html#section-25",
    "href": "aula_p1.html#section-25",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Além de falar das vantagens, é importante também falar dos riscos e desafios ao usar assistentes de IA.\n\nCopyright\n\nA quem pertence um código gerado por um assistente de IA?\nO assistente de IA é treinado a partir de códigos disponíveis na internet, então é possível que o código gerado seja muito parecido com algum código existente.\nAs ferramentas têm evoluído e muitas identificam a fonte quando o código gerado é muito parecido com algum código existente.\nIsso levanta questões sobre a propriedade intelectual e o uso ético de código gerado por IA.\nA tecnologia evoluiu muito rápido do que a legislação, então ainda teremos muito debate sobre o assunto."
  },
  {
    "objectID": "aula_p1.html#section-26",
    "href": "aula_p1.html#section-26",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Educação\n\nOs autores do livro fizeram testes com exercícios de disciplinas introdutórias de programação.\nDe cara, o Copilot acertou 50% dos exercícios.\n\nCom um pouco mais de contexto acertou 80%.\n\nÉ fato que a educação precisa mudar para lidar com essa nova realidade.\n\nEm algumas escolas, o aluno pode usar assitentes de IA para fazer os exercícios.\nEm outras, o uso é proibido em provas ou dependendo do curso (como Computação ou Sistemas).\nAlgumas treinararam LLMs específicos para dar apenas certos tipos de respostas.\n\nO fato é que ainda está muito cedo para dizer como LLM vai afetar a educação em computação.\n\nMas certas tendências já começaram a aparecer."
  },
  {
    "objectID": "aula_p1.html#section-27",
    "href": "aula_p1.html#section-27",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Qualidade do código\n\nÉ necessário ser bem cuidadoso e não confiar cegamente no código gerado por assistentes de IA.\n\nEspecialmente em códigos sensíveis ou que precisam ser especialmente seguros.\nImagine um código de um dispositivo médico ou de um carro autônomo, por exemplo.\n\nÉ fundamental criar uma estrutura de testes, independente do assistente de IA,\n\nPara garantir que o código funciona corretamente."
  },
  {
    "objectID": "aula_p1.html#section-28",
    "href": "aula_p1.html#section-28",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Segurança do código\n\nNão há nenhuma garantia de segurança em código gerado por assistentes de IA.\nTrabalhar com dados de usuários, por exemplo, requer cuidados especiais.\nDevemos também tomar cuidado com dados que são enviados para os assistentes de IA.\n\nPor exemplo, não enviar dados sensíveis ou confidenciais.\n\nMuitas empresas proíbam ou limitam a forma de uso das ferramentas de IA, devido a essas preocupações."
  },
  {
    "objectID": "aula_p1.html#section-29",
    "href": "aula_p1.html#section-29",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Assistentes de IA não são especialistas (experts)\n\nA grande diferença de um especialista não é o que ele sabe, mas o que ele sabe que não sabe :)\nUm especialista consegue dizer o quão confiante ele está sobre uma determinada solução.\n\nE se não estiver confiante o suficiente, ele estuda até conhecer melhor o que ele não sabe.\n\nAssistentes de IA não têm essa capacidade.\n\nHá casos de assistentes que geraram obituários de pessoas mortas ou que explicaram com um ábaco é mais rápido que um computador.\n\nAs ferramentas estão evoluindo muito, mas ainda são muito autoconfiantes.\nEm resumo: tudo que um assistente de IA faz deve ser verificado por um humano."
  },
  {
    "objectID": "aula_p1.html#section-30",
    "href": "aula_p1.html#section-30",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Viés\n\nLLMs vão reproduzir os mesmos vieses que estão presentes nos dados com os quais foram treinados.\nUm LLM é treinada com mais literatura inglesa do que de outras culturas, por exemplo.\n\nE isso acabará se refletindo nas respostas que ele gera.\n\nHá também o risco de reforçar estereótipos negativos.\nNa geração de código, é provável que ele gere códigos em um estilo que é mais comum em grupos que têm maior representatividade na comunidade de programação.\nPor outro lado, as próprias LLMs podem ajudar a quebrar esses vieses ao facilitar o acesso à programação para pessoas que não têm tanta representatividade na comunidade."
  },
  {
    "objectID": "aula_p1.html#section-31",
    "href": "aula_p1.html#section-31",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Se o Copilot pode gerar código para nós, explicá-lo e corrigi-lo, não temos que fazer nada, certo?\n\nErrado!\nAssistentes de IA cometem erros.\n\n\nAlém disso, não podemos passar uma tarefa gigantesca para o Copilot e esperar que ele resolva tudo.\n\nExemplo: “Crie um novo jogo de videogame. Ah, e ele precisa ser divertido!”\nIsso não vai funcionar.\nPrecisamos quebrar um problema grande em parte menores para os quais o Copilot possa nos ajudar.\n\nE fazer essa decomposição de problemas não é algo tão simples quanto possa parecer à primeira vista."
  },
  {
    "objectID": "aula_p1.html#section-32",
    "href": "aula_p1.html#section-32",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Uma tarefa que já existia e agora é ainda mais fundamental é: testes de software.\n\nDesenvolvedores profissionais e empresas já tratam esse tipo de tarefa.\nMas é importante saber que o tipo de erro que um assistente de IA pode cometer é diferente do tipo de erro que um humano pode cometer.\n\nPode acontecer de em 20 linhas de código, uma delas tenha um erro tão absurdo ou sutil, que não esperaríamos que ele pudesse acontecer.\n\nAssim, é importante criar uma boa estrutura de testes para garantir que o código funciona corretamente."
  },
  {
    "objectID": "aula_p1.html#section-33",
    "href": "aula_p1.html#section-33",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Outra habilidade essencial é depuração de código.\n\nDepuração é o processo de encontrar e corrigir erros em um código.\nQuando nós mesmos escrevemos o código já costuma ser uma tarefa que consome tempo e exige paciência.\nCom assistentes de IA, a depuração pode ser ainda mais desafiadora.\n\nMesmo que possamos usar a própria IA para ajudar a corrigir\nainda assim precisamos entender o que está acontecendo para poder explicar para a IA o que está errado."
  },
  {
    "objectID": "aula_p1.html#section-34",
    "href": "aula_p1.html#section-34",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Por fim, há uma habilidade totalmente nova quando usamos assistentes de IA: engenharia de prompt.\n\nEngenharia de prompt envolve como dizer para o Copilot o que ele tem que fazer.\nNós podemos escrever as instruções em português, mas a forma como escrevemos essas instruções pode fazer muita diferença.\n\nPrecisamos ser bastante precisos sobre o que queremos.\n\nE mesmo sendo precisos pode ser que a resposta gerada não seja correta.\n\nNesse caso, precisamos primeiro ser capazes de identificar o que está errado\ne depois sermos capazes de reformular o prompt para tentar obter uma resposta melhor.\n\nÀs vezes um pequeno detalhe no prompt pode fazer muita diferença."
  },
  {
    "objectID": "aula_p1.html#section-35",
    "href": "aula_p1.html#section-35",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Para fazer atividades da disciplina você precisa instalar\n\nVS Code\nPython\nExtensão de Python para VS Code (da Microsoft)\n\nVocê pode instalar digitando Ctrl + P no VS Code e digitando ext install ms-python.python."
  },
  {
    "objectID": "aula_p1.html#section-37",
    "href": "aula_p1.html#section-37",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Além disso, precisamos, claro, do GitHub Copilot.\n\nE, como estudante da UFLA, você tem direito à versão GitHub Copilot Pro.\n\n\nPara ter acesso a ela você deve:\n\nCriar uma conta no GitHub, se ainda não tiver, acessando github.com/.\nApós logar, clique no ícone do seu usuário no canto superior direito e acesse a opção Settings.\nNa barra lateral esquerda, clique em Billing and licensing → Education benefits.\nAcesse a opção Start an application\n\nSiga as instruções (você precisará fornecer um comprovante de matrícula)."
  },
  {
    "objectID": "aula_p1.html#section-38",
    "href": "aula_p1.html#section-38",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Vamos agora testar o uso do GitHub Copilot no VS Code\n\nVocê deve logar com seu usuário no painel do Copilot.\n\n\nEm seguida, apague o conteúdo do arquivo Python e digite um comentário com a instrução abaixo.\n\n# exiba na tela: bora começar!\n\n\n\nAo apertar ENTER, aguarde um pouco e o Copilot deve sugerir um código que atenda à sua solicitação.\n\nO código aparece esmaecido e em itálico.\nE você deve apertar TAB para aceitar a sugestão."
  },
  {
    "objectID": "aula_p1.html#section-39",
    "href": "aula_p1.html#section-39",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Você deverá então ver um código semelhante a este:\n\nExecute então seu programa para testá-lo.\n\n\n# exiba na tela: bora começar!\nprint(\"bora começar!\")\n\n\nApareceu algo diferente para você?\n\nLembre que o Copilot é não determinístico e pode gerar soluções diferentes de cada vez.\nVocê pode tentar reformular o prompt para ver se obtém uma resposta diferente."
  },
  {
    "objectID": "aula_p1.html#section-40",
    "href": "aula_p1.html#section-40",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Vamos experimentar um programa que mais do que um simples print na tela.\n\nExperimente criar um programa a partir do prompt abaixo.\n\nNão esqueça de testá-lo.\n\n\n# peça ao usuário o tamanho dos lados de um retângulo e \n# exiba a área do retângulo\n\nDica: às vezes o Copilot continua o comentário da linha anterior em vez de gerar código.\n\nSe isso acontecer, você pode tentar apertar ENTER novamente.\nOu então começar a digitar um código para que ele entenda que é para completar."
  },
  {
    "objectID": "aula_p1.html#section-41",
    "href": "aula_p1.html#section-41",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Nós podemos também conversar com o Copilot dentro do contexto de uma parte de código.\n\nPara alterar um trecho de código, por exemplo.\n\n\nExperimente selecionar o código que você acabou de gerar e aperte Ctrl + I.\n\nNa caixa de diálogo que aparece peça ao Copilot para usar emojis na interação com o usuário, por exemplo.\nDepois de processar o prompt, o Copilot fará uma sugestão de alteração no código\n\nVocê pode aceitar a sugestão (o código será alterado).\nFechar a caixa de diálogo (o que vai ignorar a sugestão).\nOu você pode pedir outra sugestão (clicando no botão da terceira opção).\n\n\n\n\nQue tal agora pedir para o Copilot conversar com o usuário em mineirês? :)"
  },
  {
    "objectID": "aula_p1.html#section-42",
    "href": "aula_p1.html#section-42",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Vamos agora fazer algo mais interessante.\n\nE que já dê uma ideia de como podemos usar o Copilot em tarefas de processamento de dados.\n\n\nNós vamos utilizar um conjunto de dados (dataset) da plataforma Kaggle.\n\nUma plataforma de competição de ciência de dados e aprendizado de máquina.\nQue tem milhares de conjuntos de dados dos mais variados assuntos."
  },
  {
    "objectID": "aula_p1.html#section-43",
    "href": "aula_p1.html#section-43",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Vamos trabalhar com dados sobre futebol.\n\nAcesse a página do dataset All footeball player stats in top 5 leagues 23/24.\nSão dados estatísticos dos jogadores das 5 principais ligas de futebol europeias.\nNa página há informações sobre os dados disponíveis e uma amostra dos dados.\n\n\nVamos baixar os dados para usar em nosso programa. Para isso:\n\nClique em Download → Download dataset as zip.\n\nLogue no Kaggle ou crie uma conta se não tiver (pode ser logando com a conta do Google).\n\nDescompacte o arquivo zip baixado.\nCopie o arquivo top5-players.csv para a pasta do seu projeto Python."
  },
  {
    "objectID": "aula_p1.html#section-44",
    "href": "aula_p1.html#section-44",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Vamos agora escrever um prompt para carregar os dados do arquivo em nosso programa.\n\nCrie um novo arquivo python ou apague o conteúdo do arquivo que você tinha criado.\nEm seguida digite o prompt abaixo e gere o código com o Copilot.\n\n\n\n# abra o arquivo csv chamado \"top5-players.csv\" \n# e guarde os dados em uma variável\n\n\n\nExecute o programa:\n\nele não deve exibir nada, mas serve para testar se o código gerado funciona.\n\n\n\nÉ possível que o Copilot tenha sugerido uma biblioteca mas não a tenha importado.\n\nPara corrigir isso, ou algum outro tipo de erro, você pode selecionar, clicar na lâmpada que aparece\n\nE acessar a opção fix (consertar).\n\nSe ele sugeriu usar uma biblioteca que precisaria ser instalada você pode alterar o prompt\n\npedindo para usar apenas as bibliotecas padrões do python."
  },
  {
    "objectID": "aula_p1.html#section-45",
    "href": "aula_p1.html#section-45",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Nessa parte cada aluno pode estar vendo um código diferente:\n\npois há várias bibliotecas no Python para lidar com arquivos CSV.\nE, como já sabemos, os assistentes de IA são não determinísticos."
  },
  {
    "objectID": "aula_p1.html#section-46",
    "href": "aula_p1.html#section-46",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Vamos agora trabalhar com os dados que foram carregados.\n\nA ideia é analisar as estatísticas dos jogadores brasileiros nas principais ligas de futebol.\n\n\nCom o prompt abaixo vamos processar os dados para calcular a quantidade de gol feitos por brasileiros em cada liga.\n\n# a terceira coluna traz o nome do país do jogador, a sexta o nome da liga\n# e a nona o número de gols feitos pelo jogador. Para cada liga some\n# o número de gols feitos por jogadores brasileiros (o país é identificado\n# como \"br BRA\")\n\n\n\nEm seguida, vamos exibir as informações calculadas ordenadas pelo número de gols feitos.\n\n# exiba o nome da liga e o número de gols feitos por brasileiros em ordem\n# descrescente de gols feitos\n\n\n\nTeste seu programa!\n\nCaso seja gerado algum erro, use o Copilot para ajudá-lo a corrigir."
  },
  {
    "objectID": "aula_p1.html#section-47",
    "href": "aula_p1.html#section-47",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Repare que fizemos o nosso programa com apenas três prompts.\n\nUma para lidar com a entrada de dados.\nOutro para processá-los.\nE o último para exibir os dados.\n\n\nEsse ciclo de entrada, processamento e saída é extremamente comum em programação."
  },
  {
    "objectID": "aula_p1.html#section-48",
    "href": "aula_p1.html#section-48",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Vamos agora usar o Copilot para alterar o código que havíamos gerado.\n\nSuponha que estamos interessados apenas nos gols dos jogadores jovens.\n\nApague o código gerado pelo segundo prompt que você tinha feito altere o prompt\n\nInformando a coluna que contém a idade e pedindo os dados apenas jogadores com menos de 23 anos.\n\n\n\n# a terceira coluna traz o nome do país do jogador, a sexta o nome da liga\n# e a nona o número de gols feitos pelo jogador. Para cada liga some\n# o número de gols feitos por jogadores brasileiros (o país é identificado\n# como \"br BRA\") e que tenham menos de 23 anos\n\nTeste seu programa!"
  },
  {
    "objectID": "aula_p1.html#section-49",
    "href": "aula_p1.html#section-49",
    "title": "Introdução à Programação Suportada por IA",
    "section": "",
    "text": "Você deve ter notado que os nomes das ligas começam com um identificador do país.\n\neng, es, it, fr ou de.\n\n\nVamos pedir ao Copilot para substituir esse identificador pelo nome do país.\n\nPara isso, apague o código gerado pelo terceiro prompt e o reescreva.\n\n\n\n\n# exiba o nome da liga e o número de gols feitos por brasileiros em ordem\n# descrescente de gols feitos.\n# O nome da liga tem primeiro duas ou três letras para identificar o país,\n# seguido de um espaço e depois o nome da liga propriamente dito. Substitua\n# essas duas letras pelo nome do país. Os países são:\n# eng: Inglaterra, es: Espanha, it: Itália, fr: França e de: Alemanha\n\n\n\nDica:\n\nSe o copilot não gerar o código selecione o comentário, clique na lâmpada, acesse Modify e digite complete o código."
  },
  {
    "objectID": "aula_p2.html#section",
    "href": "aula_p2.html#section",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "O conteúdo dessa aula é baseado em partes dos capítulos 2, 3 e 4 do livro abaixo."
  },
  {
    "objectID": "aula_p2.html#section-2",
    "href": "aula_p2.html#section-2",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Quando pedimos ao Copilot para gerar um código, podemos avaliar outras possíveis sugestões dele.\n\nPara exemplificar isso, suponha que vamos criar um programa para jogar Scrabble.\n\n\n\n\n\n\n\n\nÉ um jogo de tabuleiro baseado em palavras-cruzadas."
  },
  {
    "objectID": "aula_p2.html#section-3",
    "href": "aula_p2.html#section-3",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Dois jogadores devem ir completando palavras em um tabuleiro com peças de letras.\n\nE, cada vez que um jogador consegue incluir uma palavra, ele ganha pontos de acordo com as letras da palavra."
  },
  {
    "objectID": "aula_p2.html#section-4",
    "href": "aula_p2.html#section-4",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Vamos trabalhar aqui apenas com a função que calcula os pontos de uma palavra.\n\nO cabeçalho e docstring abaixo mostram como é o cálculo na versão do jogo em português.\n\n\ndef numero_de_pontos(palavra):\n    \"\"\"\n    Cada letra na palavra vale os seguintes pontos:\n    a, e, i, o, u, m, s, r, t: 1 ponto\n    d, l, c, p: 2 pontos\n    n, b, ç: 3 pontos\n    f, g, h, v: 4 pontos\n    j: 5 pontos\n    q: 6 pontos\n    x, z: 8 pontos\n\n    palavra é uma palavra formada por letras caracteres minúsculos\n    Retorna a soma dos pontos de cada letra da palavra\n    \"\"\""
  },
  {
    "objectID": "aula_p2.html#section-5",
    "href": "aula_p2.html#section-5",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Uma possível resposta do Copilot para o corpo da função é:\n    pontos = 0\n    for letra in palavra:\n        if letra in \"aeioumsrt\":\n            pontos += 1\n        elif letra in \"dlcp\":\n            pontos += 2\n        elif letra in \"nbç\":\n            pontos += 3\n        elif letra in \"fghv\":\n            pontos += 4\n        elif letra == \"j\":\n            pontos += 5\n        elif letra == \"q\":\n            pontos += 6\n        elif letra in \"xz\":\n            pontos += 8\n    return pontos"
  },
  {
    "objectID": "aula_p2.html#section-6",
    "href": "aula_p2.html#section-6",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "O código parece razoável, e nosso próximo passo seria testar a função.\n\nMas o ponto que quero mostrar aqui é como escolher as sugestões do Copilot."
  },
  {
    "objectID": "aula_p2.html#section-7",
    "href": "aula_p2.html#section-7",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Quando o Copilot sugere o código, ele aparece esmaecido e em itálico.\n\nAntes de apertarmos TAB para aceitar o código,\npodemos avaliar outras sugestões que o Copilot oferece.\n\nIsso pode ser feito passando o mouse sobre o código e escolhendo no painel que aparece acima do código.\nOu pelo atalho ALT + ] para ver a próxima sugestão ou ALT + [ para ver a anterior."
  },
  {
    "objectID": "aula_p2.html#section-8",
    "href": "aula_p2.html#section-8",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Uma segunda sugestão feita pelo código para o corpo da função foi:\n    pontos = {\n        'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1, 'm': 1, 's': 1, 'r': 1, 't': 1,\n        'd': 2, 'l': 2, 'c': 2, 'p': 2,\n        'n': 3, 'b': 3, 'ç': 3,\n        'f': 4, 'g': 4, 'h': 4, 'v': 4,\n        'j': 5,\n        'q': 6,\n        'x': 8, 'z': 8\n    }\n    total = 0\n    for letra in palavra:\n        total += pontos.get(letra, 0)  # Adiciona o valor da letra ou 0 se não estiver no dicionário\n    return total\n\nRepare que ela é bem diferente da anterior."
  },
  {
    "objectID": "aula_p2.html#section-9",
    "href": "aula_p2.html#section-9",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Essa segunda sugestão usa um dicionário para guardar o valor de cada letra.\n\nUm dicionário do Python é uma estrutura similar a um HashMap do Java.\n\n\nNo código, o dicionário pontos usa as letras como chaves e os pontos correspondentes como valores.\n\nAssim, ao percorrer a palavra uma letra de cada vez.\n\npodemos consultar o dicionário para buscar quanto vale a letra."
  },
  {
    "objectID": "aula_p2.html#section-10",
    "href": "aula_p2.html#section-10",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Em uma terceira sugestão, o Copilot fez a soma dos pontos em uma única linha, trocando o trecho\n\n    total = 0\n    for letra in palavra:\n        total += pontos.get(letra, 0)  # Adiciona o valor da letra ou 0 se não estiver no dicionário\n    return total\n\npor\n\n    return sum(pontos.get(letra, 0) for letra in palavra)\n\n\nEsse tipo de construção usando list comprehension é muito comum em Python."
  },
  {
    "objectID": "aula_p2.html#section-11",
    "href": "aula_p2.html#section-11",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Dica\n\n\nVocê pode fazer com o que o painel de escolha das sugestões do Copilot fique sempre visível, para não precisar passar o mouse sobre o código para acessá-lo.\nPara isso, quando ele aparecer uma vez, acesse os botão de três pontos ao final do painel e escolha a opção Always show toolbar."
  },
  {
    "objectID": "aula_p2.html#section-12",
    "href": "aula_p2.html#section-12",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Para fechar o exemplo, suponha que o Tião está jogando Scrabble\n\ne tem três palavras que poderiam ser encaixadas agora: zape, pazes e pizza.\nele gostaria de saber qual palavra dá mais pontos.\n\n\nO que acha do cabeçalho abaixo para uma função que retorne a melhor dessas três palavras?\n\ndef melhor_palavra(palavra1, palavra2, palavra3):"
  },
  {
    "objectID": "aula_p2.html#section-13",
    "href": "aula_p2.html#section-13",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "def melhor_palavra(palavra1, palavra2, palavra3):\n\nDe acordo com o guia para criarmos boas funções essa não é uma boa função, por que?\n\nEla poderia ser mais geral, funcionando para qualquer quantidade de palavras.\nPoderíamos, por exemplo, receber uma lista de palavras como parâmetro.\n\n\nVamos então melhorar a definição da função."
  },
  {
    "objectID": "aula_p2.html#section-14",
    "href": "aula_p2.html#section-14",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "def melhor_palavra(palavras):\n    \"\"\"\n    palavras é uma lista de palavras.\n\n    Retorna a palavra com a maior pontuação.\n    \"\"\"\n    if not palavras:\n        return None  # Retorna None se a lista estiver vazia\n\n    melhor = palavras[0]\n    max_pontos = numero_de_pontos(melhor)\n\n    for palavra in palavras[1:]:\n        pontos = numero_de_pontos(palavra)\n        if pontos &gt; max_pontos:\n            melhor = palavra\n            max_pontos = pontos\n\n    return melhor"
  },
  {
    "objectID": "aula_p2.html#section-15",
    "href": "aula_p2.html#section-15",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Escolhendo entre as sugestões do Copilot, essa foi outra opção:\n\ndef melhor_palavra(palavras):\n    \"\"\"\n    palavras é uma lista de palavras.\n\n    Retorna a palavra com a maior pontuação.\n    \"\"\"\n    return max(palavras, key=numero_de_pontos)\n\n\nQual das duas opções você prefere?"
  },
  {
    "objectID": "aula_p2.html#section-16",
    "href": "aula_p2.html#section-16",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Talvez seja prematuro escolher sem fazer testes.\n\nVeja esse teste feito com a segunda opção:\n\n&gt;&gt;&gt; melhor_palavra([])\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 6, in melhor_palavra\nValueError: max() iterable argument is empty\n\n\n\nEsse erro não ocorreria na primeira opção."
  },
  {
    "objectID": "aula_p2.html#section-17",
    "href": "aula_p2.html#section-17",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "A dica portanto é:\n\nPara qualquer que seja a sugestão escolhida: é necessário sempre testar!\n\n\nA segunda opção poderia ser alterada para a acrescentar o mesmo if da primeira opção.\n\nNesse caso, qual você escolheria?\nSugestão: depende do seu objetivo.\n\nA primeira opção é mais legível.\nA segunda é mais compacta."
  },
  {
    "objectID": "aula_p2.html#section-18",
    "href": "aula_p2.html#section-18",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Vamos agora fazer algo mais interessante.\n\nE que já dê uma ideia de como podemos usar o Copilot em tarefas de processamento de dados.\n\n\nNós vamos utilizar um conjunto de dados (dataset) da plataforma Kaggle.\n\nUma plataforma de competição de ciência de dados e aprendizado de máquina.\nQue tem milhares de conjuntos de dados dos mais variados assuntos."
  },
  {
    "objectID": "aula_p2.html#section-19",
    "href": "aula_p2.html#section-19",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Vamos trabalhar com dados sobre futebol.\n\nAcesse a página do dataset All footeball player stats in top 5 leagues 23/24.\nSão dados estatísticos dos jogadores das 5 principais ligas de futebol europeias.\nVeja na página quais são os dados disponíveis e uma amostra dos dados."
  },
  {
    "objectID": "aula_p2.html#section-20",
    "href": "aula_p2.html#section-20",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Vamos baixar os dados para usar em nosso programa. Para isso:\n\nClique em Download → Download dataset as zip.\n\nLogue no Kaggle ou crie uma conta se não tiver (pode ser logando com a conta do Google).\n\nDescompacte o arquivo zip baixado.\nCrie uma pasta para o projeto da aula de hoje e copie para ela o arquivo top5-players.csv."
  },
  {
    "objectID": "aula_t2.html#section",
    "href": "aula_t2.html#section",
    "title": "Projetando Funções",
    "section": "",
    "text": "O conteúdo dessa aula é baseado no capítulo 3 do livro abaixo."
  },
  {
    "objectID": "aula_t2.html#section-1",
    "href": "aula_t2.html#section-1",
    "title": "Projetando Funções",
    "section": "",
    "text": "Pela pesquisa de perfil da turma vi que alguns alunos conhecem Python e outros não.\n\nÉ importante então apresentar a linguagem nas primeiras aulas.\nMas, junto com a apresentação da linguagem, vou apresentar também boas práticas e dicas de uso do Copilot.\n\nque podem ser interessantes também para que tem mais experiência com Python.\n\nEspero então que a aula seja útil para todos :)\n\n\n\n\n\n\n\n\nLembrete\n\n\nLembre-se que Assistentes de IA são não determinísticos. Portanto, ao experimentar os exemplos dessa aula, você pode obter resultados diferentes."
  },
  {
    "objectID": "aula_t2.html#section-2",
    "href": "aula_t2.html#section-2",
    "title": "Projetando Funções",
    "section": "",
    "text": "Um dos desafios para programadores iniciantes usarem o Copilot\n\né saber o que é uma tarefa razoável para que ele consiga gerar uma boa solução.\n\n\nComo já mencionamos antes, passar uma tarefa muito grande para o Assistente de IA\n\npode fazer com que ele falhe\ne falhe de uma forma que seja muito difícil de corrigir."
  },
  {
    "objectID": "aula_t2.html#section-3",
    "href": "aula_t2.html#section-3",
    "title": "Projetando Funções",
    "section": "",
    "text": "Na verdade essa questão de complexidade não é um problema só para o Copilot, mas para nós mesmos.\n\nEngenheiros de Software que tentam resolver problemas muito complexos sem quebrá-los em partes menores também falham.\n\n\nExistem diversas formas de tratar, no código, a decomposição de um problema em partes.\n\nA mais simples delas é a através de funções."
  },
  {
    "objectID": "aula_t2.html#section-4",
    "href": "aula_t2.html#section-4",
    "title": "Projetando Funções",
    "section": "",
    "text": "Uma função é um trecho de código que resolve uma tarefa específica\n\ne que não é tão complexo a ponto de ficar difícil de implementar e testar."
  },
  {
    "objectID": "aula_t2.html#section-5",
    "href": "aula_t2.html#section-5",
    "title": "Projetando Funções",
    "section": "",
    "text": "Claro que vocês já sabem o que são funções e como elas podem ser implementadas.\n\nMas será que vocês sabem (ou se lembram) quais são os critérios para projetar boas funções?\nSerá que pensam nisso na hora de programar, ou simplesmente saem programando?\nAlém disso, no contexto do uso de IA, quais seriam as melhores práticas para projetar funções?"
  },
  {
    "objectID": "aula_t2.html#section-6",
    "href": "aula_t2.html#section-6",
    "title": "Projetando Funções",
    "section": "",
    "text": "Uma função é uma pequena tarefa que pode ser usada para resolver tarefas maiores.\n\nEssas tarefas menores, por sua vez, podem ser usadas para resolver tarefas maiores."
  },
  {
    "objectID": "aula_t2.html#section-7",
    "href": "aula_t2.html#section-7",
    "title": "Projetando Funções",
    "section": "",
    "text": "Para exemplificar, encontre as palavras abaixo no quebra-cabeça."
  },
  {
    "objectID": "aula_t2.html#section-8",
    "href": "aula_t2.html#section-8",
    "title": "Projetando Funções",
    "section": "",
    "text": "Qual foi o raciocínio que você usou para encontrar as palavras?\n\nProcurar todas as palavras de uma vez é uma tarefa muito grande e complicada.\n\n\nVocê poderia, por exemplo, escolher uma palavra para encontrar primeiro.\n\nE, para encontrar essa palavra, você poderia procurar a primeira letra.\n\nE então procurar o restante da palavra buscando para a direita, esquerda, para cima ou para baixo."
  },
  {
    "objectID": "aula_t2.html#section-9",
    "href": "aula_t2.html#section-9",
    "title": "Projetando Funções",
    "section": "",
    "text": "Repare que estamos decompondo o problema de resolver o caça-palavras\n\nem tarefas menores, que, se resolvidas, nos ajudam a resolver o problema como um todo.\n\n\nÉ essa a estratégia que precisamos seguir na hora de programar."
  },
  {
    "objectID": "aula_t2.html#section-10",
    "href": "aula_t2.html#section-10",
    "title": "Projetando Funções",
    "section": "",
    "text": "Uma função pode ser vista como um contrato 📝.\n\nSe existir uma função maior e for dito que ela recebe dois números e retorna o maior deles,\nnós podemos acreditar que se a função for chamada com os números 2 e 5, ela retornará 5.\n\nNós não precisamos saber como a função funciona para utilizá-la.\n\nDa mesma forma que não precisamos entender de mecânica de carros para frear um carro 🚗.\n\nNós acionamos o pedal e sabemos que a velocidade do carro vai diminuir 🙌."
  },
  {
    "objectID": "aula_t2.html#section-11",
    "href": "aula_t2.html#section-11",
    "title": "Projetando Funções",
    "section": "",
    "text": "Na aula passada usamos o Copilot para gerar código a partir de um comentário.\n\nPodemos fazer o mesmo para criar funções.\n\n\nVamos fazer um exemplo:\n\n# escreva uma função que retorna o  \n# maior de dois números\n# a entrada são dois números\n# e a saída é o maior entre eles"
  },
  {
    "objectID": "aula_t2.html#section-12",
    "href": "aula_t2.html#section-12",
    "title": "Projetando Funções",
    "section": "",
    "text": "# escreva uma função que retorna o  \n# maior de dois números\n# a entrada são dois números\n# e a saída é o maior entre eles\ndef maior_numero(a, b):\n    if a &gt; b:\n        return a\n    else:\n        return b\n\nEsse é um possível resultado gerado pelo Copilot."
  },
  {
    "objectID": "aula_t2.html#section-13",
    "href": "aula_t2.html#section-13",
    "title": "Projetando Funções",
    "section": "",
    "text": "# escreva uma função que retorna o  \n# maior de dois números\n# a entrada são dois números\n# e a saída é o maior entre eles\ndef maior_numero(a, b):\n    if a &gt; b:\n        return a\n    else:\n        return b\n\nNote que assinatura de uma função em Python começa com a palavra-chave def.\n\nÉ isso que diz para o Python que o que vem a seguir é uma função.\n\nDepois vem o nome da função (maior_numero, nesse caso).\n\nDica: se parecer difícil escolher um nome para a função, pode ser um sinal de que ela está fazendo muitas coisas."
  },
  {
    "objectID": "aula_t2.html#section-14",
    "href": "aula_t2.html#section-14",
    "title": "Projetando Funções",
    "section": "",
    "text": "# escreva uma função que retorna o  \n# maior de dois números\n# a entrada são dois números\n# e a saída é o maior entre eles\ndef maior_numero(a, b):\n    if a &gt; b:\n        return a\n    else:\n        return b\n\nEm seguida, temos os parâmetros da função, que são as entradas que ela recebe.\nPor fim, temos o corpo da função, que é onde a lógica é implementada.\n\nUma função pode retornar valores ou não.\nQuando ela retorna usamos a palavra-chave return."
  },
  {
    "objectID": "aula_t2.html#section-15",
    "href": "aula_t2.html#section-15",
    "title": "Projetando Funções",
    "section": "",
    "text": "# escreva uma função que retorna o  \n# maior de dois números\n# a entrada são dois números\n# e a saída é o maior entre eles\ndef maior_numero(a, b):\n    if a &gt; b:\n        return a\n    else:\n        return b\nVeja que, diferente de linguagens fortemente tipadas, em Python não precisamos especificar os tipos\n\nnem dos parâmetros e nem do retorno da função."
  },
  {
    "objectID": "aula_t2.html#section-16",
    "href": "aula_t2.html#section-16",
    "title": "Projetando Funções",
    "section": "",
    "text": "Dica para programadores avançados:\n\nApesar de Python não ser fortemente tipado\n\né uma boa prática usar anotações de tipo (type hints) para melhorar a legibilidade do código.\n\nIsso ajuda muito na implementação de sistemas maiores.\nMas afinal, o que é isso?"
  },
  {
    "objectID": "aula_t2.html#section-17",
    "href": "aula_t2.html#section-17",
    "title": "Projetando Funções",
    "section": "",
    "text": "Vamos gerar novamente a função maior_numero, mas agora com type hints (acrescentando uma linha na docstring).\n\n# escreva uma função que retorna o  \n# maior de dois números\n# a entrada são dois números\n# e a saída é o maior entre eles\n# use anotação de tipos\n\n\ndef maior_numero(a: int, b: int) -&gt; int:\n  if a &gt; b:\n    return a\n  else:\n    return b"
  },
  {
    "objectID": "aula_t2.html#section-18",
    "href": "aula_t2.html#section-18",
    "title": "Projetando Funções",
    "section": "",
    "text": "As anotações de tipo servem como documentação e podem ser utilizadas por ferramentas de análise sintática.\n\nOu seja, são úteis para dizer para outros programadores o que exatamente a função espera e o que retorna.\nE, principalmente, para que as IDEs, como o VS Code, apontem possíveis erros antes mesmo de rodar o código.\n\nIsso melhora a qualidade do código e facilita a manutenção.\n\n\n\nExperimente, por exemplo, chamar a função no VS Code passando uma string."
  },
  {
    "objectID": "aula_t2.html#section-19",
    "href": "aula_t2.html#section-19",
    "title": "Projetando Funções",
    "section": "",
    "text": "Mas é importante deixar claro que os type hints não alteram o comportamento do código.\n\nComo Python não é uma linguagem compilada, o código vai ser executado\n\ne os type hints são ignorados em tempo de execução.\n\nOu seja, se a função for chamada passando um parâmetro de tipo errado\n\nisso não causará um erro imediatamente, mas pode levar a comportamentos inesperados.\nNa verdade quando dá erro é até melhor, o problema maior é quando passa batido."
  },
  {
    "objectID": "aula_t2.html#section-20",
    "href": "aula_t2.html#section-20",
    "title": "Projetando Funções",
    "section": "",
    "text": "Nos materiais da disciplina vou evitar anotações de tipo para manter os exemplos mais simples.\n\nMas para quem tem mais experiência com Python, recomendo muito que se acostumem a usar."
  },
  {
    "objectID": "aula_t2.html#section-21",
    "href": "aula_t2.html#section-21",
    "title": "Projetando Funções",
    "section": "",
    "text": "Nós havíamos passado para o Copilot a tarefa de criar a função completa.\n\nMas outra forma de usar o Copilot é nós mesmos definirmos a assinatura da função\n\ne pedirmos ao Copilot apenas para implementar o corpo da função.\n\nIsso geralmente leva a resultados melhores."
  },
  {
    "objectID": "aula_t2.html#section-22",
    "href": "aula_t2.html#section-22",
    "title": "Projetando Funções",
    "section": "",
    "text": "Nós podemos fazer isso usando docstrings.\n\nDocstrings são strings de documentação que podem ser usadas para descrever o que uma função faz.\nElas são definidas logo abaixo da assinatura da função e são delimitadas por três aspas duplas.\n\n\n\n\n\n\n\n\nDica\n\n\nÉ uma boa prática escrever docstrings para suas funções."
  },
  {
    "objectID": "aula_t2.html#section-23",
    "href": "aula_t2.html#section-23",
    "title": "Projetando Funções",
    "section": "",
    "text": "Nós poderíamos então gerar a função maior_numero de forma diferente\n\nEscrevendo nós mesmos o cabeçalho e a docstring da função.\nE deixando o Copilot gerar o corpo da função.\n\nO que torna a geração do código mais fácil para o Copilot."
  },
  {
    "objectID": "aula_t2.html#section-24",
    "href": "aula_t2.html#section-24",
    "title": "Projetando Funções",
    "section": "",
    "text": "Vamos então refazer a função, mas agora nós definimos o cabeçalho e docstring da função.\n\ndef maior_numero(num1, num2):\n  \"\"\"\n  num1 e num2 são dois números.\n\n  Retorna o maior dos dois números.\n  \"\"\""
  },
  {
    "objectID": "aula_t2.html#section-25",
    "href": "aula_t2.html#section-25",
    "title": "Projetando Funções",
    "section": "",
    "text": "O Copilot pode então gerar o corpo da função.\n\ndef maior_numero(num1, num2):\n  \"\"\"\n  num1 e num2 são dois números.\n\n  Retorna o maior dos dois números.\n  \"\"\"\n  if num1 &gt; num2:\n    return num1\n  else:\n    return num2"
  },
  {
    "objectID": "aula_t2.html#investimentos-em-bolsa-do-tião",
    "href": "aula_t2.html#investimentos-em-bolsa-do-tião",
    "title": "Projetando Funções",
    "section": "Investimentos em Bolsa do Tião",
    "text": "Investimentos em Bolsa do Tião\n\nTião é um investidor em uma ação chamada PASIA.\n\nEle comprou 10 ações por R$ 15.\nAgora cada ação vale R$ 17.\nEle quer saber quanto lucro 💰 teria se vendesse as ações agora."
  },
  {
    "objectID": "aula_t2.html#section-26",
    "href": "aula_t2.html#section-26",
    "title": "Projetando Funções",
    "section": "",
    "text": "Para terminar, vamos pedir ao Copilot para chamar a função que criamos.\n\n# chame a funcao maior_numero com os valores 3 e 5\n# armazene o resultado em uma variável chamada \n# resultado e então exiba o resultado\n\n\nresultado = maior_numero(3, 5)\nprint(resultado)"
  },
  {
    "objectID": "aula_t2.html#section-27",
    "href": "aula_t2.html#section-27",
    "title": "Projetando Funções",
    "section": "",
    "text": "Segue uma sugestão de ciclo de criação de funções com Copilot.\n\nDefina o comportamento desejado para a função\nEscreva um prompt que descreva a função da forma mais clara possível\nDeixe o Copilot gerar o código\nLeia o código para avaliar se ele parece razoável\nTeste o código para conferir se ele está correto\n\n\nSe estiver correto, a função está pronta.\nSe não estiver, volte ao passo 2."
  },
  {
    "objectID": "aula_t2.html#section-28",
    "href": "aula_t2.html#section-28",
    "title": "Projetando Funções",
    "section": "",
    "text": "Essa seria uma boa função para calcular o lucro do Tião?\n\n\ndef calcular_lucro():\n  return (17 - 15) * 10\n\n\n\nNão, essa função não é boa.\n\nPor que?"
  },
  {
    "objectID": "aula_t2.html#section-29",
    "href": "aula_t2.html#section-29",
    "title": "Projetando Funções",
    "section": "",
    "text": "Quando criamos uma função devemos criá-la da forma mais geral possível.\n\nCom isso, a função pode ser reutilizada em diferentes contextos.\nRepare que, no caso do Tião, ele não quer saber o lucro apenas de uma compra específica\n\nmas sim de qualquer compra que ele faça.\n\n\n\nMesmo que você ache que isso parece muito simples.\n\nÉ muito comum que programadores experientes repitam esse erro em contextos mais complexos."
  },
  {
    "objectID": "aula_t2.html#section-30",
    "href": "aula_t2.html#section-30",
    "title": "Projetando Funções",
    "section": "",
    "text": "Como deveria ser a assinatura da função, de forma que ela seja mais útil?\n\nQuais parâmetros deveria receber?\n\na quantidade de ações compradas\n\no valor que as ações foram compradas\n\ne o preço de atual das ações.\n\n\n\nPoderíamos então definir a assinatura assim:\n\ndef calcular_lucro(qtd_acoes, valor_compra, valor_venda)"
  },
  {
    "objectID": "aula_t2.html#section-31",
    "href": "aula_t2.html#section-31",
    "title": "Projetando Funções",
    "section": "",
    "text": "Seguindo a estratégia que vimos antes,\n\nvamos criar uma docstring para explicar ao Copilot o que a função precisa fazer.\n\n\n\n\n\n\n\n\n\nDica\n\n\nClaro que essa função é muito simples e você poderia pedir ao Copilot para criar inclusive a assinatura e a docstring.\nMas a ideia aqui é que você entenda o processo com uma função simples, para que depois possa aplicar para funções mais complexas."
  },
  {
    "objectID": "aula_t2.html#section-32",
    "href": "aula_t2.html#section-32",
    "title": "Projetando Funções",
    "section": "",
    "text": "def calcular_lucro(qtd_acoes, valor_compra, valor_atual):\n  \"\"\"\n  qtd_acoes é a quantidade de ações compradas\n  valor_compra é o valor de cada uma dessas ações\n  valor_atual é o valor atual dessas ações\n\n  Retorne o lucro total obtido com a venda das ações.\n  \"\"\"\n\n\nPodemos agora pedir ao Copilot para gerar o corpo da função."
  },
  {
    "objectID": "aula_t2.html#section-33",
    "href": "aula_t2.html#section-33",
    "title": "Projetando Funções",
    "section": "",
    "text": "def calcular_lucro(qtd_acoes, valor_compra, valor_atual):\n  \"\"\"\n  qtd_acoes é a quantidade de ações compradas\n  valor_compra é o valor de cada uma dessas ações\n  valor_atual é o valor atual dessas ações\n\n  Retorne o lucro total obtido com a venda das ações.\n  \"\"\"\n  return (valor_atual - valor_compra) * qtd_acoes"
  },
  {
    "objectID": "aula_t2.html#section-34",
    "href": "aula_t2.html#section-34",
    "title": "Projetando Funções",
    "section": "",
    "text": "Nós já fizemos os três passos iniciais do ciclo de design de funções.\n\nDefina o comportamento desejado para a função\nEscreva um prompt que descreva a função\nDeixe o Copilot gerar o código\nAvalie o código para conferir se ele parece razoável\nTeste o código para conferir se ele está correto"
  },
  {
    "objectID": "aula_t2.html#section-35",
    "href": "aula_t2.html#section-35",
    "title": "Projetando Funções",
    "section": "",
    "text": "O próximo passo é avaliar se o código parece razoável.\n\n  return (valor_atual - valor_compra) * qtd_acoes\n\n\nO exemplo é simples para avaliar 😊"
  },
  {
    "objectID": "aula_t2.html#section-36",
    "href": "aula_t2.html#section-36",
    "title": "Projetando Funções",
    "section": "",
    "text": "O passo seguinte é testar o código.\n\nE aqui vai uma dica interessante de uso do VS Code para testar códigos Python.\n\n\nVocê pode selecionar o código da função no VS Code e apertar Shift + Enter\n\nAo fazer isso, o trecho de código selecionado será executado em um terminal Python.\nE você poderá então fazer chamadas de teste a essa função no terminal Python."
  },
  {
    "objectID": "aula_t2.html#section-37",
    "href": "aula_t2.html#section-37",
    "title": "Projetando Funções",
    "section": "",
    "text": "Um primeiro teste óbvio que poderíamos fazer\n\né calcular o lucro da compra específica de ações do Tião.\n\n\n\n\n&gt;&gt;&gt;  calcular_lucro(10, 15, 17)\n\n\n20\n\n\n\nEstá certo?\n\nSim, como ele teve 2 reais de lucro em cada ação e são 10 ações, o total é 20.\n\n\n\nPrecisamos agora pensar em mais casos de testes."
  },
  {
    "objectID": "aula_t2.html#a-senha-do-tião",
    "href": "aula_t2.html#a-senha-do-tião",
    "title": "Projetando Funções",
    "section": "A senha do Tião",
    "text": "A senha do Tião\n\nTião está se inscrevendo em uma nova rede social chamada ProgrammersKingdom.\n\nEle quer ter certeza que a senha que ele vai usar é forte o suficiente.\n\n\n\nVamos começar com uma definição bem simples do que é uma senha forte.\n\nE depois vamos melhorar a função.\nNo meio do caminho vamos nos acostumando com a sintaxe do Python."
  },
  {
    "objectID": "aula_t2.html#section-38",
    "href": "aula_t2.html#section-38",
    "title": "Projetando Funções",
    "section": "",
    "text": "Testar se as ações tivessem subido para R$ 18 em vez de R$ 17 seria um bom teste?\n\nNão, porque seria um teste de um caso na mesma categoria do teste anterior.\nPrecisamos pensar em situações diferentes.\n\n\nPor exemplo:\n\nUma situação que desse prejuízo.\nOu que as ações permanecessem no mesmo preço."
  },
  {
    "objectID": "aula_t2.html#section-39",
    "href": "aula_t2.html#section-39",
    "title": "Projetando Funções",
    "section": "",
    "text": "Podemos inverter o preço de compra e o atual para testar o prejuízo.\n\n&gt;&gt;&gt;  calcular_lucro(10, 17, 15)\n-20\n\n\nE testar o caso do preço da ação ser mantido\n\n&gt;&gt;&gt;  calcular_lucro(10, 15, 15)\n0"
  },
  {
    "objectID": "aula_t2.html#section-40",
    "href": "aula_t2.html#section-40",
    "title": "Projetando Funções",
    "section": "",
    "text": "Mas como saber quantas categorias testar?\n\nComo ter certeza se dois testes não são da mesma categoria?\nOu se eles cobrem todas categorias possíveis?\n\n\nTestes são uma combinação de ciência 🧪 e arte 🎨\n\nÉ necessário prática e experiência para definir bem casos de testes.\nE vamos ter aula específica sobre isso mais adiante na disciplina."
  },
  {
    "objectID": "aula_t2.html#section-41",
    "href": "aula_t2.html#section-41",
    "title": "Projetando Funções",
    "section": "",
    "text": "A princípio, vamos considerar que uma senha é forte se ela não for '1234' ou 'senha'.\n\nVamos então definir o cabeçalho e a docstring de uma função que recebe uma possível senha e retorna se ela é forte ou não.\n\n\n\ndef eh_senha_forte(senha):\n    \"\"\"\n    Uma senha é forte se não for '1234' ou 'senha'\n\n    Retorna True se a senha for forte e False em caso contrário\n    \"\"\""
  },
  {
    "objectID": "aula_t2.html#section-42",
    "href": "aula_t2.html#section-42",
    "title": "Projetando Funções",
    "section": "",
    "text": "Suponha que seja esse o código gerado.\n\ndef eh_senha_forte(senha):\n    \"\"\"\n    Uma senha é forte se não for '1234' ou 'senha'\n\n    Retorna True se a senha for forte e False em caso contrário\n    \"\"\"    \n    if senha == \"1234\" or senha == \"senha\":\n        return False\n    return True\n\n\nSeguindo próximo passo do ciclo de design de funções, avaliamos se o código parece razoável.\n\nO que acha?"
  },
  {
    "objectID": "aula_t2.html#section-43",
    "href": "aula_t2.html#section-43",
    "title": "Projetando Funções",
    "section": "",
    "text": "Vamos agora testar a função usando Shift + Enter no VS Code.\n\n&gt;&gt;&gt; eh_senha_forte(\"1234\")\nFalse\n&gt;&gt;&gt; eh_senha_forte(\"senha\")\nFalse\n&gt;&gt;&gt; eh_senha_forte(\"admin\")\nTrue\n\n\n'admin' claramente não é uma senha forte 🙂"
  },
  {
    "objectID": "aula_t2.html#section-44",
    "href": "aula_t2.html#section-44",
    "title": "Projetando Funções",
    "section": "",
    "text": "Vamos melhorar a definição da nossa função.\n\ndef eh_senha_forte(senha):\n    \"\"\"\n    Uma senha é forte se não for '1234' ou 'senha' ou 'admin'\n\n    Retorna True se a senha for forte e False em caso contrário\n    \"\"\"    \n    if senha in ['1234', 'senha', 'admin']:\n        return False\n    return True"
  },
  {
    "objectID": "aula_t2.html#section-45",
    "href": "aula_t2.html#section-45",
    "title": "Projetando Funções",
    "section": "",
    "text": "def eh_senha_forte(senha):\n    \"\"\"\n    Uma senha é forte se não for '1234' ou 'senha' ou 'admin'\n\n    Retorna True se a senha for forte e False em caso contrário\n    \"\"\"\n    if senha in ['1234', 'senha', 'admin']:\n        return False\n    return True\nRepare que, nesse caso, o Copilot gerou um código que usa uma lista.\n\nPodemos declarar listas em Python entre colchetes e com valores separados por vírgulas.\nE o operador in indica se um elemento pertence à lista.\n\n\nO código parece razoável? Hora de testar!"
  },
  {
    "objectID": "aula_t2.html#section-46",
    "href": "aula_t2.html#section-46",
    "title": "Projetando Funções",
    "section": "",
    "text": "Mas nossa função ainda aceita 'Tião' como senha, o que é claramente ruim.\n\nVamos então deixar a definição de senha forte, mais forte 💪."
  },
  {
    "objectID": "aula_t2.html#section-47",
    "href": "aula_t2.html#section-47",
    "title": "Projetando Funções",
    "section": "",
    "text": "def eh_senha_forte(senha):\n    \"\"\"\n    Uma senha forte tem pelo menos uma letra maiúscula,\n    uma letra minúscula, um número e um caractere especial.\n\n    Retorna True se a senha for forte e False em caso contrário\n    \"\"\"  \n    tem_maiuscula = any(c.isupper() for c in senha)\n    tem_minuscula = any(c.islower() for c in senha)\n    tem_numero = any(c.isdigit() for c in senha)\n    tem_especial = any(not c.isalnum() for c in senha)\n    return tem_maiuscula and tem_minuscula and tem_numero and tem_especial\n\nO código gerado pelo Copilot parece claro sobre o que está fazendo no geral.\n\nMas há construções de Python nos detalhes que podem ser melhor exploradas."
  },
  {
    "objectID": "aula_t2.html#section-48",
    "href": "aula_t2.html#section-48",
    "title": "Projetando Funções",
    "section": "",
    "text": "Vamos pedir ao Copilot para explicar o trecho\n\nc.isupper() for c in senha\n\n\nPara isso, aperte Ctrl + I e digite explique essa construção do python."
  },
  {
    "objectID": "aula_t2.html#section-49",
    "href": "aula_t2.html#section-49",
    "title": "Projetando Funções",
    "section": "",
    "text": "Essa é uma possível resposta do Copilot.\n\n\n\n\nEsse é um bom exemplo de como o Copilot pode nos ajudar a entender um código já implementado."
  },
  {
    "objectID": "aula_t2.html#section-50",
    "href": "aula_t2.html#section-50",
    "title": "Projetando Funções",
    "section": "",
    "text": "Agora que o código parece razoável, vamos passar para a fase de testes.\n\n&gt;&gt;&gt; eh_senha_forte(\"Tião\")\nFalse\n&gt;&gt;&gt; eh_senha_forte(\"Tião4*\")\nTrue\n\n\nParece tudo certo, né? Mas vamos testar mais um caso.\n\n&gt;&gt;&gt; eh_senha_forte(\"Tião da Silva\")\nTrue\n\n\n\nEssa não era uma senha forte, pois não parece conter caracteres especiais."
  },
  {
    "objectID": "aula_t2.html#section-51",
    "href": "aula_t2.html#section-51",
    "title": "Projetando Funções",
    "section": "",
    "text": "O que será que aconteceu?\n\nVamos analisar a linha que trata caracteres especiais.\n\n\n\n    tem_especial = any(not c.isalnum() for c in senha)\n\n\n\nPodemos pedir ao copilot para explicar o funcionamento da função isalnum."
  },
  {
    "objectID": "aula_t2.html#section-52",
    "href": "aula_t2.html#section-52",
    "title": "Projetando Funções",
    "section": "",
    "text": "Essa é uma possível resposta do Copilot.\n\n\n\n\nVeja que o caractere espaço não é alfanumérico, ou seja, não é uma letra ou um número."
  },
  {
    "objectID": "aula_t2.html#section-53",
    "href": "aula_t2.html#section-53",
    "title": "Projetando Funções",
    "section": "",
    "text": "Podemos pedir ao Copilot para corrigir.\n\nOu fazer uma engenharia de prompt.\n\nO que no caso, significa mudar a maneira como documentamos a função.\n\n\n\nVamos experimentar substituir caractere especial por caractere de pontuação na docstring da função."
  },
  {
    "objectID": "aula_t2.html#section-54",
    "href": "aula_t2.html#section-54",
    "title": "Projetando Funções",
    "section": "",
    "text": "def eh_senha_forte(senha):\n    \"\"\"\n    Uma senha forte tem pelo menos uma letra maiúscula,\n    uma letra minúscula, um número e um caractere de pontuação.\n\n    Retorna True se a senha for forte e False em caso contrário\n    \"\"\""
  },
  {
    "objectID": "aula_t2.html#section-55",
    "href": "aula_t2.html#section-55",
    "title": "Projetando Funções",
    "section": "",
    "text": "def eh_senha_forte(senha):\n    \"\"\"\n    Uma senha forte tem pelo menos uma letra maiúscula,\n    uma letra minúscula, um número e um caractere de pontuação.\n\n    Retorna True se a senha for forte e False em caso contrário\n    \"\"\"  \n    import string\n\n    if len(senha) &lt; 8:\n        return False\n\n    tem_maiuscula = any(c.isupper() for c in senha)\n    tem_minuscula = any(c.islower() for c in senha)\n    tem_numero = any(c.isdigit() for c in senha)\n    tem_pontuacao = any(c in string.punctuation for c in senha)\n\n    return tem_maiuscula and tem_minuscula and tem_numero and tem_pontuacao\n\nEsse foi o código gerado pelo Copilot.\n\nAo analisar se o código parece razoável há dois pontos que vale a pena destacar."
  },
  {
    "objectID": "aula_t2.html#section-56",
    "href": "aula_t2.html#section-56",
    "title": "Projetando Funções",
    "section": "",
    "text": "A primeira é que o código usa a função string.punctuation que parece que vai fazer o que precisamos.\n\nMas para ela funcionar, foi necessário importar um módulo do Python: import string.\n\n\nPython possui diversos módulos que podem ser importados para ajudar a realizar tarefas específicas.\n\nA linguagem já vem com muitos deles.\nMas o grande potencial da linguagem é a quantidade de bibliotecas de terceiros que podem ser instaladas e utilizadas."
  },
  {
    "objectID": "aula_t2.html#section-57",
    "href": "aula_t2.html#section-57",
    "title": "Projetando Funções",
    "section": "",
    "text": "Repare que o código foi gerado fazendo a importação do módulo dentro da própria função.\n\nO que não é uma boa prática de programação.\nPorque deixa as dependências de código menos legíveis para outros programadores.\n\n\nO ideal é levar o import para o início do arquivo.\n\nE, portanto, de fora da função."
  },
  {
    "objectID": "aula_t2.html#section-58",
    "href": "aula_t2.html#section-58",
    "title": "Projetando Funções",
    "section": "",
    "text": "import string\n\ndef eh_senha_forte(senha):\n    \"\"\"\n    Uma senha forte tem pelo menos uma letra maiúscula,\n    uma letra minúscula, um número e um caractere de pontuação.\n\n    Retorna True se a senha for forte e False em caso contrário\n    \"\"\"  \n\n    if len(senha) &lt; 8:\n        return False\n\n    tem_maiuscula = any(c.isupper() for c in senha)\n    tem_minuscula = any(c.islower() for c in senha)\n    tem_numero = any(c.isdigit() for c in senha)\n    tem_pontuacao = any(c in string.punctuation for c in senha)\n\n    return tem_maiuscula and tem_minuscula and tem_numero and tem_pontuacao"
  },
  {
    "objectID": "aula_t2.html#section-59",
    "href": "aula_t2.html#section-59",
    "title": "Projetando Funções",
    "section": "",
    "text": "Apenas tome cuidado na hora de testar a função usando Shift + Enter para executar a célula.\n\nPois, se não selecionar também a linha que contém o import, o código não vai funcionar.\n\n\n\n&gt;&gt;&gt; eh_senha_forte(\"Tião3da!Silva\")\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 12, in eh_senha_forte\n  File \"&lt;stdin&gt;\", line 12, in &lt;genexpr&gt;\nNameError: name 'string' is not defined. Did you forget to import 'string'?"
  },
  {
    "objectID": "aula_t2.html#section-60",
    "href": "aula_t2.html#section-60",
    "title": "Projetando Funções",
    "section": "",
    "text": "Obs.: no teste feito pelos autores do livro, o import não foi gerado.\n\nSe isso acontecer com você, você pode inserir manualmente ou pedir o Copilot para corrigir."
  },
  {
    "objectID": "aula_t2.html#section-61",
    "href": "aula_t2.html#section-61",
    "title": "Projetando Funções",
    "section": "",
    "text": "Outra obsevação sobre o código gerado pelo Copilot é que ele criou uma regra que não havíamos solicitado.\n\n\n    if len(senha) &lt; 8:\n        return False\n\n\n\nEle acrescentou uma verificação que obriga que a senha tenha pelo menos 8 caracteres.\n\nA função len retorna o tamanho de uma string (ou de uma lista, por exemplo)."
  },
  {
    "objectID": "aula_t2.html#section-62",
    "href": "aula_t2.html#section-62",
    "title": "Projetando Funções",
    "section": "",
    "text": "Mesmo que consideremos que pode ter sido uma boa sugestão para esse caso.\n\nÉ importante que estejamos atentos para esse fato:\n\nassistentes de IA podem inventar regras de negócio que não foram solicitadas.\n\nO que reforça a importância da avaliação e teste de código.\n\n\nPara o nosso exemplo, vamos remover essas linhas.\n\nÉ hora então de testar o código."
  },
  {
    "objectID": "aula_t2.html#section-63",
    "href": "aula_t2.html#section-63",
    "title": "Projetando Funções",
    "section": "",
    "text": "&gt;&gt;&gt; eh_senha_forte(\"Tião da Silva\")\nFalse\n&gt;&gt;&gt; eh_senha_forte(\"Tião3da Silva\")\nFalse\n&gt;&gt;&gt; eh_senha_forte(\"Tião3da!Silva\")\nTrue\n\n\nParece tudo OK agora ✅"
  },
  {
    "objectID": "aula_t2.html#section-64",
    "href": "aula_t2.html#section-64",
    "title": "Projetando Funções",
    "section": "",
    "text": "Espero que esses exemplos tenham mostrado a importância de testes de código.\n\nProgramadores iniciantes muitas vezes não testam seu código.\nEles confiam que o código está correto pois, analisando o código, ele parece fazer sentido."
  },
  {
    "objectID": "aula_t2.html#section-65",
    "href": "aula_t2.html#section-65",
    "title": "Projetando Funções",
    "section": "",
    "text": "Uma diferença bem comum entre juninhos e progamadores experientes é:\n\njuninhos sempre assumem que seu código está correto;\nenquanto desenvolvedores experientes sempre assumem que está errado,\n\naté que tenham testado e provado o contrário.\n\n\n\nUm dos motivos que iniciantes falham em testar código\n\né porque parece meio desanimador descobrir que seu código está errado."
  },
  {
    "objectID": "aula_t2.html#section-66",
    "href": "aula_t2.html#section-66",
    "title": "Projetando Funções",
    "section": "",
    "text": "Mas, na verdade, quanto antes descobrirmos que uma função está errada melhor.\n\nPor que dá muito mais trabalho quando já desenvolvemos muitas funções.\nE temos que descobrir porque o sistema como um todo não funciona.\n\n\nMe chamou a atenção que, na Pesquisa de Perfil da Turma, poucos de vocês usam Copilot para gerar testes! ⚠️"
  },
  {
    "objectID": "aula_t2.html#section-67",
    "href": "aula_t2.html#section-67",
    "title": "Projetando Funções",
    "section": "",
    "text": "Para finalizar o trabalho com senhas fortes\n\nvamos criar uma função que pede ao usuário uma senha\ne, se ela não for forte, continua pedindo uma senha até que seja digitada uma senha forte.\nQue é mais ou menos o que os sites fazem quando criamos uma senha.\n\n\nQual poderia ser a assinatura dessa função?"
  },
  {
    "objectID": "aula_t2.html#section-68",
    "href": "aula_t2.html#section-68",
    "title": "Projetando Funções",
    "section": "",
    "text": "A função não precisa de parâmetros, pois não depende de nenhuma informação externa.\n\ndef obter_senha_forte():\n  \"\"\"\n  Fica pedindo uma senha para o usuário até\n  que ele digite uma senha forte.\n\n  Se a senha não for forte, avisa que ela não é.\n  Se for, retorna a senha forte\n  \"\"\""
  },
  {
    "objectID": "aula_t2.html#section-69",
    "href": "aula_t2.html#section-69",
    "title": "Projetando Funções",
    "section": "",
    "text": "def obter_senha_forte():\n  \"\"\"\n  Fica pedindo uma senha para o usuário até\n  que ele digite uma senha forte.\n\n  Se a senha não for forte, avisa que ela não é.\n  Se for, retorna a senha forte\n  \"\"\"\n  while True:\n      senha = input(\"Digite uma senha forte: \")\n      if eh_senha_forte(senha):\n          return senha\n      print(\"A senha não é forte. Tente novamente.\")\n\n\nVeja que o código gerado pelo Copilot usa a função eh_senha_forte que havíamos criado anteriormente.\n\nO código parece razoável?"
  },
  {
    "objectID": "aula_t2.html#esforço-cognitivo",
    "href": "aula_t2.html#esforço-cognitivo",
    "title": "Projetando Funções",
    "section": "Esforço cognitivo",
    "text": "Esforço cognitivo\n\n\n\n\n\n\n\nDica\n\n\nEsforço cognitivo tem relação com a quantidade de informação que seu cérebro consegue processar ao mesmo tempo e ainda ser efetivo.\n\n\n\n\n\nSe alguém te disser 4 palavras aleatórias e pedir para você repetir, provavelmente você conseguirá.\n\nMas se a pessoa disser 20 palavras, provavelmente você terá dificuldades.\nA mesma dificuldade acontece quando temos que pensar em detalhes de uma situação muito complexa."
  },
  {
    "objectID": "aula_t2.html#section-70",
    "href": "aula_t2.html#section-70",
    "title": "Projetando Funções",
    "section": "",
    "text": "Para testar no VS Code, temos agora que lembrar de selecionar as duas funções.\n\n\n&gt;&gt;&gt; obter_senha_forte()\nDigite uma senha forte: tião !!@*#@\nA senha não é forte. Tente novamente.\nDigite uma senha forte: tião!!@*#@\nA senha não é forte. Tente novamente.\nDigite uma senha forte: Tião1!@*#@\n'Tião1!@*#@'\n\n\nRepare que a última linha é o retorno da função obter_senha_forte()."
  },
  {
    "objectID": "aula_t2.html#esforço-cognitivo-1",
    "href": "aula_t2.html#esforço-cognitivo-1",
    "title": "Projetando Funções",
    "section": "Esforço cognitivo",
    "text": "Esforço cognitivo\nProgramadores têm o mesmo problema.\n\nSe tentarem resolver um problema complexo tudo de uma vez, têm dificuldade de criar um código correto.\n\n\nFunções ajudam os programadores a evitarem fazer tudo de uma vez."
  },
  {
    "objectID": "aula_t2.html#evitar-repetição",
    "href": "aula_t2.html#evitar-repetição",
    "title": "Projetando Funções",
    "section": "Evitar repetição",
    "text": "Evitar repetição\n\nProgramadores, e pessoas em geral, não gostam muito de resolver o mesmo problema repetidamente.\n\nSe você criar uma função que calcula a área de um círculo, por exemplo,\n\ne precisar desse cálculo em lugares diferentes de um sistema,\nvocê pode chamar a mesma função nos dois lugares.\n\n\n\n\n\n\n\n\n\n\nDica\n\n\nReutilização de código, que é o contrário da replicação, é uma característica de um código bem projetado."
  },
  {
    "objectID": "aula_t2.html#melhoria-dos-testes",
    "href": "aula_t2.html#melhoria-dos-testes",
    "title": "Projetando Funções",
    "section": "Melhoria dos testes",
    "text": "Melhoria dos testes\n\nÉ muito mais complicado testar um código que faz muitas coisas ao mesmo tempo.\n\n\nQuando criamos funções para tarefas específicas, podemos testá-las individualmente.\n\nEssa é uma técnica chamada teste unitário.\nUtilizamos diferentes casos de teste com diferentes parâmetros de entrada.\nSe todos eles produzirem uma saída correta, provavelmente nossa função não causará problema no sistema como um todo."
  },
  {
    "objectID": "aula_t2.html#melhoria-da-confiabilidade",
    "href": "aula_t2.html#melhoria-da-confiabilidade",
    "title": "Projetando Funções",
    "section": "Melhoria da confiabilidade",
    "text": "Melhoria da confiabilidade\n\nEngenheiros de software experientes cometem erros, e sabemos que o Copilot também.\n\n\nSe você for um programador incrível, e cada linha de código que você escreve tiver 95% de chances de estar certa,\n\nquantas linhas de código você acha que conseguiria escrever antes que pelo menos uma linha de código fosse provavelmente incorreta?\n\nA resposta são 14 linhas de código!\n\n\n\n\nObs.: veja a explicação estatística do ChatGPT sobre as 14 linhas aqui. 😃"
  },
  {
    "objectID": "aula_t2.html#melhoria-dos-testes-1",
    "href": "aula_t2.html#melhoria-dos-testes-1",
    "title": "Projetando Funções",
    "section": "Melhoria dos testes",
    "text": "Melhoria dos testes\n\n\n\n\n\n\nDica\n\n\nTestes unitários são altamente recomendados em softwares bem projetados."
  },
  {
    "objectID": "aula_t2.html#melhoria-da-confiabilidade-1",
    "href": "aula_t2.html#melhoria-da-confiabilidade-1",
    "title": "Projetando Funções",
    "section": "Melhoria da confiabilidade",
    "text": "Melhoria da confiabilidade\nNote que 95% é um nível bem alto, mas, mesmo assim, é possível que erros aconteçam em poucas linhas.\n\nPor isso, dividir um problema em funções com até 12 (ou, no máximo, 20 linhas)\n\ndiminui a probabilidade de que exista um erro no código.\n\n\n\nSem contar que quando um código tem muitos erros que interagem entre si,\n\na probabilidade se gerem gerados novos erros ainda maiores só aumenta."
  },
  {
    "objectID": "aula_t2.html#melhoria-da-confiabilidade-2",
    "href": "aula_t2.html#melhoria-da-confiabilidade-2",
    "title": "Projetando Funções",
    "section": "Melhoria da confiabilidade",
    "text": "Melhoria da confiabilidade\nTodo programador experiente já passou horas 😫 depurando um código que tinha múltiplos erros.\n\nQue poderiam ter sido evitadas com testes mais frequentes em trechos menores e código."
  },
  {
    "objectID": "aula_t2.html#melhoria-da-legibilidade-de-código",
    "href": "aula_t2.html#melhoria-da-legibilidade-de-código",
    "title": "Projetando Funções",
    "section": "Melhoria da legibilidade de código",
    "text": "Melhoria da legibilidade de código\n\nMesmo usando Copilot, quando pensamos em software desenvolvido por várias pessoas\n\né importante que seja fácil para a equipe entender o código existente,\nindependente se ele foi criado pelo Copilot ou por outros programadores."
  },
  {
    "objectID": "aula_t2.html#melhoria-da-legibilidade-de-código-1",
    "href": "aula_t2.html#melhoria-da-legibilidade-de-código-1",
    "title": "Projetando Funções",
    "section": "Melhoria da legibilidade de código",
    "text": "Melhoria da legibilidade de código\nIsso torna mais fácil tarefas como:\n\nencontrar bugs;\ndeterminar onde começar a alterar o código para acrescentar uma nova funcionalidade;\nentender, em alto nível, se seria fácil ou não fazer alguma alteração no sistema que estejamos prospectando."
  },
  {
    "objectID": "aula_t2.html#melhoria-da-legibilidade-de-código-2",
    "href": "aula_t2.html#melhoria-da-legibilidade-de-código-2",
    "title": "Projetando Funções",
    "section": "Melhoria da legibilidade de código",
    "text": "Melhoria da legibilidade de código\n\nTer as tarefas do sistema divididas em funções\n\nnos ajuda a entender o que cada parte do código faz\ne a ter uma melhor percepção sobre como as coisas funcionam no todo.\n\n\n\nTambém nos ajuda a dividir o trabalho e as responsabilidades de forma a garantir que o código está correto."
  },
  {
    "objectID": "aula_t2.html#uma-tarefa-clara-a-realizar",
    "href": "aula_t2.html#uma-tarefa-clara-a-realizar",
    "title": "Projetando Funções",
    "section": "Uma tarefa clara a realizar",
    "text": "Uma tarefa clara a realizar\n\nUma função folha pode ser algo como:\n\nCalcular o volume de uma esfera.\nEncontrar o maior número em uma lista.\nVerificar se uma lista tem um valor específico.\n\n\n\nFunções que não são folha podem ter objetivos mais amplos, como:\n\nAtualizar os gráficos do jogo.\nMas ainda assim devem ter um objetivo específico, e devem chamar outras funções para atingir esse objetivo."
  },
  {
    "objectID": "aula_t2.html#comportamento-claramente-definido",
    "href": "aula_t2.html#comportamento-claramente-definido",
    "title": "Projetando Funções",
    "section": "Comportamento claramente definido",
    "text": "Comportamento claramente definido\n\nA tarefa “encontrar o maior número em uma lista” é claramente definida.\n\nSe alguém te der uma lista de números e te pedir o maior número, você sabe exatamente o que fazer.\n\n\n\nJá a tarefa “encontre a melhor palavra em uma lista” é mal definida.\n\nFalta informação: o que significa palavra “melhor”?\nÉ a palavra mais longa, a que tem menos vogais, a que tem J de Júlio 😁?"
  },
  {
    "objectID": "aula_t2.html#comportamento-claramente-definido-1",
    "href": "aula_t2.html#comportamento-claramente-definido-1",
    "title": "Projetando Funções",
    "section": "Comportamento claramente definido",
    "text": "Comportamento claramente definido\nA questão é que tarefas subjetivas não são boas para computadores.\n\nÉ comum conseguimos deixar claro o comportamento da função só pelo seu nomes.\n\nMas muitas vezes isso não é possível, e usamos a docstring para dar mais detalhes sobre a tarefa.\n\n\n\n\n\n\n\n\n\nDica\n\n\nSe precisar escrever mais do que algumas linhas em uma docstring de uma função folha, pode ser um sinal de que a tarefa é muito grande para uma única função."
  },
  {
    "objectID": "aula_t2.html#poucas-linhas-de-código",
    "href": "aula_t2.html#poucas-linhas-de-código",
    "title": "Projetando Funções",
    "section": "Poucas linhas de código",
    "text": "Poucas linhas de código\n\nMuitas empresas de software tem guias de estilo de programação que sugerem um limite no número de linhas das funções.\n\nEsse limite geralmente varia de 12 a 20 linhas.\n\n\n\nNa verdade o número de linhas é um proxy para a complexidade do código.\n\nE acaba sendo um proxy bem razoável.\n\n\n\n\n\n\n\n\n\nDica\n\n\nSe o Copilot gerar uma função para você com 50 linhas de código, é recomendável pedir que ele quebre a tarefa em funções menores."
  },
  {
    "objectID": "aula_t2.html#uso-geral-em-vez-de-uso-específico",
    "href": "aula_t2.html#uso-geral-em-vez-de-uso-específico",
    "title": "Projetando Funções",
    "section": "Uso geral em vez de uso específico",
    "text": "Uso geral em vez de uso específico\n\nCriar uma função que retorna todos os números de uma lista maiores que cinco\n\npode ser útil para uma necessidade específica.\n\n\n\nMas a função seria muito mais útil se o limite fosse um parâmetro.\n\n\nSeguimos a mesma ideia ao calcular o lucro das ações do Tião.\n\n\n\n\n\n\n\n\nDica\n\n\nVale a pena reescrever uma função se percebermos que ela pode ter um uso mais geral."
  },
  {
    "objectID": "aula_t2.html#entrada-e-saída-claras",
    "href": "aula_t2.html#entrada-e-saída-claras",
    "title": "Projetando Funções",
    "section": "Entrada e saída claras",
    "text": "Entrada e saída claras\n\nÉ importante que uma função tenha parâmetros e valores de retorno bem definidos.\n\nPode ser que precisemos de uma função que receba muitos parâmetros,\n\nou que retorne vários valores.\n\nMas é importante sempre questionar se eles são realmente necessários ou se não teria outro jeito de resolver a tarefa.\n\n\n\n\n\n\n\n\n\nDica\n\n\nSe você está criando uma função que às vezes retorna uma lista, às vezes um valor único e às vezes não retorna nada, é um sinal de que ela provavelmente não é uma boa função."
  },
  {
    "objectID": "aula_t2.html#section-71",
    "href": "aula_t2.html#section-71",
    "title": "Projetando Funções",
    "section": "",
    "text": "Além das funções serem essenciais na decomposição de problemas,\n\nelas também trazem outros benefícios."
  },
  {
    "objectID": "aula_t2.html#exemplos-de-boas-funções",
    "href": "aula_t2.html#exemplos-de-boas-funções",
    "title": "Projetando Funções",
    "section": "Exemplos de boas funções",
    "text": "Exemplos de boas funções\n\nCalcular o volume de uma esfera\n\nDado o raio da esfera calcula seu volume.\n\nEncontrar o maior número em uma lista\n\nDada uma lista, retorna seu maior valor.\n\nVerificar se a lista contém um valor específico\n\nDada uma lista e um valor, retornar True se ela tem o valor e False em caso contrário."
  },
  {
    "objectID": "aula_t2.html#exemplos-de-boas-funções-1",
    "href": "aula_t2.html#exemplos-de-boas-funções-1",
    "title": "Projetando Funções",
    "section": "Exemplos de boas funções",
    "text": "Exemplos de boas funções\n\nExibir o estado de um jogo de Xadrez\n\nDada uma lista 2D representando o tabuleiro do jogo, exibir o tabuleiro na tela em formato texto.\n\nInserir um valor em uma lista\n\nDada uma lista, u m novo valor e uma posição na lista, retornar uma nova lista que é a lista original com o novo valor inserido na posição especificada."
  },
  {
    "objectID": "aula_t2.html#exemplos-de-boas-funções-folha",
    "href": "aula_t2.html#exemplos-de-boas-funções-folha",
    "title": "Projetando Funções",
    "section": "Exemplos de boas funções folha",
    "text": "Exemplos de boas funções folha\n\nCalcular o volume de uma esfera\n\nDado o raio da esfera calcula seu volume.\n\nEncontrar o maior número em uma lista\n\nDada uma lista, retorna seu maior valor.\n\nVerificar se a lista contém um valor específico\n\nDada uma lista e um valor, retornar True se ela tem o valor e False em caso contrário."
  },
  {
    "objectID": "aula_t2.html#exemplos-de-boas-funções-folha-1",
    "href": "aula_t2.html#exemplos-de-boas-funções-folha-1",
    "title": "Projetando Funções",
    "section": "Exemplos de boas funções folha",
    "text": "Exemplos de boas funções folha\n\nExibir o estado de um jogo de Xadrez\n\nDada uma lista 2D representando o tabuleiro do jogo, exibir o tabuleiro na tela em formato texto.\n\nInserir um valor em uma lista\n\nDada uma lista, um novo valor e uma posição na lista, retornar uma nova lista que é a lista original com o novo valor inserido na posição especificada."
  },
  {
    "objectID": "aula_t2.html#funções-folha-ruins",
    "href": "aula_t2.html#funções-folha-ruins",
    "title": "Projetando Funções",
    "section": "Funções folha ruins",
    "text": "Funções folha ruins\nVamos agora ver alguns exemplos de funções folha ruins e porque elas são ruins.\n\nPedir informações fiscais de um usuário e calcular seu imposto de renda\n\nCalcular imposto de renda envolve vários cálculos que deveriam ser implementados em funções separadas."
  },
  {
    "objectID": "aula_t2.html#funções-folha-ruins-1",
    "href": "aula_t2.html#funções-folha-ruins-1",
    "title": "Projetando Funções",
    "section": "Funções folha ruins",
    "text": "Funções folha ruins\nRemover o maior valor de uma lista\n\nPode não parecer ruim a princípio, mas veja que estamos fazendo duas coisas.\n\nPrecisamos encontrar o maior valor na lista.\nE precisamos remover um valor da lista.\n\nAssim, seria mais reutilizável ter uma função folha para cada subtarefa.\n\nObs.: pode ser útil criar uma função não folha que chama as outras duas se isso for usado várias vezes em um sistema."
  },
  {
    "objectID": "aula_t2.html#funções-folha-ruins-2",
    "href": "aula_t2.html#funções-folha-ruins-2",
    "title": "Projetando Funções",
    "section": "Funções folha ruins",
    "text": "Funções folha ruins\nDado um conjunto de dados estatísticos de partidas de futebol, retornar os nomes dos zagueiros que correram mais de 8 km\n\nHá muita informação específica nesse caso.\nClaramente a distância percorrida poderia ser um parâmetro.\nMas, se pensarmos bem, inclusive a posição dos jogadores poderia ser um parâmetro.\nMelhor ainda seria se a própria estatística fosse um parâmetro.\n\nPoderíamos querer consultar, por exemplo, o nome dos goleiro que fizeram mais que 10 gols."
  },
  {
    "objectID": "aula_t2.html#funções-folha-ruins-3",
    "href": "aula_t2.html#funções-folha-ruins-3",
    "title": "Projetando Funções",
    "section": "Funções folha ruins",
    "text": "Funções folha ruins\nDeterminar o melhor filme de todos os tempos\n\nO problema dessa função é que ela é muito vaga.\n\nO que define o que é um bom filme?\nQuais filmes deveriam ser considerados?\n\nSeria mais claro se a função recebesse uma lista de filmes com suas respectivas avaliações e um número limite de avaliações.\n\nE retornasse os filmes melhor avaliados que tivessem, no mínimo, o número de avaliações passado como limite."
  },
  {
    "objectID": "aula_t2.html#funções-folha-ruins-4",
    "href": "aula_t2.html#funções-folha-ruins-4",
    "title": "Projetando Funções",
    "section": "Funções folha ruins",
    "text": "Funções folha ruins\nJogar Call of Duty\n\nPrecisa explicar? 🤓"
  },
  {
    "objectID": "aula_t2.html#section-72",
    "href": "aula_t2.html#section-72",
    "title": "Projetando Funções",
    "section": "",
    "text": "Não há uma regra absoluta para definir o que é uma boa função.\n\nMas há recomendações e intuições que podemos compartilhar.\nMesmo com elas, saiba que identificar boas funções é uma habilidade que requer tempo e prática.\n\n\nAntes de entrar nas recomendações, você verá que usaremos aqui o termo “funções folha” (leaf functions).\n\nEsse termo se referem a funções que não chamam nenhuma outra função do nosso próprio sistema.\nA ideia vem de que em uma árvore, a partir da raiz, as folhas são as “pontas”."
  },
  {
    "objectID": "aula_t2.html#section-73",
    "href": "aula_t2.html#section-73",
    "title": "Projetando Funções",
    "section": "",
    "text": "Em resumo, esse então é o guia para criarmos boas funções:\n\nUma tarefa clara a realizar\nComportamento claramente definido\nPoucas linhas de código\nUso geral em vez de uso específico\nEntrada e saída claras"
  },
  {
    "objectID": "aula_t2.html#section-74",
    "href": "aula_t2.html#section-74",
    "title": "Projetando Funções",
    "section": "",
    "text": "Quando pedimos ao Copilot para gerar um código, podemos avaliar outras possíveis sugestões dele.\n\nPara exemplificar isso, suponha que vamos criar um programa para jogar Scrabble.\n\nÉ um jogo de tabuleiro baseado em palavras-cruzadas.\nDois jogadores devem ir completando palavras em um tabuleiro com peças de letras.\n\nE, cada vez que um jogador consegue incluir uma palavra, ele ganha pontos de acordo com as letras da palavra."
  },
  {
    "objectID": "aula_t2.html#section-75",
    "href": "aula_t2.html#section-75",
    "title": "Projetando Funções",
    "section": "",
    "text": "Vamos trabalhar aqui apenas com a função que calcula os pontos de uma palavra.\n\nO cabeçalho e docstring abaixo mostram como é o cálculo na versão do jogo em português.\n\n\ndef numero_de_pontos(palavra):\n    \"\"\"\n    Cada letra na palavra vale os seguintes pontos:\n    a, e, i, o, u, m, s, r, t: 1 ponto\n    d, l, c, p: 2 pontos\n    n, b, ç: 3 pontos\n    f, g, h, v: 4 pontos\n    j: 5 pontos\n    q: 6 pontos\n    x, z: 8 pontos\n\n    palavra é uma palavra formada por letras caracteres minúsculos\n    Retorna a soma dos pontos de cada letra da palavra\n    \"\"\""
  },
  {
    "objectID": "aula_t2.html#section-76",
    "href": "aula_t2.html#section-76",
    "title": "Projetando Funções",
    "section": "",
    "text": "Uma possível resposta do Copilot para o corpo da função é:\n    pontos = 0\n    for letra in palavra:\n        if letra in \"aeioumsrt\":\n            pontos += 1\n        elif letra in \"dlcp\":\n            pontos += 2\n        elif letra in \"nbç\":\n            pontos += 3\n        elif letra in \"fghv\":\n            pontos += 4\n        elif letra == \"j\":\n            pontos += 5\n        elif letra == \"q\":\n            pontos += 6\n        elif letra in \"xz\":\n            pontos += 8\n    return pontos"
  },
  {
    "objectID": "aula_t2.html#section-77",
    "href": "aula_t2.html#section-77",
    "title": "Projetando Funções",
    "section": "",
    "text": "O código parece razoável, e nosso próximo passo seria testar a função.\n\nMas o ponto que quero mostrar aqui é como escolher as sugestões do Copilot."
  },
  {
    "objectID": "aula_t2.html#section-78",
    "href": "aula_t2.html#section-78",
    "title": "Projetando Funções",
    "section": "",
    "text": "Quando o Copilot sugere o código, ele aparece esmaecido e em itálico.\n\nAntes de apertarmos TAB para aceitar o código,\npodemos avaliar outras sugestões que o Copilot oferece.\n\nIsso pode ser feito passando o mouse sobre o código e escolhendo no painel que aparece acima do código.\nOu pelo atalho Alt + ] para ver a próxima sugestão ou Alt + [ para ver a anterior."
  },
  {
    "objectID": "aula_t2.html#section-79",
    "href": "aula_t2.html#section-79",
    "title": "Projetando Funções",
    "section": "",
    "text": "Uma segunda sugestão feita pelo código para o corpo da função foi:\n    pontos = {\n        'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1, 'm': 1, 's': 1, 'r': 1, 't': 1,\n        'd': 2, 'l': 2, 'c': 2, 'p': 2,\n        'n': 3, 'b': 3, 'ç': 3,\n        'f': 4, 'g': 4, 'h': 4, 'v': 4,\n        'j': 5,\n        'q': 6,\n        'x': 8, 'z': 8\n    }\n    total = 0\n    for letra in palavra:\n        total += pontos.get(letra, 0)  # Adiciona o valor da letra ou 0 se não estiver no dicionário\n    return total\n\nRepare que ela é bem diferente da anterior."
  },
  {
    "objectID": "aula_t2.html#section-80",
    "href": "aula_t2.html#section-80",
    "title": "Projetando Funções",
    "section": "",
    "text": "Essa segunda sugestão usa um dicionário para guardar o valor de cada letra.\n\nUm dicionário do Python é uma estrutura similar a um HashMap do Java.\n\n\nNo código, o dicionário pontos usa as letras como chaves e os pontos correspondentes como valores.\n\nAssim, ao percorrer a palavra uma letra de cada vez.\n\npodemos consultar o dicionário para buscar quanto vale a letra."
  },
  {
    "objectID": "aula_t2.html#section-81",
    "href": "aula_t2.html#section-81",
    "title": "Projetando Funções",
    "section": "",
    "text": "Em uma terceira sugestão, o Copilot fez a soma dos pontos em uma única linha, trocando o trecho\n\n    total = 0\n    for letra in palavra:\n        total += pontos.get(letra, 0)  # Adiciona o valor da letra ou 0 se não estiver no dicionário\n    return total\n\npor\n\n    return sum(pontos.get(letra, 0) for letra in palavra)\n\n\n\nEsse tipo de construção usando list comprehension é muito comum em Python."
  },
  {
    "objectID": "aula_t2.html#section-82",
    "href": "aula_t2.html#section-82",
    "title": "Projetando Funções",
    "section": "",
    "text": "Dica\n\n\nVocê pode fazer com o que o painel de escolha das sugestões do Copilot fique sempre visível, para não precisar passar o mouse sobre o código para acessá-lo.\nPara isso, quando ele aparecer uma vez, acesse os botão de três pontos ao final do painel e escolha a opção Always show toolbar."
  },
  {
    "objectID": "aula_t2.html#section-83",
    "href": "aula_t2.html#section-83",
    "title": "Projetando Funções",
    "section": "",
    "text": "Para fechar o exemplo, suponha que o Tião está jogando Scrabble\n\ne tem três palavras que poderiam ser encaixadas agora: zape, pazes e pizza.\nele gostaria de saber qual palavra dá mais pontos.\n\n\nO que acha do cabeçalho abaixo para uma função que retorne a melhor dessas três palavras?\n\ndef melhor_palavra(palavra1, palavra2, palavra3):"
  },
  {
    "objectID": "aula_t2.html#section-84",
    "href": "aula_t2.html#section-84",
    "title": "Projetando Funções",
    "section": "",
    "text": "def melhor_palavra(palavra1, palavra2, palavra3):\n\nDe acordo com o guia para criarmos boas funções essa não é uma boa função, por que?\n\nEla poderia ser mais geral, funcionando para qualquer quantidade de palavras.\nPoderíamos, por exemplo, receber uma lista de palavras como parâmetro.\n\n\nVamos então melhorar a definição da função."
  },
  {
    "objectID": "aula_t2.html#section-85",
    "href": "aula_t2.html#section-85",
    "title": "Projetando Funções",
    "section": "",
    "text": "def melhor_palavra(palavras):\n    \"\"\"\n    palavras é uma lista de palavras.\n\n    Retorna a palavra com a maior pontuação.\n    \"\"\"\n    if not palavras:\n        return None  # Retorna None se a lista estiver vazia\n\n    melhor = palavras[0]\n    max_pontos = numero_de_pontos(melhor)\n\n    for palavra in palavras[1:]:\n        pontos = numero_de_pontos(palavra)\n        if pontos &gt; max_pontos:\n            melhor = palavra\n            max_pontos = pontos\n\n    return melhor"
  },
  {
    "objectID": "aula_t2.html#section-86",
    "href": "aula_t2.html#section-86",
    "title": "Projetando Funções",
    "section": "",
    "text": "Escolhendo entre as sugestões do Copilot, essa foi outra opção:\n\ndef melhor_palavra(palavras):\n    \"\"\"\n    palavras é uma lista de palavras.\n\n    Retorna a palavra com a maior pontuação.\n    \"\"\"\n    return max(palavras, key=numero_de_pontos)\n\n\nQual das duas opções você prefere?"
  },
  {
    "objectID": "aula_t2.html#section-87",
    "href": "aula_t2.html#section-87",
    "title": "Projetando Funções",
    "section": "",
    "text": "Talvez seja prematuro escolher sem fazer testes.\n\nVeja esse teste feito com a segunda opção:\n\n&gt;&gt;&gt; melhor_palavra([])\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 6, in melhor_palavra\nValueError: max() iterable argument is empty\n\n\n\nEsse erro não ocorreria na primeira opção."
  },
  {
    "objectID": "aula_t2.html#section-88",
    "href": "aula_t2.html#section-88",
    "title": "Projetando Funções",
    "section": "",
    "text": "A dica portanto é:\n\nPara qualquer que seja a sugestão escolhida: é necessário sempre testar!\n\n\nA segunda opção poderia ser alterada para a acrescentar o mesmo if da primeira opção.\n\nNesse caso, qual você escolheria?\nSugestão: depende do seu objetivo.\n\nA primeira opção é mais legível.\nA segunda é mais compacta."
  },
  {
    "objectID": "aula_p2.html#section-1",
    "href": "aula_p2.html#section-1",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Na aula anterior, vimos um guia para criarmos boas funções:\n\nUma tarefa clara a realizar\nComportamento claramente definido\nPoucas linhas de código\nUso geral em vez de uso específico\nEntrada e saída claras"
  },
  {
    "objectID": "aula_p2.html#exemplos-de-boas-funções-folha",
    "href": "aula_p2.html#exemplos-de-boas-funções-folha",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "Exemplos de boas funções folha",
    "text": "Exemplos de boas funções folha\n\nCalcular o volume de uma esfera\n\nDado o raio da esfera calcula seu volume.\n\nEncontrar o maior número em uma lista\n\nDada uma lista, retorna seu maior valor.\n\nVerificar se a lista contém um valor específico\n\nDada uma lista e um valor, retornar True se ela tem o valor e False em caso contrário."
  },
  {
    "objectID": "aula_p2.html#exemplos-de-boas-funções-folha-1",
    "href": "aula_p2.html#exemplos-de-boas-funções-folha-1",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "Exemplos de boas funções folha",
    "text": "Exemplos de boas funções folha\n\nExibir o estado de um jogo de Xadrez\n\nDada uma lista 2D representando o tabuleiro do jogo, exibir o tabuleiro na tela em formato texto.\n\nInserir um valor em uma lista\n\nDada uma lista, um novo valor e uma posição na lista, retornar uma nova lista que é a lista original com o novo valor inserido na posição especificada."
  },
  {
    "objectID": "aula_p2.html#funções-folha-ruins",
    "href": "aula_p2.html#funções-folha-ruins",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "Funções folha ruins",
    "text": "Funções folha ruins\nVamos agora ver alguns exemplos de funções folha ruins e porque elas são ruins.\n\nPedir informações fiscais de um usuário e calcular seu imposto de renda\n\nCalcular imposto de renda envolve vários cálculos que deveriam ser implementados em funções separadas."
  },
  {
    "objectID": "aula_p2.html#funções-folha-ruins-1",
    "href": "aula_p2.html#funções-folha-ruins-1",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "Funções folha ruins",
    "text": "Funções folha ruins\nRemover o maior valor de uma lista\n\nPode não parecer ruim a princípio, mas veja que estamos fazendo duas coisas.\n\nPrecisamos encontrar o maior valor na lista.\nE precisamos remover um valor da lista.\n\nAssim, seria mais reutilizável ter uma função folha para cada subtarefa.\n\nObs.: pode ser útil criar uma função não folha que chama as outras duas se isso for usado várias vezes em um sistema."
  },
  {
    "objectID": "aula_p2.html#funções-folha-ruins-2",
    "href": "aula_p2.html#funções-folha-ruins-2",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "Funções folha ruins",
    "text": "Funções folha ruins\nDado um conjunto de dados estatísticos de partidas de futebol, retornar os nomes dos zagueiros que correram mais de 8 km\n\nHá muita informação específica nesse caso.\nClaramente a distância percorrida poderia ser um parâmetro.\nMas, se pensarmos bem, inclusive a posição dos jogadores poderia ser um parâmetro.\nMelhor ainda seria se a própria estatística fosse um parâmetro.\n\nPoderíamos querer consultar, por exemplo, o nome dos goleiro que fizeram mais que 10 gols."
  },
  {
    "objectID": "aula_p2.html#funções-folha-ruins-3",
    "href": "aula_p2.html#funções-folha-ruins-3",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "Funções folha ruins",
    "text": "Funções folha ruins\nDeterminar o melhor filme de todos os tempos\n\nO problema dessa função é que ela é muito vaga.\n\nO que define o que é um bom filme?\nQuais filmes deveriam ser considerados?\n\nSeria mais claro se a função recebesse uma lista de filmes com suas respectivas avaliações e um número limite de avaliações.\n\nE retornasse os filmes melhor avaliados que tivessem, no mínimo, o número de avaliações passado como limite."
  },
  {
    "objectID": "aula_p2.html#funções-folha-ruins-4",
    "href": "aula_p2.html#funções-folha-ruins-4",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "Funções folha ruins",
    "text": "Funções folha ruins\nJogar Call of Duty\n\nPrecisa explicar? 🤓"
  },
  {
    "objectID": "aula_p2.html#section-21",
    "href": "aula_p2.html#section-21",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Vamos agora escrever um prompt para carregar os dados do arquivo em nosso programa.\n\nAbra a pasta criada no VS Code.\nCrie um novo arquivo python chamado futebol.py.\nEm seguida, vamos definir uma função para carregar os dados com do arquivo top5-players.csv.\n\n\n\ndef carregar_dados_futebol(nome_arquivo_csv):\n    \"\"\"\n    A função abre o arquivo CSV passado por parâmetro\n    e retorna os dados carregados\n    \"\"\""
  },
  {
    "objectID": "aula_p2.html#section-22",
    "href": "aula_p2.html#section-22",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Teste seu programa usando Shift + Enter para excecutá-lo em um terminal Python.\n\nChame a função passando como parâmetro o nome do arquivo top5-players.csv.\nSe tudo der certo, os dados do arquivo vão aparecer na tela."
  },
  {
    "objectID": "aula_p2.html#section-23",
    "href": "aula_p2.html#section-23",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Nessa parte cada aluno pode estar vendo um código diferente:\n\npois há várias bibliotecas no Python para lidar com arquivos CSV.\nE, como já sabemos, os assistentes de IA são não determinísticos."
  },
  {
    "objectID": "aula_p2.html#section-24",
    "href": "aula_p2.html#section-24",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "É possível que o Copilot tenha sugerido uma biblioteca mas não a tenha importado.\n\nPara corrigir isso, ou algum outro tipo de erro, você pode selecionar o código gerado,\n\nclicar na lâmpada que aparece e acessar a opção fix (consertar).\n\nSe ele sugeriu usar uma biblioteca que precisaria ser instalada você pode alterar o prompt\n\npedindo para usar apenas as bibliotecas padrões do python."
  },
  {
    "objectID": "aula_p2.html#section-25",
    "href": "aula_p2.html#section-25",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Vamos agora trabalhar com os dados que foram carregados.\n\nA ideia é analisar as estatísticas dos jogadores brasileiros nas principais ligas de futebol.\n\n\nPara isso vamos usar duas funções:\n\nUma para calcular os dados que queremos: quantidade de gols feitos por brasileiros em cada liga.\nE outra para exibir os resultados."
  },
  {
    "objectID": "aula_p2.html#section-26",
    "href": "aula_p2.html#section-26",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Gere então o código da primeira função com o prompt abaixo.\n\ndef calcular_quantidade_gols(dados, pais):\n    \"\"\"\n    dados contém dados estatísticos de futebol:\n    - a terceira coluna traz o nome do país do jogador\n    - a sexta coluna o nome da liga\n    - a nota coluna o número de gols feitos pelo jogador\n    pais é a identificação do país de interesse (ex.: \"br BRA\")\n\n    A função calcula e retorna a quantidade de gols feitos \n    por jogadores do país passado em cada liga\n    \"\"\"\n\n\nE teste sua função.\n\nLembre-se que você precisa chamar a primeira função."
  },
  {
    "objectID": "aula_p2.html#section-27",
    "href": "aula_p2.html#section-27",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Nós já vimos os resultados no terminal mas em um formato que não é muito adequado para o usuário final.\n\nVamos agora criar uma função para mostrar o resultado.\nE pedir o resultado com as quantidades de gols em ordem decrescente.\n\n\n\ndef exibir_gols_por_liga(quantidade_gols):\n    \"\"\"\n    A função exibe a quantidade de gols feitos por \n    jogadores de um país em cada liga em ordem decrescente.\n    \"\"\""
  },
  {
    "objectID": "aula_p2.html#section-28",
    "href": "aula_p2.html#section-28",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Em seguida, vamos pedir ao Copilot para chamar as funções no próprio script Python que estamos criando.\n\n\n# Chame as funções anteriores para exibir ao usuário\n# as quantidades de gols feitos por brasileiros\n# a partir do arquivo top5-players.csv\n\n\n\nAgora nós vamos testar o script propriamente dito.\n\nClicando no botão Run no canto superior direito do VS Code."
  },
  {
    "objectID": "aula_p2.html#section-29",
    "href": "aula_p2.html#section-29",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Repare que fizemos o nosso programa com apenas três funções.\n\nUma para lidar com a entrada de dados.\nOutra para processá-los.\nE a última para exibir os dados.\n\n\nEsse ciclo de entrada, processamento e saída é extremamente comum em programação."
  },
  {
    "objectID": "aula_p2.html#section-30",
    "href": "aula_p2.html#section-30",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Vamos agora usar o Copilot para alterar o código que havíamos gerado.\n\nSuponha que estamos interessados apenas nos gols dos jogadores jovens (que têm até 23 anos)\n\n\nPara isso, nós vamos apagar o código gerado para a segunda função que criamos\n\ne vamos redefinir a função.\nVocê alteraria algo na assinatura da função?\nE o que você alteraria na docstring da função?\nMãos à Obra e ao Teste!"
  },
  {
    "objectID": "aula_p2.html#section-31",
    "href": "aula_p2.html#section-31",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Seguindo os critérios de criação de boas funções provavelmente você:\n\nAcrescentou um parâmetro de idade máxima à função\nAcrescentou na docstring\n\na informação da coluna que tem a idade do jogador (a sétima).\no significado do parâmetro idade\n\nAlém, é claro de ter passado 23 como idade máxima na chamada da função.\n\n\nSe não foi isso que fez, bora fazer :)"
  },
  {
    "objectID": "aula_p2.html#section-32",
    "href": "aula_p2.html#section-32",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Você deve ter notado que os nomes das ligas começam com um identificador do país\n\neng, es, it, fr ou de.\n\n\nVamos pedir ao Copilot para substituir esse identificador pelo nome do país.\n\nAcrescentando o texto do slide a seguir à docstring da função de exibição dos resultados"
  },
  {
    "objectID": "aula_p2.html#section-33",
    "href": "aula_p2.html#section-33",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "O nome da liga tem primeiro duas ou três letras para \nidentificar o país, seguido de um espaço e depois o \nnome da liga propriamente dito. Substitua essas duas \nletras pelo nome do país. Os países são: \neng: Inglaterra, es: Espanha, it: Itália, fr: França \ne de: Alemanha\n\nDica: se o copilot não gerar o código selecione o comentário, clique na lâmpada, acesse Modify e digite complete o código."
  },
  {
    "objectID": "aula_p2.html#section-34",
    "href": "aula_p2.html#section-34",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Repare que, se não estivéssemos preocupados em separar o código em funções, quem nunca programou também conseguiria fazer o que fizemos usando o Copilot.\n\nEssa pessoa poderia ter mais dificuldade nas situações que geram erro.\nMas ainda assim conseguiria, ao final, obter o resultado que precisa.\nImagine como seria difícil para ela fazer isso sem uma ferramenta como o Copilot?"
  },
  {
    "objectID": "aula_p2.html#section-35",
    "href": "aula_p2.html#section-35",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Vamos agora interagir com o Copilot via chat para gerar um gráfico a partir dos dados processados.\n\nPara isso, selecione toda a terceira função e\n\nAbra o chat do Copilot (clicando no ícone de chat na barra de título do VS Code ou digitando Ctrl + Alt + I).\nMude do modo Agent para Ask (primeira opção na parte inferior do chat).\nE digite o prompt do slide a seguir."
  },
  {
    "objectID": "aula_p2.html#section-36",
    "href": "aula_p2.html#section-36",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "A função selecionada exibe informações no terminal. \nAltere o código para que essas informações sejam \nexibidas em um gráfico. Caso seja necessário \ninstalar alguma biblioteca, me explique como eu \npoderia fazer isso.\n\nSiga então as instruções e faça interações com o Copilot, se necessário, até obter o gráfico."
  },
  {
    "objectID": "aula_p2.html#section-37",
    "href": "aula_p2.html#section-37",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Os exercícios a seguir podem ser feitos usando o Copilot\n\nselecionando o código e acessando a opção Modify\nou via chat.\n\n\nAumente o tamanho das fontes do gráfico.\nExiba o número de gols nas barras do gráfico.\nSalve o gráfico em um arquivo PNG."
  },
  {
    "objectID": "aula_p2.html#section-38",
    "href": "aula_p2.html#section-38",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "É importante termos em mente que não estamos validando os resultados gerados\n\nAssim, é possível que alguns resultados estejam incorretos.\n\n\nComo foi mencionado nas aulas anteriores, precisamos aprender a testar o código gerado pelo Copilot\n\nPara termos segurança de que ele faz o que precisamos.\nVeremos mais sobre isso mais adiante na disciplina."
  },
  {
    "objectID": "aula_p2.html#section-39",
    "href": "aula_p2.html#section-39",
    "title": "Projetando Funções e Lendo Código Python",
    "section": "",
    "text": "Obtendo mais informações do dataset:\n\nCrie funções com ajuda do Copilot para cada situação abaixo.\nObs.: as informações podem ser exibidas apenas no terminal.\n\n\nExiba os nomes e quantidade de gols dos cinco jogadores que mais fizeram gols em cada liga, ordenados pela quantidade de gols.\nEncontre o jogador mais jovem que marcou gol em cada liga e exiba seu nome, idade, equipe e número de gols.\nEncontre a equipe que menos tomou cartões (amarelos e vermelhos em cada liga). Exiba o nome da equipe e a quantidade de cartões recebidos de cada tipo."
  },
  {
    "objectID": "aula_t3.html#section",
    "href": "aula_t3.html#section",
    "title": "Lendo Código Python",
    "section": "",
    "text": "O conteúdo dessa aula é inspirado nos capítulos 4 e 5 do livro abaixo."
  },
  {
    "objectID": "aula_t3.html#ler-código",
    "href": "aula_t3.html#ler-código",
    "title": "Lendo Código Python",
    "section": "Ler Código",
    "text": "Ler Código\nLer código significa entender o que o código faz ao examiná-lo.\n\nExistem dois níveis de entendimento:\n\nEntender o que cada linha de código faz (tracing description).\nEntender o objetivo geral de um código (função, classe, etc.)."
  },
  {
    "objectID": "aula_t3.html#por-que-é-importante-a-habilidade-de-ler-código",
    "href": "aula_t3.html#por-que-é-importante-a-habilidade-de-ler-código",
    "title": "Lendo Código Python",
    "section": "Por que é importante a habilidade de ler código?",
    "text": "Por que é importante a habilidade de ler código?\n\nAjuda a determinar se o código está correto:\n\nNós usaremos testes para validar código.\nMas podemos ganhar tempo se conseguirmos identificar erros mais óbvios no código, antes de gastar tempo escrevendo código de teste.\n\n\n\nPara ter mais informações para os testes:\n\nEntender o código nos ajuda a identificar melhor os casos de testes que precisamos criar para validar a implementação."
  },
  {
    "objectID": "aula_t3.html#section-1",
    "href": "aula_t3.html#section-1",
    "title": "Lendo Código Python",
    "section": "",
    "text": "A ideia aqui não é entender cada detalhe de cada linha do código.\n\nE sim aprender a como usar o Copilot para chegar num meio termo entre:\n\n“Esse código faz mágica” 🧙‍♂️\ne “Eu sei exatamente como cada linha de código funciona” 🤓"
  },
  {
    "objectID": "aula_t3.html#section-2",
    "href": "aula_t3.html#section-2",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Na aula passada tratamos o processamento de um dataset de futebol sem nos preocuparmos em entender realmente o código.\n\nMas isso foi apenas para demonstrar o uso do Copilot.\nEm nossos projetos precisamos buscar o meio termo citado no slide anterior."
  },
  {
    "objectID": "aula_t3.html#section-3",
    "href": "aula_t3.html#section-3",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Nas aulas anteriores escremos prompt para que o Copilot explicasse um trecho de código pra gente.\n\nMas o Copilot também tem comandos específicos além de texto livre.\n\n\nPodemos usar o comando /explain por exemplo.\n\nSelecionamos a função (ou trecho de código) que queremos entender e acessamos com o botão direito do mouse a opção Copilot -&gt; Explain\n\nou digitamos /explain no chat (seja com Ctrl + I ou no chat)."
  },
  {
    "objectID": "aula_t3.html#section-4",
    "href": "aula_t3.html#section-4",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Dica\n\n\nPodemos complementar o comando /explain com mais detalhes.\nIsso é especialmente útil para fazermos com que o Copilot entenda que queremos as explicações em português."
  },
  {
    "objectID": "aula_t3.html#section-6",
    "href": "aula_t3.html#section-6",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Primeira parte da explicação:"
  },
  {
    "objectID": "aula_t3.html#section-8",
    "href": "aula_t3.html#section-8",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Veja que, na explicação, o Copilot já destacou pontos de dúvidas e sugeriu melhoria.\n\nNem sempre ele faz isso. Demos sorte nessa vez. 😃\n\n\nSe uma função tiver um código com o qual não temos familiaridade, podemos pedir uma explicação linha a linha.\n\nUsando \\explain linha a linha, por exemplo."
  },
  {
    "objectID": "aula_t3.html#ler-código-1",
    "href": "aula_t3.html#ler-código-1",
    "title": "Lendo Código Python",
    "section": "Ler Código",
    "text": "Ler Código\nO 1º nível, tracing description, depende do conhecimento de estruturas e linguagem de programação.\n\nJá o 2º nível, objetivo geral, é geralmente o que esperamos encontrar na docstring de uma função.\n\nE depende do entendimento de 1º nível."
  },
  {
    "objectID": "aula_t3.html#por-que-é-importante-a-habilidade-de-ler-código-1",
    "href": "aula_t3.html#por-que-é-importante-a-habilidade-de-ler-código-1",
    "title": "Lendo Código Python",
    "section": "Por que é importante a habilidade de ler código?",
    "text": "Por que é importante a habilidade de ler código?\nPara ajudar a escrever código:\n\nPor que escrever código se vamos usar o Copilot?\nÀs vezes é mais rápido alterarmos nós mesmos o código, do que ficar mudando prompt até obter o código correto.\nE, por fim, há evidência científica de que conseguir explicar código linha a linha é pré-requisito para conseguir escrever código."
  },
  {
    "objectID": "aula_t3.html#section-5",
    "href": "aula_t3.html#section-5",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Vamos usar como exemplo a função melhor_palavra.\ndef melhor_palavra(palavras):\n    \"\"\"\n    palavras é uma lista de palavras.\n\n    Retorna a palavra com a maior pontuação.\n    \"\"\"\n    melhor = palavras[0]\n    max_pontos = numero_de_pontos(melhor)\n\n    for palavra in palavras[1:]:\n        pontos = numero_de_pontos(palavra)\n        if pontos &gt; max_pontos:\n            melhor = palavra\n            max_pontos = pontos\n\n    return melhor"
  },
  {
    "objectID": "aula_t3.html#section-7",
    "href": "aula_t3.html#section-7",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Veja que, na explicação, o Copilot já destacou pontos de dúvidas e sugeriu melhoria.\n\nNem sempre ele faz isso. Demos sorte nessa vez. 😃\n\n\nSe uma função tiver um código com o qual não temos familiaridade, podemos pedir uma explicação linha a linha.\n\nUsando \\explain linha a linha, por exemplo."
  },
  {
    "objectID": "aula_t3.html#section-9",
    "href": "aula_t3.html#section-9",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Como professor é incrível que agora os alunos tenham com quem tirar dúvidas quantas vezes for necessário.\n\nApenas lembre-se que a explicação do Copilot pode estar errada.\n\nAí você pode pensar: então pra que ela serve?\n\n\n\nRealmente pode ser frustrante.\n\nMas na maioria dos códigos, especialmente mais simples, as explicações são corretas.\nE, sem o Copilot, se você tivesse dúvidas e procurasse um amigo ou no Google, poderia obter respostas erradas também."
  },
  {
    "objectID": "aula_t3.html#section-10",
    "href": "aula_t3.html#section-10",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Como professor é incrível que agora os alunos tenham com quem tirar dúvidas quantas vezes for necessário.\n\nApenas lembre-se que a explicação do Copilot pode estar errada.\n\nAí você pode pensar: então pra que ela serve?\n\n\n\nRealmente pode ser frustrante.\n\nMas na maioria dos códigos, especialmente mais simples, as explicações são corretas.\nE, sem o Copilot, se você tivesse dúvidas e procurasse um amigo ou no Google, poderia obter respostas erradas também."
  },
  {
    "objectID": "aula_t3.html#section-11",
    "href": "aula_t3.html#section-11",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Dica\n\n\nUma maneira de diminuir a possibilidade de erro é pedir a explicação mais de uma vez.\nÉ incomum que o Copilot explique errado mais de uma vez."
  },
  {
    "objectID": "aula_t3.html#section-13",
    "href": "aula_t3.html#section-13",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Veja que neste caso o Copilot fez uma explicação e sugeriu uma melhoria.\n\nAntes de avaliar a sugestão de melhoria é importante que você avalie se realmente entendeu a explicação dada para o código atual.\n\n\nPor exemplo, se não tiver ficado claro como o método replace funciona, você pode pedir uma explicação mais detalhada sobre isso."
  },
  {
    "objectID": "aula_t3.html#section-15",
    "href": "aula_t3.html#section-15",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Você pode continuar pedindo mais informações do Copilot até julgar que tem um nível de entendimento adequado para a tarefa que precisa.\n\nLembre-se do que falamos no início da aula: não é necessário entender cada detalhe do código.\n\nMas temos que sair do estágio “Esse código faz mágica”.\nPara conseguirmos depois validar o nosso código.\nE assim resolver a tarefa que precisamos."
  },
  {
    "objectID": "aula_t3.html#section-16",
    "href": "aula_t3.html#section-16",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Você pode continuar pedindo mais informações do Copilot até julgar que tem um nível de entendimento adequado para a tarefa que precisa.\n\nLembre-se do que falamos no início da aula: não é necessário entender cada detalhe do código.\n\nMas temos que sair do estágio “Esse código faz mágica”.\nPara conseguirmos depois validar o nosso código.\nE assim resolver a tarefa que precisamos."
  },
  {
    "objectID": "aula_t3.html#section-17",
    "href": "aula_t3.html#section-17",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Voltando na explicação inicial dada pelo Copilot\n\nvocê alteraria seu código para usar a solução “mais limpa e eficiente”, segundo ele, que usa o módulo re?\n\n\nQue critérios adotar para decidir aceitar ou não a sugestão?"
  },
  {
    "objectID": "aula_t3.html#section-18",
    "href": "aula_t3.html#section-18",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Dica\n\n\nMinha sugestão é: use a opção que você entenda melhor.\nVocê pode já ficar satisfeito com o código original, ou pode pedir ao Copilot explicações sobre a sugestão de melhoria. E depois de ter entendido as duas opções, escolher a que te parece melhor.\n\n\n\n\n\n\n\n\n\n\n\nDica\n\n\nÉ melhor ter mais rapidamente uma versão do sistema que funciona corretamente e depois otimizá-la, se necessário, do que tentar já otimizar código antes mesmo de saber se ele vai atender o que precisa.\n\nPode ser, por exemplo, que uma função que você está otimizando agora acabe nem sendo usada mais adiante."
  },
  {
    "objectID": "aula_t3.html#section-19",
    "href": "aula_t3.html#section-19",
    "title": "Lendo Código Python",
    "section": "",
    "text": "O livro que estamos usando como referência, lista os 10 principais tópicos em Python que precisamos entender\n\npara conseguir acompanhar tudo que é apresentado no livro.\n\n\nComo você já fez disciplinas de programação, você pode ter um bom entendimento dessas estruturas em outras linguagens.\n\nMas é importante que consiga entendê-las na sintaxe do Python.\nSe você já programa em Python é bom revisar seu conhecimento.\nSe está começando na linguagem agora é uma boa hora de conhecê-los."
  },
  {
    "objectID": "aula_t3.html#principais-estruturas-de-programação-do-python",
    "href": "aula_t3.html#principais-estruturas-de-programação-do-python",
    "title": "Lendo Código Python",
    "section": "10 principais estruturas de programação do Python",
    "text": "10 principais estruturas de programação do Python\n\nFunções\nVariáveis\nCondicionais\nStrings\nListas\nLoops\nIndentação\nDicionários\nArquivos\nMódulos\n\naasSS\nDica para quem não conhece Python\n\nUse o Copilot, CharGPT ou Gemini para uma sessão de conversa sobre isso.\nIndique seu nível de conhecimento prévio de programação.\nIndique uma linguagem que você tenha mais familiaridade.\nExemplo\n\nConsidere que sou estudante de Ciência da Computação. Já fiz disciplinas introdutórias de programação, mas tenho certa dificuldade dificuldade com conceitos de programação. Conheço razoavelmente a linguagem Java e agora gostaria de aprender Python. Poderia me guiar por uma sessão de conversa que apresente de forma didática a linguagem Python comparando as construções com Java? Gostaria que a sessão fosse interativa, apresentando um conceito de cada vez."
  },
  {
    "objectID": "aula_t3.html#as-10-principais",
    "href": "aula_t3.html#as-10-principais",
    "title": "Lendo Código Python",
    "section": "As 10 Principais",
    "text": "As 10 Principais\n\nFunções\nVariáveis\nCondicionais\nStrings\nListas\nLoops\nIndentação\nDicionários\nArquivos\nMódulos\n\naasSS\nDica para quem não conhece Python\n\nUse o Copilot, CharGPT ou Gemini para uma sessão de conversa sobre isso.\nIndique seu nível de conhecimento prévio de programação.\nIndique uma linguagem que você tenha mais familiaridade.\nExemplo\n\nConsidere que sou estudante de Ciência da Computação. Já fiz disciplinas introdutórias de programação, mas tenho certa dificuldade dificuldade com conceitos de programação. Conheço razoavelmente a linguagem Java e agora gostaria de aprender Python. Poderia me guiar por uma sessão de conversa que apresente de forma didática a linguagem Python comparando as construções com Java? Gostaria que a sessão fosse interativa, apresentando um conceito de cada vez."
  },
  {
    "objectID": "aula_t3.html#as10-principais-estruturas-de-programação-do-python",
    "href": "aula_t3.html#as10-principais-estruturas-de-programação-do-python",
    "title": "Lendo Código Python",
    "section": "As10 Principais estruturas de programação do Python",
    "text": "As10 Principais estruturas de programação do Python\n\n\n\nFunções\n\nVariáveis\n\nCondicionais\n\nStrings\n\nListas\n\n\n\n\nLoops\n\nIndentação\n\nDicionários\n\nArquivos\n\nMódulos"
  },
  {
    "objectID": "aula_t3.html#section-20",
    "href": "aula_t3.html#section-20",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Fiquei pensando na melhor forma de passar esse conteúdo nessa disciplina.\n\nPoderia ser interessante para alguns alunos fazer uma revisão tradicional completa desses conceitos na aula.\nMas poderia ser tedioso para outros uma aula em formato expositivo."
  },
  {
    "objectID": "aula_t3.html#section-21",
    "href": "aula_t3.html#section-21",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Creio que é muito mais interessante estudar as estruturas de maneira mais prática e interativa.\n\nEspecialmente para quem já fez outras disciplinas de programação.\n\n\n\nE, como temos Assistentes de IA à nossa disposição\n\npor que não utilizá-los para apoiar essa tarefa.\n\n\n\n\nVamos então trabalhar com esses 10 tópicos de três formas distintas."
  },
  {
    "objectID": "aula_t3.html#um-pouco-de-engenharia-de-prompt",
    "href": "aula_t3.html#um-pouco-de-engenharia-de-prompt",
    "title": "Lendo Código Python",
    "section": "Um pouco de Engenharia de Prompt",
    "text": "Um pouco de Engenharia de Prompt\nAlgumas das recomendações mais comuns de Engenharia de Prompt são:\n\nDar contexto.\nDefinir o papel (persona) do modelo.\nSer claro e específico.\nDefinir o formato da resposta esperada.\nIterar e refinar o prompt."
  },
  {
    "objectID": "aula_t3.html#section-23",
    "href": "aula_t3.html#section-23",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Algumas das recomendações mais comuns de Engenharia de Prompt são:\n\nDar contexto.\nDefinir o papel (persona) do modelo.\nSer claro e específico.\nDefinir o formato da resposta esperada.\nIterar e refinar o prompt.\n\n\nSeguindo essas ideias pensei em uma sugestão de formato de estudo, que você pode (e deve) adaptar para a sua realidade."
  },
  {
    "objectID": "aula_t3.html#section-22",
    "href": "aula_t3.html#section-22",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Vamos primeiro usar o Copilot para nos ajudar a entender esses conceitos.\n\nMas em vez de sair simplesmente perguntando para ele o que são esses conceitos,\npodemos usar um pouco de Engenharia de Prompt para tornar esse processo mais interessante.\n\n\nAinda vamos ter aula específica sobre Engenharia de Prompt.\n\nE pode ser que ao chegar nela a gente conclua que a abordagem que vou sugerir poderia ser melhor.\nMas o que preparei aqui já pode ser um bom começo."
  },
  {
    "objectID": "aula_t3.html#section-24",
    "href": "aula_t3.html#section-24",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Dar contexto\n\n\nConsidere que sou estudante de um curso de TI. Já fiz disciplinas introdutórias de programação, mas tenho certa dificuldade dificuldade com conceitos de programação. Conheço razoavelmente a linguagem Java e agora gostaria de aprender Python.\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefinir o papel (persona) do modelo\n\n\nAtue como um professor de programação paciente, criativo e com ótima didática."
  },
  {
    "objectID": "aula_t3.html#iterar-e-refinar-o-prompt.",
    "href": "aula_t3.html#iterar-e-refinar-o-prompt.",
    "title": "Lendo Código Python",
    "section": "Iterar e refinar o prompt.",
    "text": "Iterar e refinar o prompt."
  },
  {
    "objectID": "aula_t3.html#section-25",
    "href": "aula_t3.html#section-25",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Ser claro e específico\n\n\nPoderia me guiar por uma sessão de conversa que apresente de forma didática a linguagem Python comparando as construções com Java? Gostaria de abordar essas 10 construções em Python: Funções, Variáveis, Condicionais, Strings, Listas, Loops, Indentação, Dicionários, Arquivos e Módulos."
  },
  {
    "objectID": "aula_t3.html#section-26",
    "href": "aula_t3.html#section-26",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Definir o formato da resposta esperada\n\n\nGostaria que a sessão fosse interativa, apresentando um conceito de cada vez, com exemplos práticos, comparações com Java e perguntas de múltipla escolha para fixação do conteúdo."
  },
  {
    "objectID": "aula_t3.html#section-27",
    "href": "aula_t3.html#section-27",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Iterar e refinar o prompt\n\n\nÉ comum que um prompt não funcione como gostaríamos. Podemos então alterá-lo para conseguir o que queremos.\nNesse caso como estou pedindo uma sessão interativa, podemos experimentá-la e, se ao longo do processo não estivermos satisfeitos, interrompemos a sessão e fazemos um novo prompt."
  },
  {
    "objectID": "aula_t3.html#section-28",
    "href": "aula_t3.html#section-28",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Podemos montar um texto corrido com tudo que escrevemos ou você pode ser mais específico usando um prompt estruturado:\n\n\n  Contexto: Considere que sou estudante ...\n  Persona: Atue como um professor ...\n  Tarefa: Poderia me guiar ...\n  Formato: Gostaria que a sessão fosse ..."
  },
  {
    "objectID": "aula_t3.html#section-29",
    "href": "aula_t3.html#section-29",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Dica\n\n\nDurante a sessão interativa o Copilot pode te pedir para escrever trechos de código em Python e, para isso, você precisará pular linha. Mas se usar ENTER você envia o prompt incompleto. Use Shift + ENTER para pular linha.\n\n\n\nVamos fazer uma sessão interativa dessas aqui na sala para revisar os conceitos.\n\nE é altamente recomendável que você faça depois em casa, adaptando o prompt à sua realidade.\nPara tornar o processo ainda mais interativo, vamos usar o PollEverywhere para responder às perguntas durante a sessão."
  },
  {
    "objectID": "aula_t3.html#os-10-principais-tópicos-em-python-1",
    "href": "aula_t3.html#os-10-principais-tópicos-em-python-1",
    "title": "Lendo Código Python",
    "section": "Os 10 Principais Tópicos em Python",
    "text": "Os 10 Principais Tópicos em Python\n\n\n\nFunções\n\nVariáveis\n\nCondicionais\n\nStrings\n\nListas\n\n\n\n\nLoops\n\nIndentação\n\nDicionários\n\nArquivos\n\nMódulos"
  },
  {
    "objectID": "aula_t3.html#sessão-interativa-com-copilot",
    "href": "aula_t3.html#sessão-interativa-com-copilot",
    "title": "Lendo Código Python",
    "section": "Sessão interativa com Copilot",
    "text": "Sessão interativa com Copilot\nVamos então testar!\nContexto: Considere que sou estudante de um curso de TI. Já fiz disciplinas introdutórias de programação, mas tenho certa dificuldade dificuldade com conceitos de programação. Conheço razoavelmente a linguagem Java e agora gostaria de aprender Python.\nPersona: Atue como um professor de programação paciente, criativo e com ótima didática.\nTarefa: Poderia me guiar por uma sessão de conversa que apresente de forma didática a linguagem Python comparando as construções com Java? Gostaria de abordar essas 10 construções em Python: Funções, Variáveis, Condicionais, Strings, Listas,Loops, Indentação, Dicionários, Arquivos e Módulos.\nFormato: Gostaria que a sessão fosse interativa, apresentando um conceito de cada vez, com exemplos práticos, comparações com Java e perguntas de múltipla escolha para fixação do conteúdo."
  },
  {
    "objectID": "aula_t3.html#dinâmica-em-duplas",
    "href": "aula_t3.html#dinâmica-em-duplas",
    "title": "Lendo Código Python",
    "section": "Dinâmica em duplas",
    "text": "Dinâmica em duplas\nVamos passar agora para uma segunda parte de fixação das 10 principais estruturas em Python.\n\nQuando preparei a aula, logo após a sessão interativa, pedi ao Copilot para gerar 20 exercícios sobre as 10 estruturas do Python, usando o prompt abaixo.\nAgora gostaria que gerasse 20 perguntas de múltipla escolha, \nsendo 2 de cada uma das estruturas de Python que citei anteriormente. \nGostaria que as perguntas fossem listadas em Markdown para que eu possa \npassar para o outro arquivo. E o gabarito deve ser fornecido somente ao final."
  },
  {
    "objectID": "aula_t3.html#section-30",
    "href": "aula_t3.html#section-30",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Dica\n\n\nAlém de experimentar prompts diferentes, você pode também usar Assistentes de IA diferentes.\nEu testei com Copilot, ChatGPT e Gemini e a interação de cada um deles foi diferente. Gemini pediu para escrever código Python, ChatGPT esqueceu de tratar funções :)\nMas, lembre-se, usar o mesmo prompt de novo no mesmo assistente de IA pode levar a uma interação diferente."
  },
  {
    "objectID": "aula_t3.html#section-31",
    "href": "aula_t3.html#section-31",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Vamos formar duplas e cada dupla vai responder os exercícios.\n\nNão é necessário identificar os nomes, basta dar um nome para a dupla.\nAnote o gabarito de vocês no caderno para facilitar a próxima etapa da dinâmica."
  },
  {
    "objectID": "aula_t3.html#funções",
    "href": "aula_t3.html#funções",
    "title": "Lendo Código Python",
    "section": "Funções",
    "text": "Funções\n\n\nQual é a forma correta de definir uma função que retorna o quadrado de um número em Python?\n\n\ndef quadrado(n): return n * n\nfunction quadrado(n) { return n * n }\ndef quadrado(n) { return n * n }\nint quadrado(int n) { return n * n }\n\n\n\nResposta: a"
  },
  {
    "objectID": "aula_t3.html#funções-1",
    "href": "aula_t3.html#funções-1",
    "title": "Lendo Código Python",
    "section": "Funções",
    "text": "Funções\n\n\nO que acontece se uma função Python não possui a instrução return?\n\n\nRetorna 0\nRetorna None\nRetorna False\nRetorna vazio\n\n\n\nResposta: b"
  },
  {
    "objectID": "aula_t3.html#variáveis",
    "href": "aula_t3.html#variáveis",
    "title": "Lendo Código Python",
    "section": "Variáveis",
    "text": "Variáveis\n\n\nQual destas opções declara corretamente uma variável chamada idade com valor 25 em Python?\n\n\nint idade = 25\nidade = 25\nidade := 25\nvar idade = 25\n\n\n\nResposta: b"
  },
  {
    "objectID": "aula_t3.html#condicionais",
    "href": "aula_t3.html#condicionais",
    "title": "Lendo Código Python",
    "section": "Condicionais",
    "text": "Condicionais\n\n\nQual é a sintaxe correta para um if em Python?\n\n\nif (x &gt; 10) { print(\"maior\") }\nif x &gt; 10: print(\"maior\")\nif x &gt; 10 then print(\"maior\")\nif x &gt; 10 { print(\"maior\") }\n\n\n\nResposta: b"
  },
  {
    "objectID": "aula_t3.html#strings",
    "href": "aula_t3.html#strings",
    "title": "Lendo Código Python",
    "section": "Strings",
    "text": "Strings\n\n\nQual comando imprime o tamanho da string \"Python\"?\n\n\nprint(size(\"Python\"))\nprint(length(\"Python\"))\nprint(len(\"Python\"))\nprint(count(\"Python\"))\n\n\n\nResposta: c"
  },
  {
    "objectID": "aula_t3.html#listas",
    "href": "aula_t3.html#listas",
    "title": "Lendo Código Python",
    "section": "Listas",
    "text": "Listas\n\n\nComo criar uma lista com os elementos 1, 2 e 3?\n\n\nlista = [1, 2, 3]\nlista = (1, 2, 3)\nlista = {1, 2, 3}\nlista = &lt;1, 2, 3&gt;\n\n\n\nResposta: a"
  },
  {
    "objectID": "aula_t3.html#loops",
    "href": "aula_t3.html#loops",
    "title": "Lendo Código Python",
    "section": "Loops",
    "text": "Loops\n\n\nQual é a forma correta de percorrer uma lista chamada nomes e imprimir cada elemento?\n\n\nfor nome in nomes: print(nome)\nfor nome of nomes: print(nome)\nfor (nome in nomes) { print(nome) }\nforeach nome in nomes: print(nome)\n\n\n\nResposta: a"
  },
  {
    "objectID": "aula_t3.html#indentação",
    "href": "aula_t3.html#indentação",
    "title": "Lendo Código Python",
    "section": "Indentação",
    "text": "Indentação\n\n\nO que acontece se você esquecer de indentar o corpo de uma função em Python?\n\n\nO código funciona normalmente\nO Python ignora o bloco\nO Python gera erro de indentação\nO Python executa sem problemas\n\n\n\nResposta: c"
  },
  {
    "objectID": "aula_t3.html#dicionários",
    "href": "aula_t3.html#dicionários",
    "title": "Lendo Código Python",
    "section": "Dicionários",
    "text": "Dicionários\n\n\nComo criar um dicionário com as chaves \"a\" e \"b\" e valores 1 e 2?\n\n\nd = {\"a\": 1, \"b\": 2}\nd = [\"a\": 1, \"b\": 2]\nd = (\"a\": 1, \"b\": 2)\nd = &lt;\"a\": 1, \"b\": 2&gt;\n\n\n\nResposta: a"
  },
  {
    "objectID": "aula_t3.html#arquivos",
    "href": "aula_t3.html#arquivos",
    "title": "Lendo Código Python",
    "section": "Arquivos",
    "text": "Arquivos\n\n\nQual comando abre um arquivo para leitura em Python?\n\n\nopen(\"arquivo.txt\", \"r\")\nopen(\"arquivo.txt\", \"w\")\nopen(\"arquivo.txt\", \"a\")\nopen(\"arquivo.txt\", \"rw\")\n\n\n\nResposta: a"
  },
  {
    "objectID": "aula_t3.html#módulos",
    "href": "aula_t3.html#módulos",
    "title": "Lendo Código Python",
    "section": "Módulos",
    "text": "Módulos\n\n\nComo importar o módulo math em Python? ______\n\n\nimport math\ninclude math\nusing math\nrequire math\n\n\n\nResposta: a"
  },
  {
    "objectID": "aula_t3.html#variáveis-1",
    "href": "aula_t3.html#variáveis-1",
    "title": "Lendo Código Python",
    "section": "Variáveis",
    "text": "Variáveis\n\n\nO que acontece se você atribuir um valor string a uma variável que antes era um inteiro?\n\n\nErro de tipo\nPython converte automaticamente para inteiro\nPython aceita a mudança de tipo\nO valor anterior é mantido\n\n\n\nResposta: c"
  },
  {
    "objectID": "aula_t3.html#condicionais-1",
    "href": "aula_t3.html#condicionais-1",
    "title": "Lendo Código Python",
    "section": "Condicionais",
    "text": "Condicionais\n\n\nQual palavra-chave é usada para múltiplas condições em Python?\n\n\nelseif\nelse if\nelif\notherwise\n\n\n\nResposta: c"
  },
  {
    "objectID": "aula_t3.html#strings-1",
    "href": "aula_t3.html#strings-1",
    "title": "Lendo Código Python",
    "section": "Strings",
    "text": "Strings\n\n\nQual método transforma todos os caracteres de uma string para maiúsculas?\n\n\nupper()\ncapitalize()\ntoUpper()\nuppercase()\n\n\n\nResposta: a"
  },
  {
    "objectID": "aula_t3.html#listas-1",
    "href": "aula_t3.html#listas-1",
    "title": "Lendo Código Python",
    "section": "Listas",
    "text": "Listas\n\n\nQual método adiciona um elemento ao final de uma lista?\n\n\nadd()\nappend()\ninsert()\npush()\n\n\n\nResposta: b"
  },
  {
    "objectID": "aula_t3.html#loops-1",
    "href": "aula_t3.html#loops-1",
    "title": "Lendo Código Python",
    "section": "Loops",
    "text": "Loops\n\n\nO que faz o comando range(5) em um loop for?\n\n\nCria uma lista de 1 a 5\nCria uma lista de 0 a 5\nCria uma lista de 0 a 4\nCria uma lista de 1 a 4\n\n\n\nResposta: c"
  },
  {
    "objectID": "aula_t3.html#indentação-1",
    "href": "aula_t3.html#indentação-1",
    "title": "Lendo Código Python",
    "section": "Indentação",
    "text": "Indentação\n\n\nQual é o padrão de indentação recomendado em Python?\n\n\n2 espaços\n4 espaços\n1 tabulação\nNão é necessário indentar\n\n\n\nResposta: b"
  },
  {
    "objectID": "aula_t3.html#dicionários-1",
    "href": "aula_t3.html#dicionários-1",
    "title": "Lendo Código Python",
    "section": "Dicionários",
    "text": "Dicionários\n\n\nComo acessar o valor da chave \"nome\" em um dicionário chamado aluno?\n\n\naluno[\"nome\"]\naluno.nome\naluno-&gt;nome\naluno.get(\"nome\")\n\n\n\nResposta: a"
  },
  {
    "objectID": "aula_t3.html#arquivos-1",
    "href": "aula_t3.html#arquivos-1",
    "title": "Lendo Código Python",
    "section": "Arquivos",
    "text": "Arquivos\n\n\nQual método lê todo o conteúdo de um arquivo aberto?\n\n\nread()\nreadline()\nreadall()\nget()\n\n\n\nResposta: a"
  },
  {
    "objectID": "aula_t3.html#módulos-1",
    "href": "aula_t3.html#módulos-1",
    "title": "Lendo Código Python",
    "section": "Módulos",
    "text": "Módulos\n\n\nComo importar apenas a função sqrt do módulo math?\n\n\nfrom math import sqrt\nimport sqrt from math\nmath.sqrt()\ninclude sqrt from math\n\n\n\nResposta: a"
  },
  {
    "objectID": "aula_t3.html#section-32",
    "href": "aula_t3.html#section-32",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Depois de respondidos os exercícios, cada dupla receberá as respostas de outra dupla.\n\nE vai preencher a folha de conferência.\nJustificando as respostas incorretas."
  },
  {
    "objectID": "aula_t3.html#section-33",
    "href": "aula_t3.html#section-33",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Para fechar a dinâmica vamos comparar as respostas com o gabarito oficial."
  },
  {
    "objectID": "aula_t3.html#section-34",
    "href": "aula_t3.html#section-34",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Dica\n\n\nEm casa você pode gerar outro questionário para estudar podendo direcionar melhor. Você pode pedir mais exercícios de algum tópico, ou se basear em comparações com outra linguagem por exemplo."
  },
  {
    "objectID": "aula_t3.html#videoaula",
    "href": "aula_t3.html#videoaula",
    "title": "Lendo Código Python",
    "section": "Videoaula",
    "text": "Videoaula\nPara quem prefere um material em vídeo mais tradicional, há vários disponíveis na internet.\n\nUma sugestão são esses vídeos iniciais de um curso de Ciência de Dados do ICMC."
  },
  {
    "objectID": "aula_t3.html#section-12",
    "href": "aula_t3.html#section-12",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Vamos usar outro exemplo de explicação do Copilot.\n\nSuponha que você precise entender uma função já existente em um projeto.\n\n\n\ndef clean_number(phone_number):\n    phone_number = phone_number.replace(\"(\", \"\")\n    phone_number = phone_number.replace(\")\", \"\")\n    phone_number = phone_number.replace(\"-\", \"\")\n    phone_number = phone_number.replace(\" \", \"\")\n    return phone_number\n\n\n\nVamos ver a explicação do Copilot em português."
  },
  {
    "objectID": "aula_t3.html#section-14",
    "href": "aula_t3.html#section-14",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Veja que neste caso o Copilot fez uma explicação e sugeriu uma melhoria.\n\nAntes de avaliar a sugestão de melhoria é importante que você avalie se realmente entendeu a explicação dada para o código atual.\n\n\nPor exemplo, se não tiver ficado claro como o método replace funciona, você pode pedir uma explicação mais detalhada sobre isso."
  },
  {
    "objectID": "aula_t3.html#section-35",
    "href": "aula_t3.html#section-35",
    "title": "Lendo Código Python",
    "section": "",
    "text": "Se ainda tivermos tempo, nossa última parte será um Quiz no Poll Everywhere, mas agora com perguntas um pouco mais avançadas.\nNão se preocupe se precisar chutar respostas, afinal podem ser perguntas de coisas que não revisamos.\n\nMas vou aproveitar o gancho para comentar sobre elas.\n\n\n\n\n\n\n\nDica\n\n\nNa primeira vez que gerei esse Quiz o Copilot gerou respostas estranhas em alguns casos. Lembre-se que Assistentes de IA podem gerar respostas erradas.\nUma dica quando estiver estudando sozinho é experimentar o código você mesmo para conferir."
  },
  {
    "objectID": "aula_p3.html#section",
    "href": "aula_p3.html#section",
    "title": "Testes",
    "section": "",
    "text": "O conteúdo dessa aula é baseado no capítulo 6 do livro abaixo."
  },
  {
    "objectID": "aula_p3.html#section-1",
    "href": "aula_p3.html#section-1",
    "title": "Testes",
    "section": "",
    "text": "Já mencionamos nas aulas anteriores sobre testes de código.\n\nTestar código é uma habilidade essencial porque nos dá confiança de que o código funciona apropriadamente.\n\n\nÉ importante que você adquira essa habilitade e consiga conferir por você mesmo se o seu código funciona.\n\nMesmo que o Copilot possa ser usado para gerar testes (e ele está ficando cada vez melhor nisso),\nentendemos que você deve ser capaz de escrever testes por conta própria, para verificar se um código gerado pelo Copilot está correto."
  },
  {
    "objectID": "aula_p3.html#section-2",
    "href": "aula_p3.html#section-2",
    "title": "Testes",
    "section": "",
    "text": "Programadores iniciantes geralmente têm aversão a testes (e mesmo nem tão novatos assim).\n\nEles têm dificuldade de perceber que, mesmo que um código pareça fazer sentido, ele pode conter erros sutis.\nHá também um sentimento de que “se eu testar vou descobrir que tem problema, então melhor deixar quieto”."
  },
  {
    "objectID": "aula_p3.html#section-3",
    "href": "aula_p3.html#section-3",
    "title": "Testes",
    "section": "",
    "text": "Engenheiros de Software profissionais seguem uma abordagem completamente oposta.\n\nEles levam testes extremamente a sério, porque sabem o quanto isso pode trazer de consequências para suas empresas.\nNinguém quer ser a pessoa que\n\ncausou um prejuízo enorme para sua empresa ou para algum de seus clientes;\ndeixou hacker obter acesso a dados confidenciais de usuários;\nou causou um acidente de um carro autônomo."
  },
  {
    "objectID": "aula_p3.html#tdd",
    "href": "aula_p3.html#tdd",
    "title": "Testes",
    "section": "TDD",
    "text": "TDD\nAlgumas empresas levam isso tão a sério que seguem uma abordagem chamada TDD - Test Driven Development.\n\nA ideia central é escrever primeiro os testes e depois a função/módulo a ser testado.\n\n\nNão vamos seguir essa abordagem aqui,\n\nmas precisamos nos lembrar que assistentes de IA erram e precisamos verificar nossos códigos."
  },
  {
    "objectID": "aula_p3.html#testes-de-caixa-preta",
    "href": "aula_p3.html#testes-de-caixa-preta",
    "title": "Testes",
    "section": "Testes de Caixa-Preta",
    "text": "Testes de Caixa-Preta\n\nTestes de Caixa-Preta assumem que não sabemos nada sobre como o código funciona.\n\nApenas sabemos o que ele deve fazer.\nO teste envolve então experimentar diferentes entradas e verificar se as saídas estão corretas.\n\n\n\nPodemos aplicar testes de caixa-preta a cada função ou a um programa inteiro.\n\nUma vantagem desse tipo de teste é que não precisamos olhar o código para escrevê-lo.\nFocamos apenas no comportamento desejado do código."
  },
  {
    "objectID": "aula_p3.html#section-4",
    "href": "aula_p3.html#section-4",
    "title": "Testes",
    "section": "",
    "text": "Dado o potencial custo de um erro, faz muito mais sentido assumir que o código está errado até que se prove o contrário.\n\nApenas com testes rigorosos podemos ter confiança de que o código funciona apropriadamente.\n\nEmpresas geralmente não testam uma única vez.\nPossuem toda uma metodologia e infraestrutura de testes contínuos para garantir que tudo funciona a cada alteração no código."
  },
  {
    "objectID": "aula_p3.html#section-5",
    "href": "aula_p3.html#section-5",
    "title": "Testes",
    "section": "",
    "text": "Como exemplo, suponha que precisamos testar uma função que pega uma lista de palavras (strings) e retorna a maior delas.\n\n\ndef maior_palavra(palavras):\n\nMais precisamente, dada a assinatura acima, o comportamento esperando é que a função retorne a palavra que tenha mais caracteres.\n\nSe existirem várias palavras com o mesmo número máximo de caracteres, a função deve retornar a primeira delas presente na lista."
  },
  {
    "objectID": "aula_p3.html#casos-de-uso-comuns",
    "href": "aula_p3.html#casos-de-uso-comuns",
    "title": "Testes",
    "section": "Casos de uso comuns",
    "text": "Casos de uso comuns\nPensando na função maior_palavra, vamos pensar nos casos de testes que deveríamos usar.\n\nPara especificar os casos de testes vamos escrever como se estivéssemos usando um terminal Python.\n\n\nComeçando com casos de uso comuns:\n\n\nPodemos pensar em um teste com poucas palavras nas quais apenas uma é maior que todas as outras.\n\n&gt;&gt;&gt; maior_palavra(['gato', 'pássaro', 'cachorro'])\n'cachorro'"
  },
  {
    "objectID": "aula_p3.html#casos-de-uso-comuns-1",
    "href": "aula_p3.html#casos-de-uso-comuns-1",
    "title": "Testes",
    "section": "Casos de uso comuns",
    "text": "Casos de uso comuns\nPodemos agora testar uma lista com mais palavras e com a maior palavra aparecendo em outra posição da lista.\n\n&gt;&gt;&gt; maior_palavra(['feliz', 'aniversário', 'para', 'meu', 'cachorro'])\n'aniversário'\n\n\nPor fim, podemos pensar em uma lista contendo uma única palavra.\n\n&gt;&gt;&gt; maior_palavra(['feliz'])\n'feliz'"
  },
  {
    "objectID": "aula_p3.html#casos-de-borda",
    "href": "aula_p3.html#casos-de-borda",
    "title": "Testes",
    "section": "Casos de borda",
    "text": "Casos de borda\nSe o programa estiver funcionando para esses casos de testes comuns, é hora de pensarmos nos casos de borda.\n\nPodemos começar testando o caso de termos empate na maior palavra,\nque, pela especificação da função, deve ser retornadada a primeira delas.\nObs.: algumas pessoas podem considerar esse um caso comum e outras um caso de borda.\n\n\n\n&gt;&gt;&gt; maior_palavra(['gato', 'cão', 'sapo'])\n'gato'"
  },
  {
    "objectID": "aula_p3.html#casos-de-borda-1",
    "href": "aula_p3.html#casos-de-borda-1",
    "title": "Testes",
    "section": "Casos de borda",
    "text": "Casos de borda\nE se nenhuma palavra tiver caracteres?\n\nA maior palavra é uma string vazia.\n\n\n\n&gt;&gt;&gt; maior_palavra(['', '', ''])\n''\n\n\n\n\n\n\n\n\n\nDica\n\n\nEm códigos que usam loops é muito comum que erros ocorram em verificações do primeiro ou do último elementos, por falhas na construção da lógica do loop.\nAssim, se presumimos que uma função pode ter que percorrer uma lista, ou algo similar, é interessante pensarmos em casos de borda sobre isso."
  },
  {
    "objectID": "aula_p3.html#casos-de-borda-2",
    "href": "aula_p3.html#casos-de-borda-2",
    "title": "Testes",
    "section": "Casos de borda",
    "text": "Casos de borda\nE como deveríamos testar o caso do método ser chamado com uma lista vazia?\n\nVeja que, neste caso, a especificação do comportamento da função não é clara.\nA função poderia retornar None ou poderia gerar uma exceção, por exemplo.\n\n\nAssumindo que a função retorne None para esse caso, o teste seria:\n\n&gt;&gt;&gt; maior_palavra([])\nNone"
  },
  {
    "objectID": "aula_p3.html#testes-de-entrada-incorreta",
    "href": "aula_p3.html#testes-de-entrada-incorreta",
    "title": "Testes",
    "section": "Testes de entrada incorreta",
    "text": "Testes de entrada incorreta\nHá ainda um outro tipo de teste que poderíamos pensar, que é o caso da função ser chamada com parâmetros errados.\n\nComo Python é fracamente tipado, nada impede que a função maior_palavra seja chamada com tipos de dados inesperados, como números, lista de números, None, etc.\n\n\nNessa aula vamos ignorar esse tipo de situação.\n\nMas em sistemas em produção isso é algo importante.\nE, para esse caso, type hints podem ser mais interessantes do que testes exaustivos."
  },
  {
    "objectID": "aula_p3.html#como-saber-quais-casos-de-testes-usar",
    "href": "aula_p3.html#como-saber-quais-casos-de-testes-usar",
    "title": "Testes",
    "section": "Como saber quais casos de testes usar",
    "text": "Como saber quais casos de testes usar\nPodemos começar considerando os tipos de dados dos parâmetros e variando seus valores.\n\nSe o parâmetro for uma lista (ou string), podemos verificar testar vazia, com um ou com vários elementos.\nNa maioria das vezes, “vários” podem ser 4 elementos.\n\nJá que é improvável que uma função funcione para 4 elementos mas não para 5, 6 ou mais.\n\nJá para uma função que recebe dois números, podemos pensar em testes considerando quando\n\num deles é zero, os dois são zero, um é negativo, ambos são negativos ou ambos são positivos."
  },
  {
    "objectID": "aula_p3.html#como-saber-quais-casos-de-testes-usar-1",
    "href": "aula_p3.html#como-saber-quais-casos-de-testes-usar-1",
    "title": "Testes",
    "section": "Como saber quais casos de testes usar",
    "text": "Como saber quais casos de testes usar\nOutro tipo de caso de teste é levar em conta o comportamento específico da função.\n\nComo no caso do empate da função maior_palavra.\n\n\nNo final das contas, como já mencionamos, testar é uma mistura de ciência e arte.\n\nA prática é o melhor caminho para que descubra os melhores testes para suas necessidades."
  },
  {
    "objectID": "aula_p3.html#testes-de-caixa-branca",
    "href": "aula_p3.html#testes-de-caixa-branca",
    "title": "Testes",
    "section": "Testes de Caixa-Branca",
    "text": "Testes de Caixa-Branca\n\nA ideia do teste de caixa-branca é examinar o código para pensarmos em casos de testes adicionais que podemos escrever.\n\nAo ler o código de uma função se vermos que ela usa um loop, devemos pensar nos casos comuns de erros com loops.\nSe houver uma estrutura condicional com verificação com &gt; ou &gt;=, por exemplo, é outro caso a se avaliar.\n\n\n\nA ideia, portanto, é usar o conhecimento do código a ser testado para completar os testes necessários."
  },
  {
    "objectID": "aula_p3.html#section-6",
    "href": "aula_p3.html#section-6",
    "title": "Testes",
    "section": "",
    "text": "Há duas categorias principais que costumamos pensar ao escrever testes.\n\nCasos de uso comuns: incluem as entradas que imaginamos que serão utilizadas na prática.\nCasos de borda (edge cases): são casos incomuns, mas possíveis, que podem quebrar o código.\n\nHá entradas que podem testar algumas regras da função em maior profundidade ou que contenham entradas inesperadas (ex. uma lista contendo só strings vazias)."
  },
  {
    "objectID": "aula_p3.html#section-7",
    "href": "aula_p3.html#section-7",
    "title": "Testes",
    "section": "",
    "text": "Qual é a estratégia de testes mais simples que podemos pensar?\n\nPodemos testar nossa função no terminal Python como fizemos nas aulas anteriores.\n\n\nFazemos a chamada como especificamos no caso de testes e comparamos o resultado exibido com o esperado.\n\n&gt;&gt;&gt; maior_palavra(['gato', 'cão', 'sapo'])\n'gato'"
  },
  {
    "objectID": "aula_p3.html#section-8",
    "href": "aula_p3.html#section-8",
    "title": "Testes",
    "section": "",
    "text": "Quais são as vantagens de testes usando o terminal?\n\nÉ rápido de rodar.\nÉ fácil acrescentar novos testes de acordo com o resultado dos testes anterioress."
  },
  {
    "objectID": "aula_p3.html#section-9",
    "href": "aula_p3.html#section-9",
    "title": "Testes",
    "section": "",
    "text": "Mas e as desvantagens de testar usando o terminal?\n\nOs problemas começam quando fazemos uma correção no código após detecarmos um problema em um teste.\n\nÉ muito comum que, ao corrigir um erro, lembremos de repetir apenas o teste que tinha falhado.\nMas pode ser que a correção tenha provocado um efeito colateral em outros casos de teste que tínhamos verificado antes.\nE, portanto, o correto seria reexecutar todos os testes.\n\nE aí começa a ficar muito improdutivo seguir essa estratégia."
  },
  {
    "objectID": "aula_p3.html#section-10",
    "href": "aula_p3.html#section-10",
    "title": "Testes",
    "section": "",
    "text": "E qual seria a segunda abordagem mais simples para testar o código?\n\nSeria inserir os casos de teste no próprio código.\nPor exemplo, poderíamos inserir testes no mesmo arquivo da função maior_palavra logo após a definição dela.\nMas isso seria muito ruim quando o código fosse usado em produção.\n\nPrecisaríamos comentar esse código de teste, ou ter uma maneira de desabilitá-lo."
  },
  {
    "objectID": "aula_p3.html#instalando-pytest",
    "href": "aula_p3.html#instalando-pytest",
    "title": "Testes",
    "section": "Instalando pytest",
    "text": "Instalando pytest\nNesta aula nós veremos apenas o básico do pytest.\n\nMas que será suficiente para os testes que precisaremos fazer.\n\n\nA primeira coisa que precisamos fazer é instalar o pytest, já que não é um módulo padrão do Python.\n\npip install pytest"
  },
  {
    "objectID": "aula_p3.html#implementando-um-teste-com-pytest",
    "href": "aula_p3.html#implementando-um-teste-com-pytest",
    "title": "Testes",
    "section": "Implementando um teste com pytest",
    "text": "Implementando um teste com pytest\nO módulo pytest fornece uma maneira simples de implementar testes.\n\nNós, basicamente, escrevemos uma função para cada teste que queremos realizar.\nE, na implementação da função, usamos o comando assert para realizar o teste.\n\n\n\ndef test_maior_palavra():\n    assert maior_palavra(['gato', 'pássaro', 'cachorro']) == 'cachorro'"
  },
  {
    "objectID": "aula_p3.html#o-comando-assert",
    "href": "aula_p3.html#o-comando-assert",
    "title": "Testes",
    "section": "O comando assert",
    "text": "O comando assert\nO comando assert serve para verificar se uma condição é verdadeira.\n\nSe for, o código continua sendo executado normalmente.\nSe não for, é lançada uma exceção AssertionError.\nÉ como se ele significasse: “Eu espero que isso seja verdade”.\n\n\nNós podemos ainda definir uma mensagem de erro personalizada.\n\nO formato é:\n\n\n\n\nassert &lt;condição&gt;, &lt;mensagem_opcional_de_erro&gt;"
  },
  {
    "objectID": "aula_p3.html#pytest-e-comando-assert",
    "href": "aula_p3.html#pytest-e-comando-assert",
    "title": "Testes",
    "section": "pytest e comando assert",
    "text": "pytest e comando assert\nO módulo pytest utiliza o comando assert para verificar se as condições dos testes são atendidas.\n\nSe todas as condições forem verdadeiras, significa que nosso código passou nos testes.\nJá se um assert falha, o Pytest automaticamente fornece informações detalhadas sobre os valores das variáveis envolvidas na comparação, o que simplifica muito a depuração."
  },
  {
    "objectID": "aula_p3.html#convenção-de-nomenclatura-do-pytest",
    "href": "aula_p3.html#convenção-de-nomenclatura-do-pytest",
    "title": "Testes",
    "section": "Convenção de nomenclatura do pytest",
    "text": "Convenção de nomenclatura do pytest\nO módulo pytest procura de forma automática os testes escritos em nosso projeto.\n\nEle procura por arquivos que começam com test_.\nDentro deles, procura por funções que começam com test_.\nPodemos ainda organizar os testes em classes, que devem começar com Test e não podem ter construtor."
  },
  {
    "objectID": "aula_p3.html#section-11",
    "href": "aula_p3.html#section-11",
    "title": "Testes",
    "section": "",
    "text": "A melhor abordagem, na verdade, é usar um framework de testes.\n\nA biblioteca mais popular para testes em Python é a pytest.\nEla permite escrever testes de forma simples e organizada.\n\nE, ao mesmo tempo, oferece recursos avançados.\n\n\n\nObs.: o livro de Potter e Zingaro usa o módulo doctest, que é parte da biblioteca padrão do Python.\n\nEle é útil para testes bem simples, mas não é tão poderoso quanto o pytest."
  },
  {
    "objectID": "aula_p3.html#section-12",
    "href": "aula_p3.html#section-12",
    "title": "Testes",
    "section": "",
    "text": "Vamos então implementar todos os testes que levantamos para a função maior_palavra.\n\nVamos primeiro deixar clara a estrutura de pastas e arquivos que vamos usar.\n\n\nSuponha que nossa função maior_palavra esteja implementada em um arquivo meu_app/main.py.\n\nVamos então criar uma subpasta chamada testes e, dentro dela, criar um arquivo test_maior_palavra.py, onde escreveremos nossos testes."
  },
  {
    "objectID": "aula_p3.html#section-13",
    "href": "aula_p3.html#section-13",
    "title": "Testes",
    "section": "",
    "text": "A estrutura fica então assim.\n\nmeu_projeto/\n│\n├── meu_app/\n│   ├── __init__.py\n│   └── main.py\n│\n└── testes/\n    ├── __init__.py\n    └── test_utilitarios.py\n\n\nObs.: os arquivos __init__.py são arquivos vazios que servem para que suas pastas (meu_app e testes) sejam reconhecidas como módulos Python.\n\nÉ similar ao conceito de pacotes em Java."
  },
  {
    "objectID": "aula_p3.html#section-14",
    "href": "aula_p3.html#section-14",
    "title": "Testes",
    "section": "",
    "text": "No nosso arquivo meu_app/main.py, devemos implementar a função maior_palavra.\ndef maior_palavra(palavras):\n    if not palavras:\n        return None\n    maior = palavras[0]\n    for p in palavras[1:]:\n        if len(p) &gt; len(maior):\n            maior = p\n    return maior"
  },
  {
    "objectID": "aula_p3.html#execução-do-pytest",
    "href": "aula_p3.html#execução-do-pytest",
    "title": "Testes",
    "section": "Execução do pytest",
    "text": "Execução do pytest\nAgora, para executar os testes, basta executar o comando pytest na pasta principal do projeto.\n\npytest\n\n\nSe nossa função passar em todos os testes, esse seria um exemplo de saída esperada.\n=================== test session starts ===================\nplatform linux -- Python 3.12.3, pytest-8.4.1, pluggy-1.6.0\nrootdir: /home/julio/Downloads/aula_p2\ncollected 6 items\n\ntestes/test_maior_palavra.py ......                   [100%]\n\n===================== 6 passed in 0.01s ===================="
  },
  {
    "objectID": "aula_p3.html#section-15",
    "href": "aula_p3.html#section-15",
    "title": "Testes",
    "section": "",
    "text": "Já nosso arquivo test_maior_palavra.py ficaria então assim:\nfrom meu_app.main import maior_palavra\n\ndef test_maior_palavra_unica():\n    assert maior_palavra(['gato', 'pássaro', 'cachorro']) == 'cachorro'\n\ndef test_maior_palavra_unica_lista_maior():\n    assert maior_palavra(['feliz', 'aniversário', 'para', 'meu', 'cachorro']) == 'aniversário'\n\ndef test_maior_palavra_lista_1_elemento():\n    assert maior_palavra(['feliz']) == 'feliz'\n\ndef test_maior_palavra_empate():\n    assert maior_palavra(['gato', 'cão', 'sapo']) == 'gato'\n\ndef test_maior_palavra_strings_vazias():\n    assert maior_palavra(['', '', '']) == ''\n\ndef test_maior_palavra_lista_vazia():\n    assert maior_palavra([]) is None"
  },
  {
    "objectID": "aula_p3.html#section-16",
    "href": "aula_p3.html#section-16",
    "title": "Testes",
    "section": "",
    "text": "Repare em um detalhe importante do último teste.\n\nPara verificar se o retorno é None, usamos is None em vez de == None.\n\n\nÉ que o operador == compara o conteúdo de dois objetos.\n\nDe forma similar ao equals no Java.\nJá o operador is verifica se duas variáveis apontam para o mesmo objeto.\n\nQue é similar ao == do Java 😁\n\n\n\n\nComo None é um objeto único no Java, é mais eficiente e seguro usar is None para verificar se uma variável é None."
  },
  {
    "objectID": "aula_p3.html#section-17",
    "href": "aula_p3.html#section-17",
    "title": "Testes",
    "section": "",
    "text": "Vamos agora forçar dois erros em nossa função maior_palavra\n\npara ver como o pytest vai reportar esses erros.\n\n\ndef maior_palavra(palavras):\n    # removemos a verificação de lista vazia\n    maior = palavras[0]\n    for p in palavras[1:]:\n        # trocamos &gt; por &gt;=\n        if len(p) &gt;= len(maior):\n            maior = p\n    return maior"
  },
  {
    "objectID": "aula_p3.html#section-18",
    "href": "aula_p3.html#section-18",
    "title": "Testes",
    "section": "",
    "text": "Obtemos então a seguinte saída com pytest.\n==================== test session starts =====================\nplatform linux -- Python 3.12.3, pytest-8.4.1, pluggy-1.6.0\nrootdir: /home/julio/Downloads/aula_p2\ncollected 6 items                                            \n\ntestes/test_maior_palavra.py ...F.F                    [100%]\n\n========================== FAILURES ==========================\n_________________ test_maior_palavra_empate __________________\n\n    def test_maior_palavra_empate():\n&gt;       assert maior_palavra(['gato', 'cão', 'sapo']) == 'gato'\nE       AssertionError: assert 'sapo' == 'gato'\nE         \nE         - gato\nE         + sapo\n\ntestes/test_maior_palavra.py:13: AssertionError\n_______________ test_maior_palavra_lista_vazia _______________\n\n    def test_maior_palavra_lista_vazia():\n&gt;       assert maior_palavra([]) == None\n               ^^^^^^^^^^^^^^^^^\n\ntestes/test_maior_palavra.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npalavras = []\n\n    def maior_palavra(palavras):\n        # removemos a verificação de lista vazia\n&gt;       maior = palavras[0]\n                ^^^^^^^^^^^\nE       IndexError: list index out of range\n\nmeu_app/main.py:3: IndexError\n================== short test summary info ===================\nFAILED testes/test_maior_palavra.py::test_maior_palavra_empate - AssertionError: assert 'sapo' == 'gato'\nFAILED testes/test_maior_palavra.py::test_maior_palavra_lista_vazia - IndexError: list index out of range\n================ 2 failed, 4 passed in 0.04s ================="
  },
  {
    "objectID": "aula_p3.html#section-19",
    "href": "aula_p3.html#section-19",
    "title": "Testes",
    "section": "",
    "text": "Na saída anterior vemos que foram encontrados 6 testes dos quais dois não passaram\ncollected 6 items                                            \n\ntestes/test_maior_palavra.py ...F.F                    [100%]\n\nEm seguida são apresentados detalhes dos testes que falharam.\n\nQue nos ajudam a identificar o problema para corrigi-lo."
  },
  {
    "objectID": "aula_p3.html#section-20",
    "href": "aula_p3.html#section-20",
    "title": "Testes",
    "section": "",
    "text": "Nas aulas anteriores vimos o ciclo de projeto de funções.\n\nVamos agora atualizá-lo para incluir a etapa de testes."
  },
  {
    "objectID": "aula_p3.html#section-21",
    "href": "aula_p3.html#section-21",
    "title": "Testes",
    "section": "",
    "text": "A. Defina o comportamento desejado da função\nB. Escreva um prompt que descreve a função\nC. Use o Copilot para gerar o código\nD. O código parece razoável? Sim: E, não: I.\nE. Escreva casos de teste usando pytest\nF. Rode os testes. Passou nos testes? Sim: G, não: J\nG. Escreveu todos os casos de testes? Sim: H, não: E\nH. Pronto!\nI. Explore alternativas do Copilot. Alguma parece razoável? Sim: E, não: J\nJ. Revise o prompt para melhorar a descrição da função e vá para C ."
  },
  {
    "objectID": "aula_p3.html#section-22",
    "href": "aula_p3.html#section-22",
    "title": "Testes",
    "section": "",
    "text": "flowchart TD\n  A(Defina o comportamento desejado da função) --&gt; B(Escreva um prompt que descreve a função)\n  B --&gt; C(Use o Copilot para gerar o código)\n  C --&gt; D(O código parece razoável?)\n  D --Sim--&gt; E(Escreva casos de teste usando pytest)\n  E --&gt; F(Rode os testes. Passou nos testes?)\n  F -- Sim --&gt; G(Escreveu todos os casos de testes?)\n  G -- Sim --&gt; H(Pronto!)\n  G -- Não --&gt; E\n  D -- Não --&gt; I(Explore alternativas do Copilot. Alguma parece razoável?)\n  I -- Sim --&gt; E\n  I -- Não --&gt; J(Revise o prompt para melhorar a descrição da função)\n  J --&gt; C\n  F -- Não --&gt; J"
  },
  {
    "objectID": "aula_p3.html#section-23",
    "href": "aula_p3.html#section-23",
    "title": "Testes",
    "section": "",
    "text": "Vamos agora praticar a escrita de testes.\n\nPara isso, você deve tratar as situações a seguir, seguindo todo o ciclo atualizado de projeto de funções.\n\n\nTrataremos duas situações.\n\nA primeira com o objetivo de experimentarmos o uso da biblioteca pytest.\nJá a segunda com o objetivo de pensarmos em como testar funções que processam arquivos."
  },
  {
    "objectID": "aula_p3.html#section-24",
    "href": "aula_p3.html#section-24",
    "title": "Testes",
    "section": "",
    "text": "Já que terminou confira se tratou pelo menos os casos abaixo:\n1. Uma fileira com mais assentos livres consecutivos que todas as outras e com mais assentos que o tamanho do grupo.\n2. Uma fileira como do caso 1, mas com dois espaços não consecutivos suficientes para todo o grupo.\n3. Uma fileira como do caso 1, mas com assentos livres do mesmo tamanho do grupo.\n4. Mais de uma fileira com mais assentos livres consecutivos que o tamanho do grupo, sem empates.\n5. Mesmo caso anterior, mas com empates.\n6. Mais de uma fileira com assentos consecutivos livres, mas nenhuma suficiente para todo o grupo.\n7. Uma fileira com todos os assentos livres e suficientes para o tamanho do grupo.\n8. Uma sala de cinema cheia, com todos os assentos ocupados.\n9. Uma sala de cinema vazia, com todos os assentos livres (suficientes para o tamanho do grupo).\n10. Uma sala de cinema cujas fileiras são menores que o tamanho do grupo.\nComplemente os testes que porventura tenham faltado."
  },
  {
    "objectID": "aula_p3.html#section-25",
    "href": "aula_p3.html#section-25",
    "title": "Testes",
    "section": "",
    "text": "Nesse caso, como podemos fazer o teste?\n\nUsar o arquivo que queremos processar, o próprio arquivo do Kaggle, não é uma boa ideia.\nPor que?\n\n\n(pense antes de prosseguir…)"
  },
  {
    "objectID": "aula_p3.html#situação-1",
    "href": "aula_p3.html#situação-1",
    "title": "Testes",
    "section": "Situação 1",
    "text": "Situação 1\nSuponha que esteja indo em grupo a uma sala de cinema\n\ne que vocês queriam escolher uma fileira de cadeiras que caiba todo o grupo sentado um ao lado do outro.\nCaso exista mais de uma fileira que caiba todo o grupo, vocês querem escolher a fileira que tenha o maior número consecutivo de assentos livres\n\nde forma que todos do grupo possam se sentar juntos de maneira mais confortável possível.\n\nObs.: em caso de empate o grupo prefere a última fileira (mais ao fundo da sala)."
  },
  {
    "objectID": "aula_p3.html#situação-1-1",
    "href": "aula_p3.html#situação-1-1",
    "title": "Testes",
    "section": "Situação 1",
    "text": "Situação 1\nCrie então uma função que atenda à necessidade do grupo.\n\nEla deve receber uma matriz de booleanos (lista de listas) na qual cada lista representa uma fileira com os assentos ocupados (True) ou livres (False).\nE deve retornar o número da fileira com a maior quantidade de assentos consecutivos livres.\n\nConsiderando que a primeira fileira é a de número 0.\n\nCaso não exista nenhuma fileira que caiba todo o grupo, a função deve retornar -1.\n\n\nAo chegar na etapa E, de escrita de testes, pense em todos os casos de uso comuns e de borda que julgar necessários."
  },
  {
    "objectID": "aula_p3.html#situação-2---testes-com-arquivos",
    "href": "aula_p3.html#situação-2---testes-com-arquivos",
    "title": "Testes",
    "section": "Situação 2 - Testes com arquivos",
    "text": "Situação 2 - Testes com arquivos\nImagine agora que queiramos testar funções com processem arquivos.\n\nComo a que fizemos em outra aula, com dados de ligas europeias de futebol.\n\n\n\ndef calcular_quantidade_gols(dados, pais):\n    \"\"\"\n    dados contém dados estatísticos de futebol:\n    - a terceira coluna traz o nome do país do jogador\n    - a sexta coluna o nome da liga\n    - a décima terceira coluna o número de gols feitos pelo jogador\n    pais é a identificação do país de interesse (ex.: \"br BRA\")\n\n    A função calcula e retorna a quantidade de gols feitos \n    por jogadores do país passado em cada liga\n    \"\"\""
  },
  {
    "objectID": "aula_p3.html#section-26",
    "href": "aula_p3.html#section-26",
    "title": "Testes",
    "section": "",
    "text": "Como validar se a resposta está correta?\n\n\nRepare que se precisarmos abrir o arquivo Kaggle para conferir manualmente se a resposta está correta, a função perde o sentido pois nem precisaríamos mais dela.\n\n\nE se o arquivo for muito grande?\n\n\nAlém de ser improditivo conferir manualmente, o teste poderia ser lento para executar.\nTestes precisam ser rápidos."
  },
  {
    "objectID": "aula_p3.html#section-27",
    "href": "aula_p3.html#section-27",
    "title": "Testes",
    "section": "",
    "text": "E se o arquivo for alterado?\n\n\nUm outro problema de depender de um arquivo externo é que você não tem controle sobre o conteúdo dele.\nAssim mesmo que você verifique manualmente a resposta esperada para escrever o teste, se o arquivo for alterado, o teste vai parar de funcionar.\nPrejudicando a reprodutibilidade dos testes."
  },
  {
    "objectID": "aula_p3.html#situação-1---conferência",
    "href": "aula_p3.html#situação-1---conferência",
    "title": "Testes",
    "section": "Situação 1 - Conferência",
    "text": "Situação 1 - Conferência\nA ideia é que você só prossiga depois de achar que já terminou todos os testes\n\nOu seja depois de já ter chegado no passo H do ciclo de projeto de funções.\n\n\nAcabou mesmo? Tem certeza?"
  },
  {
    "objectID": "aula_p3.html#section-28",
    "href": "aula_p3.html#section-28",
    "title": "Testes",
    "section": "",
    "text": "E se o arquivo não estiver disponível?\n\n\nPrecisamos garantir que os testes não dependam de fontes externas que podem não estar disponíveis.\nTestes precisam ser isolados.\n\n\nE se o arquivo não tiver casos de borda?\n\n\nPrecisamos garantir que os testes sejam abrangentes e incluam casos de borda relevantes.\nUm arquivo real pode não conter esses casos."
  },
  {
    "objectID": "aula_p3.html#section-29",
    "href": "aula_p3.html#section-29",
    "title": "Testes",
    "section": "",
    "text": "O que podemos fazer então para testar a função garantindo que os testes são rápidos, isolados e reprodutíveis?\n\nPodemos criar um conjunto de dados artificial para o qual sabemos a saída esperada para várias consultas possíveis.\nComo o conjunto é artificial, podemos adicionar a ele situações de casos de borda.\n\n\nNo caso da função que queremos testar, criaríamos um arquivo CSV fictício\n\ncontendo situações dos casos de testes que queiramos testar.\nE usaríamos esse arquivo para testar a função."
  },
  {
    "objectID": "aula_p3.html#section-30",
    "href": "aula_p3.html#section-30",
    "title": "Testes",
    "section": "",
    "text": "Vamos começar então pensando nos casos de testes.\n\nConsidere que a função pode ser usada para consultar vários países diferentes.\n\n\nLista no seu caderno os casos de testes antes de continuar."
  },
  {
    "objectID": "aula_p3.html#section-31",
    "href": "aula_p3.html#section-31",
    "title": "Testes",
    "section": "",
    "text": "Verifique se considerou os casos de testes comuns a seguir.\n\nUm país aparece várias vezes em linhas não consecutivas, incluindo a última linha.\nUm país aparece em linhas consecutivas.\nUm país aparece apenas uma vez.\nUm país aparece em todas as ligas.\nUm país aparece em apenas uma liga.\nUm país aparece várias vezes mas nenhum jogador do país fez gols.\nUm país não aparece no arquivo."
  },
  {
    "objectID": "aula_p3.html#section-32",
    "href": "aula_p3.html#section-32",
    "title": "Testes",
    "section": "",
    "text": "Precisamos agora criar nosso conjunto de dados artificial\n\nPara isso podemos criar vários arquivos, ou apenas um para todos os testes.\nSe conseguirmos criar apenas um arquivo, será mais fácil gerenciar os testes.\nRepare que o arquivo original tem várias colunas, mas para os nossos testes seria suficiente considerar as primeiras nove (que são as que precisamos)."
  },
  {
    "objectID": "aula_p3.html#section-33",
    "href": "aula_p3.html#section-33",
    "title": "Testes",
    "section": "",
    "text": "Vamos então criar um arquivo CSV que cubra os casos de testes. Para isso seguem algumas dicas:\n\nCrie um arquivo CSV contendo as 13 primeiras colunas e 11 primeiras linhas do arquivo original.\nSalve o arquivo com o nome futebol.csv na pasta testes/dados/.\nAltere os dados do arquivo para atender aos casos de testes levantados.\n\nParece suficiente considerar a existência de apenas duas ligas.\nE você pode usar países diferentes para cobrir todos os casos de testes."
  },
  {
    "objectID": "aula_p3.html#section-34",
    "href": "aula_p3.html#section-34",
    "title": "Testes",
    "section": "",
    "text": "Para ler o arquivo criado no seu arquivo com as funçoes de teste você pode usar o seguinte código:\nimport csv\nfrom pathlib import Path\n\nCAMINHO_ARQUIVO_FUTEBOL = Path(__file__).parent / 'dados' / 'futebol.csv'\n\nMãos à obra!"
  },
  {
    "objectID": "aula_t4.html#section",
    "href": "aula_t4.html#section",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "O conteúdo dessa aula é inspirado no capítulos 7 do livro abaixo."
  },
  {
    "objectID": "aula_t4.html#section-1",
    "href": "aula_t4.html#section-1",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Já comentamos em aulas anteriores que não devemos pedir ao Copilot para resolver um problema muito grande de uma vez só.\n\nComo: Crie um jogo de estratégia multiplayer desafiador e divertido.\n\n\nNo pior caso, o Copilot não vai gerar nada útil.\n\nHá casos em que ele só fica gerando comentários em sequência."
  },
  {
    "objectID": "aula_t4.html#section-2",
    "href": "aula_t4.html#section-2",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "E, na melhor das hipóteses, você teria um jogo “enlatado” que não é muito divertido ou desafiador.\n\nParte do poder de ser um programador é conseguir customizar o que você cria.\n\n\nAlém disso, imagina a dificuldade que seria corrigir todos os erros de um jogo inteiro gerado de uma vez.\n\n\nNós precisamos pedir ao Copilot para resolver pequenos problemas pra gente.\n\nE nós mesmos vamos juntando esses pedaços em nossos programas."
  },
  {
    "objectID": "aula_t4.html#section-3",
    "href": "aula_t4.html#section-3",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "O objetivo dessa aula é aprender a quebrar um problema grande em subproblemas menores.\n\nDe forma que consigamos resolver grandes problemas usando programação."
  },
  {
    "objectID": "aula_t4.html#section-4",
    "href": "aula_t4.html#section-4",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Decomposição de problemas envolve começar com um problema grande e que não está bem especificado\n\ne quebrá-lo em subproblemas, os quais são bem definidos e úteis para resolver o problema original.\n\n\nNa aula vamos trabalhar com decomposição de funções.\n\nO que faremos portanto é escrever funções para cada um dos subproblemas que identificamos."
  },
  {
    "objectID": "aula_t4.html#section-5",
    "href": "aula_t4.html#section-5",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Ao identificarmos um subproblema, pode ser que consigamos resolvê-lo escrevendo uma função.\n\nOu pode se que ele ainda seja muito grande para ser implementado em uma única função.\nE então precisaremos quebrá-lo em sub-subproblemas.\n\nEsperamos então que cada sub-suproblema seja pequeno o suficiente.\nMas se não for, continuamos quebrando em subproblemas sucessivamente."
  },
  {
    "objectID": "aula_t4.html#section-6",
    "href": "aula_t4.html#section-6",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "A principal razão para decompormos problemas é a complexidade.\n\nCada função deve ser simples o suficiente de forma que:\n\nconsigamos entender o seu propósito;\nconsigamos pedir ao Copilot para implementá-la;\ne, se tiver algum erro, não tenhamos muitas dificuldades em resolvê-lo."
  },
  {
    "objectID": "aula_t4.html#section-7",
    "href": "aula_t4.html#section-7",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Quando escrevemos um código que é muito complexo, é muito mais provável que cometamos erros.\n\nO mesmo vale para o Copilot.\n\n\nE quando temos erros em códigos grandes e complexos não é fácil encontrá-los e corrigi-los.\n\n\n“É difícil exagerar a importância da decomposição de problemas para a qualidade de código”"
  },
  {
    "objectID": "aula_t4.html#section-8",
    "href": "aula_t4.html#section-8",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "No contexto da Engenharia de Software nós chamamos a decomposição de problemas de design top-down (abordagem de cima pra baixo).\n\nTem esse nome porque começamos com uma tarefa grande que precisamos completar e a dividimos em tarefas menores.\nDurante o design top-down, nós criamos a “casca” das funções que precisamos implementar.\nDepois que terminamos o design, podemos implementar o código das funções definidas."
  },
  {
    "objectID": "aula_t4.html#section-9",
    "href": "aula_t4.html#section-9",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Nós geralmente acabamos tendo:\n\numa função para o problema completo\nque chama as funções que implementam os subproblemas.\nE cada função de subproblema pode chamar funções de subsubproblemas.\nE assim sucessivamente.\n\n\nNesse processo, procuramos definir funções que recebem poucos parâmetros e que retornam poucas informações, mas úteis.\n\nO que ajuda muito a melhorar a facilidade de entendimento do código."
  },
  {
    "objectID": "aula_t4.html#section-10",
    "href": "aula_t4.html#section-10",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Nas aulas anteriores já utilizamos alguns exemplos, ainda que simples, que poderiam ter sido tratados com design top-down.\n\nNós criamos, por exemplo, a função obter_senha_forte\n\nque fica pedindo um usuário para digitar uma senha até que ele digite uma senha forte.\n\n\n\nSeguindo o design top-down poderíamos identificar uma subtarefa dessa tarefa.\n\nQue é verificar se uma senha é forte.\nO que é justamente o que a função eh_senha_forte faz."
  },
  {
    "objectID": "aula_t4.html#section-11",
    "href": "aula_t4.html#section-11",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Podemos representar o design top down como mostrado abaixo.\n\n\n\n\n\nflowchart TD\n  A(obter_senha_forte) --&gt; B(eh_senha_forte)"
  },
  {
    "objectID": "aula_t4.html#section-12",
    "href": "aula_t4.html#section-12",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Nós também trabalhamos com uma função melhor_palavra que recebe uma lista de palavras e retorna aquela que faz mais pontos no jogo Scrabble.\n\nSe tivéssemos criando a função usando design top-down, poderíamos identificar uma subtarefa que é calcular a pontuação de uma palavra.\n\n\nTeríamos então o seguinte design top-down:\n\n\n\n\n\nflowchart TD\n  A(melhor_palavra) --&gt; B(numero_de_pontos)"
  },
  {
    "objectID": "aula_t4.html#section-13",
    "href": "aula_t4.html#section-13",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Quando nós criamos essas funções na aula passada, nós não usamos design top-down.\n\nNós começamos da subtarefa (função folha) e depois criamos a função que resolve o problema maior.\n\n\nAgora, para implementar o código das funções, nós continuaremos a fazer dessa forma.\n\nMas antes disso, vamos projetar quais são as funções necessárias usando design top-down."
  },
  {
    "objectID": "aula_t4.html#section-14",
    "href": "aula_t4.html#section-14",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "É importante ressaltar que, para esses exemplos pequenos, pode parecer que não faria muita diferença usar ou não design top-down.\n\nOu até mesmo pode parecer desnecessário implementar mais de uma função.\n\n\nMas, para problemas maiores, a decomposição de problemas é a única forma de manter a complexidade sob controle.\n\nO nosso objetivo aqui é adquirir a habilidade de quebrar um problema em problemas menores."
  },
  {
    "objectID": "aula_t4.html#section-15",
    "href": "aula_t4.html#section-15",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Vamos agora resolver um problema usando design top-down desde o início.\n\nAo longo da disciplina, nós vamos continuar abordando essa estratégia.\nDe forma que você consiga aplicá-la com susesso por conta própria.\n\n\nOps.. tem um erro na frase anterior.\n\nO correto é sucesso e não susesso."
  },
  {
    "objectID": "aula_t4.html#section-16",
    "href": "aula_t4.html#section-16",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "É comum que erros de digitação ocorram ou que tenhamos dúvidas sobre a ortografia de uma palavra.\n\nEx.: exceção ou excesão ou excessão?\n\n\nO que nós vamos fazer é pegar uma palavra que pode estar escrita errada\n\ne oferecer sugestões de possíveis correções para ela.\n\n\n\nSerá um corretor ortográfico básico para palavras individuais."
  },
  {
    "objectID": "aula_t4.html#section-17",
    "href": "aula_t4.html#section-17",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Nós vamos tratar três tipos de erro de ortografia:\n\nletra faltando: como suceso ao invés de sucesso.\nletra sobrando: como menssagem ao invés de mensagem.\nletra trocada: como viajem ao invés de viagem."
  },
  {
    "objectID": "aula_t4.html#section-18",
    "href": "aula_t4.html#section-18",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Existem diversos outros erros de ortografia que não cobriremos:\n\nComo o caso de excessão ao invés de exceção que tem uma letra trocada e uma letra sobrando.\nOu de metereologia em vez de meteorologia que tem uma letra trocada e em posição errada.\n\n\nMas a ideia aqui é aprendermos o design top-down e não criar um corretor ortográfico perfeito.\n\nOs casos que trataremos serão suficientes para o que precisamos."
  },
  {
    "objectID": "aula_t4.html#section-19",
    "href": "aula_t4.html#section-19",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "A nossa tarefa é:\n\nEscrever um programa que pega uma palavra que pode estar escrita errada e oferece sugestões de possíveis correções para ela.\nEssa tarefa é certamente muito grande para ser tratada de uma vez só."
  },
  {
    "objectID": "aula_t4.html#resumo-das-tarefas-de-entrada-processamento-e-saída",
    "href": "aula_t4.html#resumo-das-tarefas-de-entrada-processamento-e-saída",
    "title": "Decomposição de Problemas",
    "section": "Resumo das tarefas de entrada, processamento e saída",
    "text": "Resumo das tarefas de entrada, processamento e saída\n\n\n\n\n\n\n\n\nFase\nPapel\nExemplo de uso com o Corretor\n\n\n\n\nEntrada\nPegar, como entrada, a informação necessária para a função\nPegar a palavra errada suceso e uma coleção de palavras reais (com ortografia correta)\n\n\nProcessamento\nRealizar as operações especificadas sobre os dados\nConsiderar alterações na palavra que possam levar a uma palavra escrita corretamente (deve ser tentadas todas as combinações dos 3 tipos de erros que estamos tratando; ex.: sucesso, mas também ssucesso)\n\n\nSaída\nExibir o resultado do processamento dos dados\nMostrar a sugestão sucesso"
  },
  {
    "objectID": "aula_t4.html#section-20",
    "href": "aula_t4.html#section-20",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Para dividi-la em subtarefas, a primeira sugestão é tratar os três passos que são muito comuns em diversos programas:\n\nLer a entrada do usuário.\nProcessar os dados.\nExibir a saída.\n\n\nObs.: nós já tínhamos usado isso no exemplo do processamento dos dados de futebol."
  },
  {
    "objectID": "aula_t4.html#section-21",
    "href": "aula_t4.html#section-21",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Fase\nPapel\nExemplo de uso com o Corretor\n\n\n\n\nEntrada\nPegar, como entrada, a informação necessária para a função\nPegar a palavra errada suceso e uma coleção de palavras reais (com ortografia correta)\n\n\nProcessamento\nRealizar as operações especificadas sobre os dados\nConsiderar alterações na palavra que possam levar a uma palavra escrita corretamente (deve ser tentadas todas as combinações dos 3 tipos de erros que estamos tratando; ex.: sucesso, mas também ssuceso)\n\n\nSaída\nExibir o resultado do processamento dos dados\nMostrar a sugestão sucesso"
  },
  {
    "objectID": "aula_t4.html#dividindo-o-subproblema-de-processamento",
    "href": "aula_t4.html#dividindo-o-subproblema-de-processamento",
    "title": "Decomposição de Problemas",
    "section": "Dividindo o subproblema de Processamento",
    "text": "Dividindo o subproblema de Processamento\nVamos focar então na etapa de processamento.\n\nVamos chamar a função de processamento de _obter_sugestoes_correcao.\nQuais parâmetros a função precisa receber?\n\n\nCom certeza precisa receber a palavra que o usuário digitou."
  },
  {
    "objectID": "aula_t4.html#section-22",
    "href": "aula_t4.html#section-22",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Seguindo essas etapas, começamos nosso design top-down, divindo a tarefa do corretor em três subtarefas:\n\nEntrada: pedimos ao usuário uma palavra para a qual ele quer obter sugestões de correção.\nProcessamento: precisaremos descobrir todas as possíveis sugestões para a palavra do usuário.\nSaída: exibimos para o usuário todas as sugestões que encontramos.\n\n\nE agora criaremos uma função para cada subtarefa dessa, certo?\n\nOu não?"
  },
  {
    "objectID": "aula_t4.html#section-23",
    "href": "aula_t4.html#section-23",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Apesar de muitas vezes criarmos uma função para cada subtarefa, isso nem sempre é necessário.\n\nVeja que, para o tratamento da entrada do nosso problema, nós precisamos apenas pedir uma palavra ao usuário.\n\nAcontece que Python já tem uma função input que faz exatamente isso.\nPortanto uma função para tratar a entrada teria apenas uma linha, o que parece uma divisão exagerada.\n\nA mesma coisa pode ser dita sobre o passo de saída.\n\nJá que Python já possui uma função print para isso."
  },
  {
    "objectID": "aula_t4.html#section-24",
    "href": "aula_t4.html#section-24",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Não é que esteja errado se resolvermos criar funções para esses passos.\n\nMas devemos refletir se vale realmente a pena criar funções com uma única linha.\n\nUm caso onde isso é útil é se ela fizer algo que precisa ser repetido várias vezes."
  },
  {
    "objectID": "aula_t4.html#section-25",
    "href": "aula_t4.html#section-25",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Ela poderia receber também as palavras reais em português, para que consiga fazer as sugestões.\n\nIsso pode ser feito de diferentes formas:\n\nEla pode receber a lista de palavras reais como um parâmetro.\nOu o nome de um arquivo que contém essas palavras."
  },
  {
    "objectID": "aula_t4.html#section-26",
    "href": "aula_t4.html#section-26",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Esse tipo de decisão é muito comum quando estamos fazendo decomposição de subproblemas.\n\nPara nosso exemplo, vamos usar como parâmetro o nome de um arquivo.\nIsso porque temos um arquivo contendo quase 150 mil palavras reais em português.\nQue foram obtidas através de uma busca no Google (do repositório fserb/pt-br)."
  },
  {
    "objectID": "aula_t4.html#section-27",
    "href": "aula_t4.html#section-27",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Esse é o nosso design top-down para o corretor até o momento:\n\nConsiderando que a função mais geral, do problema como um todo, se chama corretor_ortografico.\n\n\n\n\n\n\nflowchart TD\n  A(corretor_ortografico) --&gt; B(obter_sugestoes_correcao)"
  },
  {
    "objectID": "aula_t4.html#section-28",
    "href": "aula_t4.html#section-28",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "E o que precisamos fazer na função de processamento?\n\nSe pensarmos bem, podemos dividir a função em 4 subproblemas.\n\nObter uma lista de palavras a partir do arquivo.\nGerar uma lista de todas as palavras possíveis a partir da palavra digitada.\nA partir das palavras possíveis, gerar uma lista contendo apenas palavras reais.\nRetornar uma lista contendo as palavras reais (as sugestões) sem repetições."
  },
  {
    "objectID": "aula_t4.html#carregar-lista-de-palavras",
    "href": "aula_t4.html#carregar-lista-de-palavras",
    "title": "Decomposição de Problemas",
    "section": "Carregar lista de palavras",
    "text": "Carregar lista de palavras\nVamos agora pensar em cada subproblema gerado no último passo da decomposição.\n\nNós precisamos quebrar a função carregar_lista_palavras em subtarefas?\n\n\nPoderíamos pensar em fases como: abrir o arquivo, carregar os dados em uma lista e fechar o arquivo.\n\nMas pelo que vimos sobre arquivos do Python na aula passada, sabemos que abrir e fechar o arquivo é algo muito simples.\nEntão vamos manter essa tarefa em uma única função."
  },
  {
    "objectID": "aula_t4.html#gerar-a-lista-de-todas-as-palavras-possíveis",
    "href": "aula_t4.html#gerar-a-lista-de-todas-as-palavras-possíveis",
    "title": "Decomposição de Problemas",
    "section": "Gerar a lista de todas as palavras possíveis",
    "text": "Gerar a lista de todas as palavras possíveis\nE a função gerar_palavras_possiveis precisaria ser quebrada?\n\nVamos pensar em como exatamente essas palavras candidatas seriam geradas.\nA ideia é gerar todas as combinações de adicionar uma letra, remover uma letra e trocar uma letra.\n\nSó de descrever essa ideia já percebemos que existem três operações distintas.\nQue poderiam então ser tratadas como subproblemas."
  },
  {
    "objectID": "aula_t4.html#gerar-a-lista-de-todas-as-palavras-possíveis-1",
    "href": "aula_t4.html#gerar-a-lista-de-todas-as-palavras-possíveis-1",
    "title": "Decomposição de Problemas",
    "section": "Gerar a lista de todas as palavras possíveis",
    "text": "Gerar a lista de todas as palavras possíveis\nPoderíamos então quebrar a tarefa gerar_palavras_possiveis em três subtarefas:\n\nadicionar_letra: que gera uma palavra candidata para cada letra do alfabeto em cada posição possível.\n\n\nEx.: suceso -&gt; asuceso, bsuceso, …, sauceso, sbuceso, …, sucesoa, sucesob.\n\n\nremover_letra: que gera uma palavra candidata removendo cada letra da palavra original.\n\n\nEx.: suceso -&gt; uceso, sceso, sueso, sucso, suceo e suces."
  },
  {
    "objectID": "aula_t4.html#gerar-a-lista-de-todas-as-palavras-possíveis-2",
    "href": "aula_t4.html#gerar-a-lista-de-todas-as-palavras-possíveis-2",
    "title": "Decomposição de Problemas",
    "section": "Gerar a lista de todas as palavras possíveis",
    "text": "Gerar a lista de todas as palavras possíveis\n\ntrocar_letra: que gera uma palavra candidata para cada letra do alfabeto substituindo cada letra da palavra original.\n\n\nEx.: suceso -&gt; auceso, buceso, …, saceso, sbceso, …, sucesy, …, sucesz."
  },
  {
    "objectID": "aula_t4.html#section-29",
    "href": "aula_t4.html#section-29",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Vamos acrescentar alguns detalhes a esses passos.\n\n\nObter uma lista de palavras a partir do arquivo.\n\n\nFunção carregar_lista_palavras que carrega as palavras do arquivo em uma lista.\nO arquivo tem uma palavra real do português em cada linha."
  },
  {
    "objectID": "aula_t4.html#gerar-a-lista-de-todas-as-palavras-reais",
    "href": "aula_t4.html#gerar-a-lista-de-todas-as-palavras-reais",
    "title": "Decomposição de Problemas",
    "section": "Gerar a lista de todas as palavras reais",
    "text": "Gerar a lista de todas as palavras reais\nA função filtrar_palavras_reais receberá duas listas, uma de palavras candidatas e outra de palavras reais\n\nE precisará retornar as palavras candidatas que existem também na lista de palavras reais.\n\n\nSe pensarmos um pouco em como resolver esse problema, não parece algo tão complicado."
  },
  {
    "objectID": "aula_t4.html#filtrar-palavras-repetidas",
    "href": "aula_t4.html#filtrar-palavras-repetidas",
    "title": "Decomposição de Problemas",
    "section": "Filtrar palavras repetidas",
    "text": "Filtrar palavras repetidas\nE a função filtrar_palavras_repetidas?\n\nEsse é um exemplo de como seu conhecimento prévio da linguagem pode mudar sua decisão.\n\n\nA princípio podemos manter a função, pois podemos pensar em um loop que percorre a lista de palavras\n\nE, para cada palavra, a adicionamos na lista de resposta apenas se ela ainda não estiver lá."
  },
  {
    "objectID": "aula_t4.html#resumo-do-design-top-down-do-corretor-ortográfico",
    "href": "aula_t4.html#resumo-do-design-top-down-do-corretor-ortográfico",
    "title": "Decomposição de Problemas",
    "section": "Resumo do design top-down do corretor ortográfico",
    "text": "Resumo do design top-down do corretor ortográfico\nNosso design top-down final é o seguinte:\n\n\n\n\n\nflowchart TD\n  A(corretor_ortografico) --&gt; B(obter_sugestoes_correcao)\n  B --&gt; C1(carregar_lista_palavras)\n  B --&gt; C2(gerar_palavras_possiveis)\n  C2 --&gt; D1(adicionar_letra)\n  C2 --&gt; D2(remover_letra)\n  C2 --&gt; D3(trocar_letra)\n  B --&gt; C3(filtrar_palavras_reais)\n  B --&gt; C4(filtrar_palavras_repetidas)"
  },
  {
    "objectID": "aula_t4.html#section-30",
    "href": "aula_t4.html#section-30",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Gerar uma lista de todas as palavras possíveis a partir da palavra digitada.\n\n\nFunção gerar_palavras_possiveis que recebe a palavra digitada e gera todas as combinações possíveis com os erros que estamos tratando.\nOu seja, ela gera uma lista enorme de strings: acrescentado uma letra, removendo uma letra ou trocando uma letra.\nVamos fazer isso sem nos preocuparmos aqui se essas strings formam uma palavra válida ou não."
  },
  {
    "objectID": "aula_t4.html#section-31",
    "href": "aula_t4.html#section-31",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "A partir das palavras possíveis, gerar uma lista contendo apenas palavras reais.\n\n\nFunção filtrar_palavras_reais que recebe a lista de palavras possíveis e a lista de palavras reais.\nE retorna uma lista contendo apenas as palavras que estão nas duas listas."
  },
  {
    "objectID": "aula_t4.html#carregar_lista_palavras",
    "href": "aula_t4.html#carregar_lista_palavras",
    "title": "Decomposição de Problemas",
    "section": "carregar_lista_palavras",
    "text": "carregar_lista_palavras\nRepare que começar de baixo para cima não significa necessariamente começar pelo nível mais baixo do design.\n\nO importante é começar por funções folha.\nE só implementar uma função se todas as suas subfunções estiverem implementadas.\n\n\nPor isso, vamos começar com a função carregar_lista_palavras."
  },
  {
    "objectID": "aula_t4.html#carregar_lista_palavras-1",
    "href": "aula_t4.html#carregar_lista_palavras-1",
    "title": "Decomposição de Problemas",
    "section": "carregar_lista_palavras",
    "text": "carregar_lista_palavras\nComo já fizemos anteriormente, vamos definir a assinatura e a docstring e deixar o Copilot gerar o código.\ndef carregar_lista_palavras(caminho_arquivo):\n    \"\"\"\n    caminho_arquivo  é o nome de um arquivo que tem uma palavra \n    em português por linha.\n    \n    Retorna uma lista com as palavras do arquivo.\n    \"\"\""
  },
  {
    "objectID": "aula_t4.html#carregar_lista_palavras-2",
    "href": "aula_t4.html#carregar_lista_palavras-2",
    "title": "Decomposição de Problemas",
    "section": "carregar_lista_palavras",
    "text": "carregar_lista_palavras\nEsse foi o código gerado pelo Copilot no meu caso.\ndef carregar_lista_palavras(caminho_arquivo):\n    \"\"\"\n    caminho_arquivo  é o nome de um arquivo que tem uma palavra \n    em português por linha.\n    \n    Retorna uma lista com as palavras do arquivo.\n    \"\"\"\n    with open(caminho_arquivo, 'r', encoding='utf-8') as f:\n        palavras = f.read().splitlines()\n    return palavras"
  },
  {
    "objectID": "aula_t4.html#testes-da-função-carregar_lista_palavras",
    "href": "aula_t4.html#testes-da-função-carregar_lista_palavras",
    "title": "Decomposição de Problemas",
    "section": "Testes da função carregar_lista_palavras",
    "text": "Testes da função carregar_lista_palavras\nQuais testes poderíamos pensar para a função?\n\nPodemos criar três arquivos de teste: um vazio, um com uma palavra e um com várias palavras.\nE criar uma função de teste para cada caso.\n\n\nNo arquivo com uma palavra colocaremos:\nexuberante\nE no arquivo com várias palavras\ndinossauro\nexuberante\nmelancia\ntucano"
  },
  {
    "objectID": "aula_t4.html#testes-da-função-carregar_lista_palavras-1",
    "href": "aula_t4.html#testes-da-função-carregar_lista_palavras-1",
    "title": "Decomposição de Problemas",
    "section": "Testes da função carregar_lista_palavras",
    "text": "Testes da função carregar_lista_palavras\nNossas funções de teste poderiam ser então:\nfrom pathlib import Path\nfrom corretor.main import carregar_lista_palavras\n\nPASTA_ARQUIVOS = Path(__file__).parent / 'dados'\n\ndef test_carregar_lista_palavras_vazia():\n    palavras = carregar_lista_palavras(PASTA_ARQUIVOS / 'arquivo_vazio.txt')\n    assert palavras == []\n\ndef test_carregar_lista_palavras_uma_palavra():\n    palavras = carregar_lista_palavras(PASTA_ARQUIVOS / 'uma_palavra.txt')\n    assert palavras == ['exuberante']\n\ndef test_carregar_lista_palavras_varias_palavras():\n    palavras = carregar_lista_palavras(PASTA_ARQUIVOS / 'varias_palavras.txt')\n    assert palavras == ['dinossauro', 'exuberante', 'melancia', 'tucano']"
  },
  {
    "objectID": "aula_t4.html#observação-sobre-os-slides",
    "href": "aula_t4.html#observação-sobre-os-slides",
    "title": "Decomposição de Problemas",
    "section": "Observação sobre os slides",
    "text": "Observação sobre os slides\nDaqui por diante, na aula, nós vamos criar todas as funções e suas respectivas funções de teste em um projeto no VS Code.\n\nEsse projeto estará disponível no repositório ufla-pasia/corretor-ortografico.\n\n\nJá aqui nos slides vou manter apenas o prompt das funções (assinatura e docstring) e a descrição em alto nível dos testeas."
  },
  {
    "objectID": "aula_t4.html#adicionar_letra",
    "href": "aula_t4.html#adicionar_letra",
    "title": "Decomposição de Problemas",
    "section": "adicionar_letra",
    "text": "adicionar_letra\ndef adicionar_letra(palavra):\n    \"\"\"\n    palavra é uma string com pelo menos uma letra.\n\n    Retorna uma lista com todas as strings que podem ser obtidas\n    adicionando uma letra em qualquer posição da palavra.\n    \"\"\"\nObs.: para simplificar, vamos ignorar o acréscimo de letras com acentos.\n\nTestes:\n\npalavra comum (boi), palavra de uma letra (a), palavra com letra repetida (passar)"
  },
  {
    "objectID": "aula_t4.html#remover_letra",
    "href": "aula_t4.html#remover_letra",
    "title": "Decomposição de Problemas",
    "section": "remover_letra",
    "text": "remover_letra\ndef remover_letra(palavra):\n    \"\"\"\n    palavra é uma string com pelo menos uma letra.\n\n    Retorna uma lista com todas as strings que podem ser obtidas\n    removendo uma letra de qualquer posição da palavra.\n    \"\"\"\n\nTestes:\n\npalavra comum (boi), palavra de uma letra (a), palavra com letra repetida (passar)"
  },
  {
    "objectID": "aula_t4.html#trocar_letra",
    "href": "aula_t4.html#trocar_letra",
    "title": "Decomposição de Problemas",
    "section": "trocar_letra",
    "text": "trocar_letra\ndef trocar_letra(palavra):\n    \"\"\"\n    palavra é uma string com pelo menos uma letra.\n\n    Retorna uma lista com todas as strings que podem ser obtidas\n    trocando uma letra de qualquer posição da palavra por outra letra.\n    \"\"\"\n\nTestes:\n\npalavra comum (boi), palavra de uma letra (a), palavra com letra repetida (passar)"
  },
  {
    "objectID": "aula_t4.html#gerar_palavras_possiveis",
    "href": "aula_t4.html#gerar_palavras_possiveis",
    "title": "Decomposição de Problemas",
    "section": "gerar_palavras_possiveis",
    "text": "gerar_palavras_possiveis\ndef gerar_palavras_possiveis(palavra):\n    \"\"\"\n    palavra é uma string com pelo menos uma letra.\n\n    Retorna uma lista com todas as palavras possíveis que podem ser geradas\n    a partir da palavra original, através das operações de adicionar, remover\n    ou trocar uma letra.\n    \"\"\"\n\nTestes:\n\npalavra comum (boi), palavra de uma letra (a), palavra com letra repetida (passar)"
  },
  {
    "objectID": "aula_t4.html#filtrar_palavras_reais",
    "href": "aula_t4.html#filtrar_palavras_reais",
    "title": "Decomposição de Problemas",
    "section": "filtrar_palavras_reais",
    "text": "filtrar_palavras_reais\ndef filtrar_palavras_reais(lista_palavras, palavras_possiveis):\n    \"\"\"\n    lista_palavras é uma lista de strings com palavras em português.\n    palavras_possiveis é uma lista de palavras possíveis.\n\n    Retorna uma lista das palavras possíveis que estão na lista de palavras.\n    \"\"\""
  },
  {
    "objectID": "aula_t4.html#filtrar_palavras_repetidas",
    "href": "aula_t4.html#filtrar_palavras_repetidas",
    "title": "Decomposição de Problemas",
    "section": "filtrar_palavras_repetidas",
    "text": "filtrar_palavras_repetidas\ndef filtrar_palavras_repetidas(palavras_reais):\n    \"\"\"\n    palavras_reais é uma lista de strings com palavras em português.\n\n    Retorna a lista sem palavras repetidas.\n    \"\"\"\n\nTestes:\n\numa palavra sugerida, várias palavras sugeridas e nenhuma palavra sugerida."
  },
  {
    "objectID": "aula_t4.html#obter_sugestoes_correcao",
    "href": "aula_t4.html#obter_sugestoes_correcao",
    "title": "Decomposição de Problemas",
    "section": "obter_sugestoes_correcao",
    "text": "obter_sugestoes_correcao\ndef obter_sugestoes_correcao(caminho_arquivo, possivel_palavra):\n    \"\"\"\n    caminho_arquivo é o nome de um arquivo que tem uma palavra \n    em português por linha.\n    possivel_palavra é  uma string que pode ser ou não uma \n    palavra real em português.\n\n    Retorna a lista de todas as possíveis correções únicas para \n    a possível palavra.\n    \"\"\"\n\nTestes:\n\nSituações que retornem uma sugestão, várias sugestões e nenhuma sugestão."
  },
  {
    "objectID": "aula_t4.html#corretor_ortografico",
    "href": "aula_t4.html#corretor_ortografico",
    "title": "Decomposição de Problemas",
    "section": "corretor_ortografico",
    "text": "corretor_ortografico\ndef corretor_ortografico(caminho_arquivo):\n    \"\"\"\n    caminho_arquivo é o nome de um arquivo que contém palavras \n    em português.\n\n    Pede ao usuário uma palavra e exibe todas as possíveis correções \n    para aquela palavra, uma por linha.\n    \"\"\"\n\nTestes:\n\nComo a função não retorna valores precisaríamos simular a interação com o usuário para testá-la.\nA biblioteca pytest tem funções avançadas para isso.\nMas esse não é o nosso foco aqui, então vamos testar manualmente."
  },
  {
    "objectID": "aula_t4.html#section-32",
    "href": "aula_t4.html#section-32",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Retornar uma lista contendo as palavras reais (as sugestões) sem repetições.\n\n\nFunção filtrar_palavras_repetidas. Mas por que ela seria necessária?\nPorque, dependendo da forma como geramos as palavras possíveis, podemos acabar com sugestões duplicadas.\nEx.: se a palavra digitada for suceso, podemos gerar sucesso duas vezes.\n\nUma ao tentar acrescentar um s depois do e,\ne outra ao tentar trocar um s após o s já existente na palavra."
  },
  {
    "objectID": "aula_t4.html#section-33",
    "href": "aula_t4.html#section-33",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Até o momento no design top-down pode ser demonstrado no diagrama abaixo.\n\n\n\n\n\nflowchart TD\n  A(corretor_ortografico) --&gt; B(obter_sugestoes_correcao)\n  B --&gt; C1(carregar_lista_palavras)\n  B --&gt; C2(gerar_palavras_possiveis)\n  B --&gt; C3(filtrar_palavras_reais)\n  B --&gt; C4(filtrar_palavras_repetidas)"
  },
  {
    "objectID": "aula_t4.html#section-34",
    "href": "aula_t4.html#section-34",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Múltiplas formas de decompor um problema\n\n\nNão há uma única forma correta de fazer um design top-down.\nVocê poderia ter pensado, por exemplo, em só gerar palavras que fossem reais, filtrando as palavras já no momento em que foram geradas.\n\nCom isso a divisão de subproblemas seria diferente.\nE é recomendável que você tente outras alternativas de decomposição para esse mesmo problema."
  },
  {
    "objectID": "aula_t4.html#section-35",
    "href": "aula_t4.html#section-35",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Decomposição é um processo de tentativa e erro\n\n\nÉ muito comum que comecemos com uma ideia de design top-down e, no meio do processo, percebamos que precisamos mudar nossa estratégia.\n\nTalvez porque em algum ponto ficou difícil dividir em subproblemas.\nOu porque chegamos a muitas funções que parecem muito específicas (e não seriam úteis para problemas mais gerais).\nOu ainda porque estamos passando muitos parâmetros para as funções ou passando um parâmetro de função em função repetidamente.\nOu, por fim, porque apenas queremos experimentar outra abordagem.\n\nA recomendação é: prática! Quanto mais praticar, mais habilidoso será no processo de decomposição."
  },
  {
    "objectID": "aula_t4.html#section-36",
    "href": "aula_t4.html#section-36",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Como saber quando parar de dividir em subtarefas?\n\n\nEm geral, saber quando para de decompor um subproblema é mais arte do que ciência.\nÉ necessária muita prática para adquirir a intuição de quando parar. Desenvolvedores experientes costumam já imaginar em sua cabeça como uma tarefa poderia ser resolvida para decidir se deve dividi-la ou não.\nMas tudo bem se não soubermos bem como fazer isso por agora. Podemos ter uma uma primeira versão do design e, durante a implementação, se uma função se torna mais complexa que o esperado, nós a dividimos em subtarefas. Por outro lado, se uma função ficou muito pequena e específica podemos reavaliar e não ter receio de juntá-la a outras funções."
  },
  {
    "objectID": "aula_t4.html#section-37",
    "href": "aula_t4.html#section-37",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Ao fazer o design, nós definimos as funções de cima para baixo (top-down).\n\nMas na hora de implementar é melhor escrever os códigos das funções de baixo para cima (bottom-up).\nPor que?\n\n\nIsso porque se gerarmos primeiro as funções de subproblemas finais usando Copilot,\n\nse torna mais provável que ele as utilize quando pedirmos para gerar o código das funções de subproblemas maiores."
  },
  {
    "objectID": "aula_t4.html#section-38",
    "href": "aula_t4.html#section-38",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "A estratégia do livro é focar na Decomposição de Problemas e, por isso, não segue cada passo do Ciclo de projeto de funções para cada função.\n\nMais especificamente, ele já apresenta a solução que preferiram, sem detalhar a Engenharia de Prompt utilizada.\ne não acrescentam os testes das funções.\n\n\nEu planejei aqui incluir pelo menos os testes de funções.\n\nQue é algo importante e geralmente subestimado pelos alunos, e até por professores 😜\nMas vamos ver se o tempo da aula vai permitir passar por tudo."
  },
  {
    "objectID": "aula_t4.html#section-39",
    "href": "aula_t4.html#section-39",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Já implementamos então a função que carrega as palavras.\n\nVamos agora para a próxima função folha: adicionar_letra.\n\n\n\n\n\n\nflowchart TD\n  A(corretor_ortografico) --&gt; B(obter_sugestoes_correcao)\n  B --&gt; C1(carregar_lista_palavras fa:fa-check)\n  B --&gt; C2(gerar_palavras_possiveis)\n  C2 --&gt; D1(adicionar_letra)\n  C2 --&gt; D2(remover_letra)\n  C2 --&gt; D3(trocar_letra)\n  B --&gt; C3(filtrar_palavras_reais)\n  B --&gt; C4(filtrar_palavras_repetidas)"
  },
  {
    "objectID": "aula_t4.html#gerar-a-lista-de-todas-as-palavras-possíveis-3",
    "href": "aula_t4.html#gerar-a-lista-de-todas-as-palavras-possíveis-3",
    "title": "Decomposição de Problemas",
    "section": "Gerar a lista de todas as palavras possíveis",
    "text": "Gerar a lista de todas as palavras possíveis\nPrecisamos quebrar ainda mais as tarefas anteriores?\n\nPara cada tarefa, parece que precisaremos fazer um loop nas letras da palavra e/ou no alfabeto\nE gerar uma palavra para cada combinação.\n\n\nPor ora, vamos manter as tarefas como estão.\n\nSe, durante a fase de implementação percebermos que as tarefas são mais complicadas que parecem nós quebramos novamente."
  },
  {
    "objectID": "aula_t4.html#gerar-a-lista-de-todas-as-palavras-reais-1",
    "href": "aula_t4.html#gerar-a-lista-de-todas-as-palavras-reais-1",
    "title": "Decomposição de Problemas",
    "section": "Gerar a lista de todas as palavras reais",
    "text": "Gerar a lista de todas as palavras reais\nPodemos pensar em um loop que percorre a lista de palavras candidatas.\n\nE, para cada uma delas, verifica se ela existe também na lista de palavras reais.\nSe existir é adicionada na lista de resposta.\n\n\nParece um problema simples o suficiente para ser tratado por uma única função."
  },
  {
    "objectID": "aula_t4.html#filtrar-palavras-repetidas-1",
    "href": "aula_t4.html#filtrar-palavras-repetidas-1",
    "title": "Decomposição de Problemas",
    "section": "Filtrar palavras repetidas",
    "text": "Filtrar palavras repetidas\nAcontece que Python tem uma função que remove duplicações de uma lista com uma linha de código.\n\nEntão se souber disso, você pode concluir que a função filtrar_palavras_repetidas é desnecessária."
  },
  {
    "objectID": "aula_t4.html#missão-cumprida",
    "href": "aula_t4.html#missão-cumprida",
    "title": "Decomposição de Problemas",
    "section": "Missão Cumprida 👏",
    "text": "Missão Cumprida 👏\nCompletamos nosso primeiro design top-down de um problema do mundo real.\n\nFizemos um gerador de sugestões de correção que faz o que vários desses sistemas fazem.\n\n\nO problema se tornou consideravelmente mais fácil de implementar,\n\npor que primeiro nós dividimos o problema em subproblemas."
  },
  {
    "objectID": "aula_t4.html#section-40",
    "href": "aula_t4.html#section-40",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "A próxima função agora será remover_letra.\n\n\n\n\n\nflowchart TD\n  A(corretor_ortografico) --&gt; B(obter_sugestoes_correcao)\n  B --&gt; C1(carregar_lista_palavras fa:fa-check)\n  B --&gt; C2(gerar_palavras_possiveis)\n  C2 --&gt; D1(adicionar_letra fa:fa-check)\n  C2 --&gt; D2(remover_letra)\n  C2 --&gt; D3(trocar_letra)\n  B --&gt; C3(filtrar_palavras_reais)\n  B --&gt; C4(filtrar_palavras_repetidas)"
  },
  {
    "objectID": "aula_t4.html#section-41",
    "href": "aula_t4.html#section-41",
    "title": "Decomposição de Problemas",
    "section": "",
    "text": "Como mencionamos no início, decomposição de problemas é mais arte que ciência.\n\nE, portanto, exige prática para fazer isso bem.\n\n\nAo longo da disciplina, aplicaremos a decomposição de problemas em outros exemplos\n\nO que te ajudará a ganhar mais experiência com essa habilidade tão importante."
  },
  {
    "objectID": "aula_p4.html#section",
    "href": "aula_p4.html#section",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "Encontrar e resolver bugs são algumas das principais atividades realizadas por um Engenheiro de Software.\n\nOs testes de código são essenciais para encontrarmos bugs em nossos sistemas.\nMas, uma vez que eles são encontrados, como podemos resolvê-los?"
  },
  {
    "objectID": "aula_p4.html#section-1",
    "href": "aula_p4.html#section-1",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "Claro que podemos usar o Copilot para nos ajudar a resolver bugs.\n\nMas é importante conseguirmos depurar nosso próprio código.\nSeja porque às vezes o Copilot não consegue nos ajudar.\nSeja porque às vezes é mais rápido e eficiente resolvermos o problema sozinhos, do que ficar gerando prompts e analisando as respostas do Copilot."
  },
  {
    "objectID": "aula_p4.html#section-2",
    "href": "aula_p4.html#section-2",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "Existem diversas formas de depurar nosso código.\n\nLendo o código.\nExplicando para alguém.\nIncluindo comandos print() (que depois precisam ser removidos).\nOu usando um depurador (debugger).\n\nQue é a forma mais recomendada!\nAlunos geralmente têm preguiça de usar, mas, quando entram em um estágio ou emprego, costumam perceber que depuradores são ferramentas essenciais para o dia-a-dia de um desenvolvedor."
  },
  {
    "objectID": "aula_p4.html#section-3",
    "href": "aula_p4.html#section-3",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "Vamos fazer um Quiz para verificar como (e se) vocês costumam usar depuradores.\n\nQuiz (obs.: apenas o professor consegue acessar esse link)."
  },
  {
    "objectID": "aula_p4.html#section-4",
    "href": "aula_p4.html#section-4",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "Como vocês não são alunos de início de curso, provavelmente já sabem usar um depurador.\n\nPara quem nunca usou o depurador do VS Code, é altamente recomendável que comece a usar.\n\nVocê pode começar com esse tutorial bem simples que uso em PPOO.\nE há bastante material disponível na internet.\n\nNão vamos trabalhar isso nessa aula.\n\nE vou considerar que, aqueles que ainda não usam, vão tratar isso como tarefa de casa."
  },
  {
    "objectID": "aula_p4.html#section-5",
    "href": "aula_p4.html#section-5",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "Na aula passada, sobre Decomposição de Problemas, fizemos o Design Top-Down de um programa para sugestões de correção.\n\nVamos agora levar o design top-down para outro nível,\npraticando essa habilidade em um problema muito maior."
  },
  {
    "objectID": "aula_p4.html#section-6",
    "href": "aula_p4.html#section-6",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "O processo, a princípio, será o mesmo:\n\nVamos dividir o problema em subproblemas.\nE dividir novamente os subproblemas, se necessário.\nVamos criar funções bem definidas, que recebam poucos parâmetros e retornem o resultado útil.\n\n\nMas, você verá que teremos uma novidade nesse caso:\n\nCriaremos funções que serão chamadas por mais de uma função.\nEvitando a replicação de código."
  },
  {
    "objectID": "aula_p4.html#programa-de-identificação-de-autoria",
    "href": "aula_p4.html#programa-de-identificação-de-autoria",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Programa de Identificação de Autoria",
    "text": "Programa de Identificação de Autoria\nA ideia nessa aula é desenvolvermos um programa que tenta identificar o autor desconhecido de um texto misterioso.\n\nVamos usar IA para fazer essa predição.\nNão vamos perder a oportunidade de usar IA em uma disciplina de Programação com Suporte de IA."
  },
  {
    "objectID": "aula_p4.html#ideia-geral",
    "href": "aula_p4.html#ideia-geral",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Ideia Geral",
    "text": "Ideia Geral\nBaseado no princípio desse exemplo, suponha que tenhamos:\n\num conjunto de textos de autores conhecidos.\ne o texto de um autor desconhecido\n\nPoderia ser uma obra nunca publicada, que foi encontrada por acaso com um colecionador, por exemplo.\nOu uma obra publicada com um pseudônimo, que pareça ter sido escrita por um autor conhecido.\n\n\n\nPrecisamos de uma forma que nos permita comparar o estilo de escrita dos autores conhecidos com o do autor desconhecido."
  },
  {
    "objectID": "aula_p4.html#inspiração",
    "href": "aula_p4.html#inspiração",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Inspiração",
    "text": "Inspiração\n\n\n\n\n\n\nTrecho 2\n\n\nIt was the Dover Road that lay on a Friday night late in November, before the first of the persons with whom this history has business. The Dover Road lay, as to him, beyond the Dover mail, as it lumbered up Shooter’s Hill. He walked up hill in the mire by the side of the mail, as the rest of the passen- gers did; not because they had the least relish for walking exercise, under the circumstances, but because the hill, and the harness, and the mud, and the mail, were all so heavy, that the horses had three times already come to a stop, besides once drawing the coach across the road, with the mutinous intent of taking it back to Blackheath. Reins and whip and coachman and guard, however, in combination, had read that article of war which forbade a purpose otherwise strongly in favour of the argument, that some brute animals are endued with Reason; and the team had capitulated and returned to their duty."
  },
  {
    "objectID": "aula_p4.html#inspiração-1",
    "href": "aula_p4.html#inspiração-1",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Inspiração",
    "text": "Inspiração\nSuponha que alguém te pergunte se é provável que esses dois trechos foram escritos pelo mesmo autor.\n\nComo você poderia responder a essa pergunta?\nApenas com base nos textos - não vale jogar no Google :)\n\n\nPodemos assumir uma premissa razoável de que autores diferentes têm estilo de escrita diferentes.\n\nE que essas diferenças aparecem em métricas que podemos calcular a partir dos textos."
  },
  {
    "objectID": "aula_p4.html#inspiração-2",
    "href": "aula_p4.html#inspiração-2",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Inspiração",
    "text": "Inspiração\nComo assim?\n\nPodemos notar, por exemplo, que o primeiro trecho tem frases mais curtas.\nE o segundo texto parece mais complexo se repararmos a quantidade de vírgulas e ponto-e-vírgulas.\n\n\nCom base nessa avaliação poderíamos concluir que os textos, provavelmente, foram escritos por autores diferentes.\n\nO que é verdade nesse caso.\nO autor do primeiro texto é Sir Arthur Conan Doyle e do segundo Charles Dickens.\nClaro que esse exemplo foi escolhido a dedo :)\n\nPode ser que o mesmo autor escreva diferente em trechos ou livros diferentes.\nMas, como não vamos fazer um programa perfeito, tudo bem."
  },
  {
    "objectID": "aula_p4.html#ideia-geral-1",
    "href": "aula_p4.html#ideia-geral-1",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Ideia Geral",
    "text": "Ideia Geral\nNossa estratégia será construir uma “impressão digital” (ou “assinatura”) do estilo de escrita de cada autor.\n\nCom base em um livro que ele tenha escrito.\nEssa impressão digital seria baseada em métricas que conseguimos calcular a partir do texto.\n\nComo o número médio de palavras por frase e a complexidade média das frases."
  },
  {
    "objectID": "aula_p4.html#programa-de-identificação-de-autoria-1",
    "href": "aula_p4.html#programa-de-identificação-de-autoria-1",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Programa de Identificação de Autoria",
    "text": "Programa de Identificação de Autoria\nA ideia nessa aula é desenvolvermos um programa que tenta identificar o autor desconhecido de um texto misterioso.\n\nVamos usar IA para fazer essa predição.\nNão vamos perder a oportunidade de usar IA em uma disciplina de Programação com Suporte de IA. 😁"
  },
  {
    "objectID": "aula_p4.html#ideia-geral-2",
    "href": "aula_p4.html#ideia-geral-2",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Ideia Geral",
    "text": "Ideia Geral\nUsaríamos o mesmo processo para construir a impressão digital do texto de autor desconhecido.\n\nE compararíamos a impressão digital do autor desconhecido com a dos autores conhecidos.\nAquele que tiver a impressão digital mais próxima, seria o autor mais provável do texto desconhecido."
  },
  {
    "objectID": "aula_p4.html#limitações",
    "href": "aula_p4.html#limitações",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Limitações",
    "text": "Limitações\nClaro que o texto de autor desconhecido pode ser de um autor completamente novo.\n\nOu pode ser que nossas métricas não capturem bem o estilo de escrita de cada autor.\nOu ainda que um mesmo autor escreva livros diferentes com estilos diferentes.\n\n\nPortanto, nosso programa não estará pronto para ser lançado no mercado 🙃\n\nDe todo modo, dada a dificuldade da tarefa, você ficará surpreso com o resultado que conseguiremos alcançar."
  },
  {
    "objectID": "aula_p4.html#section-7",
    "href": "aula_p4.html#section-7",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "Suponha que temos dois trechos de texto.\n\n\n\n\n\n\nTrecho 1\n\n\nI have not yet described to you the most singular part. About six years ago — to be exact, upon the 4th of May 1882 — an advertisement appeared in the Times asking for the address of Miss Mary Morstan and stating that it would be to her advantage to come forward. There was no name or address appended. I had at that time just entered the family of Mrs. Cecil Forrester in the capacity of governess. By her advice I published my address in the advertisement column. The same day there arrived through the post a small card-board box addressed to me, which I found to contain a very large and lustrous pearl. No word of writing was enclosed. Since then, every year upon the same date there has always appeared a similar box, containing a similar pearl, without any clue as to the sender. They have been pronounced by an expert to be of a rare variety and of considerable value. You can see for yourselves that they are very handsome."
  },
  {
    "objectID": "aula_p4.html#textos-disponíveis",
    "href": "aula_p4.html#textos-disponíveis",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Textos disponíveis",
    "text": "Textos disponíveis\nO projeto inicial disponibilizado tem uma pasta dados.\n\nDentro da pasta há uma pasta chamada autores_conhecidos com 5 arquivos de texto.\n\nCada arquivo é um livro diferente, escrito por um autor diferente.\nO título do arquivo é o nome do autor.\n\nHá também 4 arquivos de autores desconhecidos.\n\nCada arquivo é um trecho de texto, que pode ter sido escrito por qualquer um dos autores conhecidos.\nO nome do arquivo não indica o autor."
  },
  {
    "objectID": "aula_p4.html#métricas",
    "href": "aula_p4.html#métricas",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Métricas",
    "text": "Métricas\nA ideia é utilizar as seguintes métricas para construir a impressão digital de cada autor:\n\n\ntamanho médio das palavras\nnúmero de palavras diferentes dividido pelo número total de palavras\nnúmero de palavras usadas exatamente uma vez dividido pelo número total de palavras\nnúmero médio de palavras por frase\ncomplexidade média das frases\n\nA seguir vamos detalhar como calcular cada uma delas."
  },
  {
    "objectID": "aula_p4.html#tamanho-médio-das-palavras",
    "href": "aula_p4.html#tamanho-médio-das-palavras",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Tamanho médio das palavras",
    "text": "Tamanho médio das palavras\nA ideia aqui é diferenciar autores que usam, em média, palavras mais curtas ou mais longas.\n\nCalculamos o número total de letras das palavras e o número total de palavras do texto.\nE dividimos o primeiro pelo segundo.\n\n\n\nExemplo: “A chuva caía. O guarda-chuva tinha ficado em casa.”\n\nSão 40 letras e 9 palavras com um total.\nTamanho médio das palavras: 40 / 9 = 4.44\nObs.: para simplificar estamos considerando que o hífen conta como letra."
  },
  {
    "objectID": "aula_p4.html#número-de-palavras-diferentes-dividido-pelo-número-total-de-palavras",
    "href": "aula_p4.html#número-de-palavras-diferentes-dividido-pelo-número-total-de-palavras",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Número de palavras diferentes dividido pelo número total de palavras",
    "text": "Número de palavras diferentes dividido pelo número total de palavras\nA ideia dessa métrica é identificar autores que costumam ser repetitivos ou não.\n\nCalculamos o número de palavras diferentes que aparecem.\nE dividimos pelo número total de palavras do texto.\n\n\n\nEx.: Uma pérola! Uma pérola! Uma pérola brilhante! Rara. Que belo achado.\n\nTotal de palavras: 10\nPalavras diferentes: 7 (uma, pérola, brilhante, rara, que, belo, achado)\nResultado da métrica: 7 / 10 = 0.7"
  },
  {
    "objectID": "aula_p4.html#número-de-palavras-usadas-exatamente-uma-vez-dividido-pelo-número-total-de-palavras",
    "href": "aula_p4.html#número-de-palavras-usadas-exatamente-uma-vez-dividido-pelo-número-total-de-palavras",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Número de palavras usadas exatamente uma vez dividido pelo número total de palavras",
    "text": "Número de palavras usadas exatamente uma vez dividido pelo número total de palavras\nPode ser que alguns autores usem muitas palavras apenas uma vez, enquanto outros tendem a repetir mais as palavras.\n\nVamos calcular o número de palavras que aparecem exatamente uma vez no texto.\nE dividir pelo número total de palavras do texto.\n\n\n\nExemplo: Uma pérola! Uma pérola! Uma pérola brilhante! Rara. Que belo achado.\n\nNúmero total de palavras: 10\nPalavras usadas exatamente uma vez: 5 (brilhante, rara, que, belo, achado)\nResultado da métrica: 5 / 10 = 0.5"
  },
  {
    "objectID": "aula_p4.html#número-médio-de-palavras-por-frase",
    "href": "aula_p4.html#número-médio-de-palavras-por-frase",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Número médio de palavras por frase",
    "text": "Número médio de palavras por frase\nA ideia dessa métrica é identificar se o autor costuma escrever frases mais longas ou mais curtas.\n\nCalculamos o número total de palavras e o número total de frases do texto.\nE dividimos o primeiro pelo segundo.\n\n\n\nExemplo: “A chuva caía. O guarda-chuva tinha ficado em casa.”\n\nNúmero total de palavras: 9\nNúmero total de frases: 2\nNúmero médio de palavras por frase: 9 / 2 = 4.5"
  },
  {
    "objectID": "aula_p4.html#complexidade-média-das-frases",
    "href": "aula_p4.html#complexidade-média-das-frases",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Complexidade média das frases",
    "text": "Complexidade média das frases\nComentamos no exemplo inicial que um trecho de texto tinha frases mais curtas e outro mais longas.\n\nUma maneira que temos de medir a complexidade é verificar se as frases têm mais de uma oração.\n\n\nExemplo: “No mesmo dia chegou uma carta endereçada a mim, que parecia conter algo importante. Mas não tive coragem de abri-la.”\n\nVeja que a primeira frase tem duas orações, separadas pela vírgula.\nJá a segunda frase tem apenas uma oração."
  },
  {
    "objectID": "aula_p4.html#impressão-digital-de-cada-autor",
    "href": "aula_p4.html#impressão-digital-de-cada-autor",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Impressão Digital de cada autor",
    "text": "Impressão Digital de cada autor\nA impressão digital de cada autor será então dada pelo conjunto de métricas calculada a partir de um livro que ele tenha escrito.\n\nEm Aprendizado de Máquina, nós chamaríamos esse conjunto de vetor de características (features).\nPortanto, ela será dada por uma lista de 5 números, com os valores de cada métrica na ordem que definimos.\n\nExemplo: [4.44, 0.7, 0.5, 4.5, 1.5]\n\n\n\nOrdem das métricas:\n\ntamanho médio das palavras\nnúmero de palavras diferentes dividido pelo número total de palavras\nnúmero de palavras usadas exatamente uma vez dividido pelo número total de palavras\nnúmero médio de palavras por frase\ncomplexidade média das frases"
  },
  {
    "objectID": "aula_p4.html#identificando-o-autor-desconhecido",
    "href": "aula_p4.html#identificando-o-autor-desconhecido",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Identificando o autor desconhecido",
    "text": "Identificando o autor desconhecido\nPara identificar o autor desconhecido de um texto, faremos o seguinte:\n\nCalcularemos a impressão digital de cada autor conhecido.\nCalcularemos a impressão digital do texto de autor desconhecido.\n\nE a compararemos com a impressão digital de cada autor conhecido.\n\nO autor conhecido cuja impressão digital for mais próxima, será o autor mais provável do texto desconhecido.\n\n\nMas como será feita a comparação entre as impressões digitais?"
  },
  {
    "objectID": "aula_p4.html#identificando-o-autor-desconhecido-1",
    "href": "aula_p4.html#identificando-o-autor-desconhecido-1",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Identificando o autor desconhecido",
    "text": "Identificando o autor desconhecido\nSuponha que estamos comparando a impressão digital [4.44, 0.7, 0.5, 4.5, 1.5] com uma impressão digital de um autor desconhecido dada por [4.0, 0.5, 0.7, 4.0, 1.9].\n\nVamos calcular a diferença, em módulo, entre cada métrica.\n\nO resultado seria [0.44, 0.2, 0.2, 0.5, 0.4].\n\nE, em seguida, vamos calcular a soma ponderada dessas diferenças.\n\nOs pesos da soma seria: [11, 33, 50, 0.4, 4].\nO resultado seria então (0.44*11 + 0.2*33 + 0.2*50 + 0.5*0.4 + 0.4*4) = 23.24."
  },
  {
    "objectID": "aula_p4.html#identificando-o-autor-desconhecido-2",
    "href": "aula_p4.html#identificando-o-autor-desconhecido-2",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Identificando o autor desconhecido",
    "text": "Identificando o autor desconhecido\nMas de onde veio essa lista de pesos?\n\nOs autores do livro aplicaram esse exercício ao longo do tempo.\nE, empiricamente, descobriram que esses pesos funcionam bem para esse problema.\n\n\nObs.: em uma aplicação profissional de Aprendizado de Máquina, esses pesos seriam aprendidos a partir de um conjunto de dados de treinamento."
  },
  {
    "objectID": "aula_p4.html#identificando-o-autor-desconhecido-3",
    "href": "aula_p4.html#identificando-o-autor-desconhecido-3",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Identificando o autor desconhecido",
    "text": "Identificando o autor desconhecido\nVoltando à identificação do autor desconhecido:\n\nVimos que a comparação entre duas impressões digitais resulta em um número (score).\nE quanto menor esse número, menor a diferença entre as impressões digitais, certo?\nPortanto, o autor conhecido cuja comparação resulte no menor score será o autor mais provável do texto desconhecido."
  },
  {
    "objectID": "aula_p4.html#dica-para-a-fase-de-design",
    "href": "aula_p4.html#dica-para-a-fase-de-design",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Dica para a fase de design",
    "text": "Dica para a fase de design\n\nUma das operações necessárias é a contagem de palavras.\n\nPara isso, podemos usar a função split() da classe str.\nExemplo:\n\nUsando função split() no trecho “A chuva caía. O guarda-chuva tinha ficado em casa.”\nObteríamos as palavras: [\"A\", \"chuva\", \"caía.\", \"O\", \"guarda-chuva\", \"tinha\", \"ficado\", \"em\", \"casa.\"]\n\nMas veja que as palavras “caía.” e “caía” seriam consideradas diferentes.\n\nPrecisamos então tratar isso, removendo as pontuações das palavras.\nMas devemos tomar cuidado para não remover o hífen, que faz parte da palavra (como na palavra “guarda-chuva”).\nBastaria remover as pontuações apenas do início e do fim das palavras."
  },
  {
    "objectID": "aula_p4.html#section-8",
    "href": "aula_p4.html#section-8",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "Trecho 2\n\n\nIt was the Dover Road that lay on a Friday night late in November, before the first of the persons with whom this history has business. The Dover Road lay, as to him, beyond the Dover mail, as it lumbered up Shooter’s Hill. He walked up hill in the mire by the side of the mail, as the rest of the passengers did; not because they had the least relish for walking exercise, under the circumstances, but because the hill, and the harness, and the mud, and the mail, were all so heavy, that the horses had three times already come to a stop, besides once drawing the coach across the road, with the mutinous intent of taking it back to Blackheath. Reins and whip and coachman and guard, however, in combination, had read that article of war which forbade a purpose otherwise strongly in favour of the argument, that some brute animals are endued with Reason; and the team had capitulated and returned to their duty."
  },
  {
    "objectID": "aula_p4.html#section-9",
    "href": "aula_p4.html#section-9",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "Suponha que alguém te pergunte se é provável que esses dois trechos tenham sido escritos pelo mesmo autor.\n\nComo você poderia responder a essa pergunta?\nApenas com base nos textos - não vale jogar no Google 😜\n\n\nPodemos assumir uma premissa razoável de que autores diferentes têm estilo de escrita diferentes.\n\nE que essas diferenças aparecem em métricas que podemos calcular a partir dos textos."
  },
  {
    "objectID": "aula_p4.html#design-dos-autores-do-livro",
    "href": "aula_p4.html#design-dos-autores-do-livro",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Design dos autores do livro",
    "text": "Design dos autores do livro\nVocê já terminou mesmo seu design? Tem certeza?"
  },
  {
    "objectID": "aula_p4.html#section-10",
    "href": "aula_p4.html#section-10",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "Como assim?\n\nPodemos notar, por exemplo, que o primeiro trecho tem frases mais curtas.\nE o segundo texto parece mais complexo se repararmos a quantidade de vírgulas e ponto-e-vírgulas.\n\n\nCom base nessa avaliação poderíamos concluir que os textos, provavelmente, foram escritos por autores diferentes.\n\nO que é verdade nesse caso."
  },
  {
    "objectID": "aula_p4.html#section-11",
    "href": "aula_p4.html#section-11",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "O autor do primeiro texto é Sir Arthur Conan Doyle.\n\n \n\n\nE o autor do segundo texto é Charles Dickens."
  },
  {
    "objectID": "aula_p4.html#section-12",
    "href": "aula_p4.html#section-12",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "Nesse caso acertamos que são autores diferentes, mas o exemplo foi escolhido a dedo 🤭\n\nPode ser, por exemplo, que um mesmo autor escreva diferente em trechos ou livros diferentes.\nMas, como não vamos fazer um programa perfeito, tudo bem."
  },
  {
    "objectID": "aula_p4.html#section-13",
    "href": "aula_p4.html#section-13",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "A ideia nessa aula é que você mesmo faça o design top-down do programa.\n\nE use o Copilot para ajudar a implementar as funções que você definir.\n\n\nO livro da disciplina vai construindo o design e, à medida que avança, vai acrescentando mais detalhes sobre como o programa deve funcionar.\n\nComo quais métricas usar, por exemplo.\nMas como aqui é você quem fará o design, é necessário que você conheça esses detalhes antes de começar a fazer o design."
  },
  {
    "objectID": "aula_p4.html#section-14",
    "href": "aula_p4.html#section-14",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "A impressão digital de cada autor será então dada pelo conjunto de métricas calculada a partir de um livro que ele tenha escrito.\n\nEla será uma lista de 5 números, com os valores de cada métrica na ordem que definimos.\n\n\n\n\nExemplo: [4.44, 0.7, 0.5, 4.5, 1.5]\n\ntamanho médio das palavras\nnúmero de palavras diferentes dividido pelo número total de palavras\nnúmero de palavras usadas exatamente uma vez dividido pelo número total de palavras\nnúmero médio de palavras por frase\ncomplexidade média das frases\n\n\n\n\n\nEm Aprendizado de Máquina, nós chamaríamos esse conjunto de vetor de características (features)."
  },
  {
    "objectID": "aula_p4.html#section-15",
    "href": "aula_p4.html#section-15",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "É hora então de construir o design top-down do programa.\n\nRecomendo que façam em duplas, mas podem fazer individualmente se preferirem.\nLembre-se que o objetivo é praticar a habilidade de decomposição de problemas.\nDica: provavelmente você encontrará uma ou mais funções que são chamadas por mais de uma função."
  },
  {
    "objectID": "aula_p4.html#section-16",
    "href": "aula_p4.html#section-16",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "No próximo slide vou apresentar o design feito pelos autores do livro.\n\nMas atenção: é muito importante que você mesmo faça o design.\n\nNão adianta copiar o design de alguém ou usar o design mostrado a seguir.\n\nSomente depois que terminar o design, antes de implementar, você pode comparar com o design mostrado a seguir.\n\nE ver se há algo que você não tinha pensado.\n\nLembre-se que o design não precisa ser igual ao do livro.\n\nA ideia é apenas ajudar a identificar se você esqueceu de algo importante."
  },
  {
    "objectID": "aula_p4.html#complexidade-média-das-frases-1",
    "href": "aula_p4.html#complexidade-média-das-frases-1",
    "title": "Depuração e Decomposição de Problemas",
    "section": "Complexidade média das frases",
    "text": "Complexidade média das frases\nComo seria muito complicado realmente tentar identificar orações, vamos usar uma aproximação simples:\n\nVamos considerar que toda vírgula, ponto-e-vírgula ou dois-pontos indicam a separação de orações de uma frase.\nE vamos calcular o total de orações dividido pelo total de frases do texto.\n\nNo exemplo citado, o resultado da métrica seria: 3 / 2 = 1.5"
  },
  {
    "objectID": "aula_p4.html#section-17",
    "href": "aula_p4.html#section-17",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "Agora é hora de implementar o programa.\n\nA ideia é usar o Copilot para ajudar na implementação.\nVocê precisará também escrever testes para suas funções.\n\nPelo menos um caso de teste para cada função.\nO Copilot pode ajudar nisso também. Mas você precisa verificar se os testes estão corretos.\n\nDica: ao escrever o prompt/docstring de cada função, pense que ela poderia ser reutilizada futuramente em outros programas\n\nComo saber se o programa funciona corretamente?"
  },
  {
    "objectID": "aula_p4.html#section-18",
    "href": "aula_p4.html#section-18",
    "title": "Depuração e Decomposição de Problemas",
    "section": "",
    "text": "Você verá que os arquivos de autores desconhecidos têm o nome do autor dentro do arquivo.\n\nPortanto, você poderá verificar se o programa está funcionando corretamente. 😉\nE, claro, seu programa não pode usar essa informação para fazer a predição. 😏\n\n\nO exercício deve ser entregue no Campus Virtual até a data indicada."
  },
  {
    "objectID": "aula_t5.html#section",
    "href": "aula_t5.html#section",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "",
    "text": "O conteúdo dessa aula é baseado em materiais sobre o GitHub Copilot e o VS Code.\n\nIntrodução à engenharia de prompts com o GitHub Copilot\nUsando recursos avançados do Copilot\nPrompt engineering for Copilot Chat\nAsking GitHub Copilot questions in your IDE"
  },
  {
    "objectID": "aula_t5.html#o-que-é-engenharia-de-prompt",
    "href": "aula_t5.html#o-que-é-engenharia-de-prompt",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "O que é engenharia de Prompt?",
    "text": "O que é engenharia de Prompt?\n\nForma de comunicar ao Copilot o que você precisa.\n\nProcesso de elaborar instruções claras para guiar assistentes de IA.\n\nObjetivo\n\nGerar código adequado ao contexto e adaptado às necessidades específicas do projeto.\nGarantindo que seja correto sintática, funcional e contextualmente.\n\nQualidade do código gerado depende da clareza e precisão do prompt."
  },
  {
    "objectID": "aula_t5.html#princípios-da-engenharia-de-prompt-os-4-ss",
    "href": "aula_t5.html#princípios-da-engenharia-de-prompt-os-4-ss",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Princípios da engenharia de Prompt — os 4 Ss",
    "text": "Princípios da engenharia de Prompt — os 4 Ss\n\nSingle - Foco único\nSpecific - Específico\nShort - Curto\nSurround - Contexto"
  },
  {
    "objectID": "aula_t5.html#forneça-contexto-suficiente-1",
    "href": "aula_t5.html#forneça-contexto-suficiente-1",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "2. Forneça contexto suficiente",
    "text": "2. Forneça contexto suficiente"
  },
  {
    "objectID": "aula_t5.html#forneça-contexto-suficiente-2",
    "href": "aula_t5.html#forneça-contexto-suficiente-2",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "2. Forneça contexto suficiente",
    "text": "2. Forneça contexto suficiente\nRepare que no exemplo anterior foram dados mais detalhes mas ao mesmo tempo as instruções são curtas e objetivas.\n\nEsta prática segue o princípio curto, equilibrando detalhe com concisão para garantir clareza e precisão na comunicação."
  },
  {
    "objectID": "aula_t5.html#forneça-contexto-suficiente-3",
    "href": "aula_t5.html#forneça-contexto-suficiente-3",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "2. Forneça contexto suficiente",
    "text": "2. Forneça contexto suficiente\nVocê também pode controlar o que o Copilot considera como contexto.\n\nVocê pode, por exemplo, selecionar um trecho de código para que o Copilot gere código relacionado a esse trecho.\nAlém disso, o Copilot verifica os arquivos que estão atualmente abertos no editor para analisar o contexto.\n\nPortanto, mantenha arquivos relacionados abertos para fornecer contexto adicional (e feche os que não são relevantes)."
  },
  {
    "objectID": "aula_t5.html#forneça-contexto-suficiente-4",
    "href": "aula_t5.html#forneça-contexto-suficiente-4",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "2. Forneça contexto suficiente",
    "text": "2. Forneça contexto suficiente\nOutra sugestão é que se você já souber a biblioteca que pretende trabalhar, é melhor importá-la manualmente antes de pedir ao Copilot para gerar o código.\n\nEx.: se for usar o Pandas, importe-o antes de pedir para carregar os dados de um arquivo CSV.\nIsso direciona melhor o Copilot já que existem diferentes bibliotecas para manipulação de dados em Python."
  },
  {
    "objectID": "aula_t5.html#section-1",
    "href": "aula_t5.html#section-1",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "",
    "text": "Vamos ver agora algumas práticas recomendadas para criar prompts eficazes.\n\nForneça clareza suficiente\nForneça contexto suficiente\nForneça exemplos\nItere"
  },
  {
    "objectID": "aula_t5.html#forneça-exemplos",
    "href": "aula_t5.html#forneça-exemplos",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "3. Forneça exemplos",
    "text": "3. Forneça exemplos\nO uso de exemplos pode deixar mais claros seus requisitos e expectativas.\n\nIlustrando conceitos abstratos para o Copilot.\n\n\n# cria uma lista de números de exemplo\n# cria uma lista de números pares a partir da lista de números\n# retorna a lista de números\n# Exemplo: [1,2,3,4,5,6,7] -&gt; [2,4,6]"
  },
  {
    "objectID": "aula_t5.html#aprendizado-zero-shot",
    "href": "aula_t5.html#aprendizado-zero-shot",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Aprendizado Zero-Shot",
    "text": "Aprendizado Zero-Shot\nÉ quando o Copilot gera o código sem nenhum exemplo específico, confiando apenas em seu treinamento básico.\n\nEscrevemos o comentário do que queremos diretamente, sem exemplos."
  },
  {
    "objectID": "aula_t5.html#aprendizado-one-shot",
    "href": "aula_t5.html#aprendizado-one-shot",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Aprendizado One-Shot",
    "text": "Aprendizado One-Shot\nÉ fornecido um único exemplo, ajudando o modelo a gerar uma resposta mais sensível ao contexto.\n\nTalvez você já tenha uma função semelhante e queira uma variante, por exemplo."
  },
  {
    "objectID": "aula_t5.html#aprendizado-few-shot",
    "href": "aula_t5.html#aprendizado-few-shot",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Aprendizado Few-Shot",
    "text": "Aprendizado Few-Shot\nNesse métdodo, o Copilot é apresentado a vários exemplos, equilibrando a imprevisibilidade do zero-shot com a precisão do ajuste fino do one-shot.\n\nSuponha que deseje gerar um código que envie saudações ao usuário dependendo da hora do dia."
  },
  {
    "objectID": "aula_t5.html#section-2",
    "href": "aula_t5.html#section-2",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "",
    "text": "Dica\n\n\nDica: se estiver fazendo experimentações de código por você mesmo, pode ser interessante desabilitar temporariamente o Copilot, evitando que esses “experimentos” interfiram no contexto do Copilot.\n\n\n\n\n\n\n\n\n\nDica\n\n\nDica: mantenha uma boa qualidade de código. Aqui vale o princípio “garbage in, garbage out”. Ou seja, o contexto pode piorar se o código que você está escrevendo estiver com muitos erros ou for de baixa qualidade."
  },
  {
    "objectID": "aula_t5.html#fluxo-de-entrada",
    "href": "aula_t5.html#fluxo-de-entrada",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Fluxo de entrada",
    "text": "Fluxo de entrada"
  },
  {
    "objectID": "aula_t5.html#transmissão-segura-coleta-de-contexto",
    "href": "aula_t5.html#transmissão-segura-coleta-de-contexto",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "1. Transmissão segura + Coleta de contexto",
    "text": "1. Transmissão segura + Coleta de contexto\n\nPrompts transmitidos via HTTPS (seguro e confidencial).\nSimultaneamente, o Copilot coleta detalhes do ambiente:\n\nCódigo antes e depois do cursor (contexto).\nNome e tipo do arquivo que está sendo editado.\nAbas adjacentes abertas, para que a suestão se alinhe a outros trechos de código do mesmo projeto.\nInformações sobre a estrutura do projeto e caminhos de arquivos.\nInformações sobre linguagnes de programação e frameworks usados."
  },
  {
    "objectID": "aula_t5.html#filtro-de-proxy",
    "href": "aula_t5.html#filtro-de-proxy",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "2. Filtro de proxy",
    "text": "2. Filtro de proxy\nPrompt passa por servidor proxy no Azure (mantido pelo GitHub).\n\nFiltra tráfego malicioso\nbloqueando tentativas de manipulação do prompt\nou ataques de injeção para obter detalhes sobre como o modelo gera as sugestões de código."
  },
  {
    "objectID": "aula_t5.html#filtragem-de-toxicidade",
    "href": "aula_t5.html#filtragem-de-toxicidade",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "3. Filtragem de toxicidade",
    "text": "3. Filtragem de toxicidade\nAntes da geração, Copilot utiliza filtros para que o código gerado não inclua e nem promova:\n\nDiscurso de ódio ou conteúdo inapropriado (que pode ser ofensivo, por exemplo).\nDados pessoais (nomes, endereços, IDs) para preteger a privacidade e a segurança dos dados do usuário."
  },
  {
    "objectID": "aula_t5.html#geração-de-código-com-o-modelo-llm",
    "href": "aula_t5.html#geração-de-código-com-o-modelo-llm",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "4. Geração de código com o modelo LLM",
    "text": "4. Geração de código com o modelo LLM\n\nPrompt filtrado → enviado para modelos de linguagem (LLMs).\nAs sugestões são baseadas no entendimento do Copilot tanto do prompt quanto do contexto,\npara produzir resultados que sejam relevantes, funcionais e alinhados aos requisitos específicos do projeto."
  },
  {
    "objectID": "aula_t5.html#fluxo-de-saída",
    "href": "aula_t5.html#fluxo-de-saída",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Fluxo de Saída",
    "text": "Fluxo de Saída\n![] (imagens/engprompt-3-github-copilot-outbound-flow.png){fig-align=“center” fig-alt=“Fluxo de saída do processamento de prompts do GitHub Copilot.” style=“max-height: 60vh;”}"
  },
  {
    "objectID": "aula_t5.html#pós-processamento-e-validação-da-resposta",
    "href": "aula_t5.html#pós-processamento-e-validação-da-resposta",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "5. Pós-processamento e validação da resposta",
    "text": "5. Pós-processamento e validação da resposta\nFiltro de toxicidade aplicado novamente sobre o código gerado.\n\nVerificações adicionais feitas pelo servidor de proxy:\n\nQualidade do código: verificação de bugs, vulnerabilidades comuns (como cross-site scripting XSS, ou injeção de SQL).\n\nObjetivo é tentar garantir robustez e segurança."
  },
  {
    "objectID": "aula_t5.html#entrega-de-sugestões-e-início-do-ciclo-de-feedback",
    "href": "aula_t5.html#entrega-de-sugestões-e-início-do-ciclo-de-feedback",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "6. Entrega de sugestões e início do ciclo de feedback",
    "text": "6. Entrega de sugestões e início do ciclo de feedback\n\nApenas respostas aprovadas chegam ao usuário.\nCopilot inicia seu ciclo de feedback baseado em ações do usuário.\n\nPara aumentar seu próprio conhecimento com base nas sugestões aceitas.\nPara aprender e se aprimorar por meio de modificações e rejeições das sugestões."
  },
  {
    "objectID": "aula_t5.html#repetição-para-prompts-subsequentes",
    "href": "aula_t5.html#repetição-para-prompts-subsequentes",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "7. Repetição para prompts subsequentes",
    "text": "7. Repetição para prompts subsequentes\nO processo é repetido à medida que o usuário forneça mais prompts.\n\nCom o tempo o Copilot aplica os dados acumulados de feedback e de interação.\nIncluindo os detalhes de contexto fornecidos.\nPara aprimorar o seu entendimento da intenção do usuário e refiniar seus recursos de geração de código."
  },
  {
    "objectID": "aula_t5.html#tratamento-de-dados-sugestões-de-código",
    "href": "aula_t5.html#tratamento-de-dados-sugestões-de-código",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Tratamento de dados — Sugestões de código",
    "text": "Tratamento de dados — Sugestões de código\n\nCopilot no editor de código não retém solicitações.\nCódigo, comentários e contexto são usados apenas no momento da sugestão.\nApós gerar a sugestão → solicitações são descartadas.\nAssinantes individuais podem recusar o compartilhamento de dados com o GitHub para treinar modelos."
  },
  {
    "objectID": "aula_t5.html#tratamento-de-dados-copilot-chat",
    "href": "aula_t5.html#tratamento-de-dados-copilot-chat",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Tratamento de dados — Copilot Chat",
    "text": "Tratamento de dados — Copilot Chat\n\nFunciona como plataforma interativa, com histórico de conversas.\nDifere das sugestões de código (autocomplete):\n\nFormatação: respostas adaptadas à interface de chat, como realce de código.\nParticipação do usuário: permite perguntas de acompanhamento e refinamento.\nRetenção: solicitações/sugestões/contexto podem ser mantidos por até 28 dias (varia conforme o editor)."
  },
  {
    "objectID": "aula_t5.html#tipos-de-solicitações-no-copilot-chat",
    "href": "aula_t5.html#tipos-de-solicitações-no-copilot-chat",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Tipos de solicitações no Copilot Chat",
    "text": "Tipos de solicitações no Copilot Chat\n\nPerguntas diretas: conceitos, bibliotecas, dúvidas pontuais.\n\nEx.: “Como implementar quicksort em Python?”\n\nSolicitações relacionadas ao código: geração, modificação, explicação.\n\nEx.: “Explique este trecho de código.”\n\nConsultas abertas: boas práticas, dicas gerais.\n\nEx.: “Como melhorar o desempenho de um app Python?”\n\nSolicitações contextuais: forneça código ou cenários para ajuda personalizada.\n\nEx.: “Aqui está parte do meu código, sugira melhorias.”"
  },
  {
    "objectID": "aula_t5.html#limitações-janelas-de-contexto",
    "href": "aula_t5.html#limitações-janelas-de-contexto",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Limitações — Janelas de contexto",
    "text": "Limitações — Janelas de contexto\n\nJanela de contexto = quantidade de código/texto que o modelo processa simultaneamente.\nIsso inclui não só o prompt utilizado, mas também o contexto do arquivo e do projeto.\nLimitação pode variar conforme versão e implementação."
  },
  {
    "objectID": "aula_t5.html#o-que-são-llms",
    "href": "aula_t5.html#o-que-são-llms",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "O que são LLMs?",
    "text": "O que são LLMs?\n\nModelos de IA treinados para entender, gerar e manipular linguagem natural.\n\nVolume de dados de treinamento: bilhões de tokens de texto de diversas fontes.\n\nCompreensão contextual: produzem respostas relevantes e coerentes.\n\nBase em aprendizado de máquina: redes neurais com milhões ou bilhões de parâmetros.\n\nVersatilidade: aplicáveis a múltiplos domínios e idiomas."
  },
  {
    "objectID": "aula_t5.html#ajuste-fino-de-llms",
    "href": "aula_t5.html#ajuste-fino-de-llms",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Ajuste fino de LLMs",
    "text": "Ajuste fino de LLMs\n\nProcesso que adapta modelos pré-treinados a tarefas específicas.\n\nUtiliza:\n\nModelo de origem → conhecimento amplo, pré-treinado.\n\nConjunto de dados de destino → dados específicos da tarefa.\n\n\nBenefício: melhora a precisão em contextos especializados."
  },
  {
    "objectID": "aula_t5.html#ajuste-fino-de-llms-1",
    "href": "aula_t5.html#ajuste-fino-de-llms-1",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Ajuste fino de LLMs",
    "text": "Ajuste fino de LLMs"
  },
  {
    "objectID": "aula_t5.html#ajuste-fino-lora",
    "href": "aula_t5.html#ajuste-fino-lora",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Ajuste fino LoRA",
    "text": "Ajuste fino LoRA\n\nLoRA = Low-Rank Adaptation.\n\nEm vez de ajustar todos os parâmetros da rede:\n\nAdiciona módulos menores treináveis em cada camada.\n\nMantém o modelo original inalterado.\n\n\nVantagens:\n\nMais rápido e econômico\n\nMais eficiente que adaptadores e prefix tuning\n\n“Trabalhar de forma mais inteligente, não mais difícil”"
  },
  {
    "objectID": "aula_t5.html#o-que-é-o-github-copilot",
    "href": "aula_t5.html#o-que-é-o-github-copilot",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "1. O que é o GitHub Copilot?",
    "text": "1. O que é o GitHub Copilot?\n\nUma plataforma para os repositórios de código.\nUm modelo alimentado pelo aprendizado de máquina.\nUm assistente para codificação.\nUm serviço para hospedagem na Web."
  },
  {
    "objectID": "aula_t5.html#qual-é-a-função-do-prompt-na-utilização-eficaz-do-github-copilot",
    "href": "aula_t5.html#qual-é-a-função-do-prompt-na-utilização-eficaz-do-github-copilot",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "2. Qual é a função do prompt na utilização eficaz do GitHub Copilot?",
    "text": "2. Qual é a função do prompt na utilização eficaz do GitHub Copilot?\n\nGera correções instantâneas de bugs.\nAprimora a qualidade das sugestões de código.\nAutomatiza totalmente o processo de codificação.\nImplementa a colaboração em tempo real."
  },
  {
    "objectID": "aula_t5.html#qual-das-regras-a-seguir-é-um-dos-princípios-do-método-4s-da-engenharia-de-prompt",
    "href": "aula_t5.html#qual-das-regras-a-seguir-é-um-dos-princípios-do-método-4s-da-engenharia-de-prompt",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "3. Qual das regras a seguir é um dos princípios do Método 4S da engenharia de Prompt?",
    "text": "3. Qual das regras a seguir é um dos princípios do Método 4S da engenharia de Prompt?\n\nResuma os objetivos do código de forma concisa.\nEspecifique as instruções de forma explícita e em detalhes.\nSimplifique os processos para obter sugestões de código eficientes.\nSimplifique as linguagens de codificação para entendimento universal."
  },
  {
    "objectID": "aula_t5.html#como-o-github-copilot-trata-os-dados-pessoais",
    "href": "aula_t5.html#como-o-github-copilot-trata-os-dados-pessoais",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "4. Como o GitHub Copilot trata os dados pessoais?",
    "text": "4. Como o GitHub Copilot trata os dados pessoais?\n\nSalva todos os dados pessoais para referências futuras.\nCompartilha dados pessoais com outros usuários para projetos colaborativos.\nCriptografa dados pessoais.\nFiltra ativamente os dados pessoais para proteger a privacidade do usuário."
  },
  {
    "objectID": "aula_t5.html#o-que-é-lora-no-contexto-de-llms-modelos-de-linguagem-grandes-de-ajuste-fino",
    "href": "aula_t5.html#o-que-é-lora-no-contexto-de-llms-modelos-de-linguagem-grandes-de-ajuste-fino",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "5. O que é LoRA no contexto de LLMs (Modelos de Linguagem Grandes) de ajuste fino?",
    "text": "5. O que é LoRA no contexto de LLMs (Modelos de Linguagem Grandes) de ajuste fino?\n\nUm método que adiciona elementos treináveis a cada camada do modelo pré-treinado sem uma revisão completa.\nUma tecnologia que otimiza a comunicação entre diferentes linguagens de codificação.\nUma biblioteca de software especializada que aprimora o desempenho do Copilot.\nUm novo paradigma de programação com suporte exclusivo do Copilot."
  },
  {
    "objectID": "aula_t5.html#como-o-copilot-usa-o-contexto-para-fornecer-sugestões-de-código",
    "href": "aula_t5.html#como-o-copilot-usa-o-contexto-para-fornecer-sugestões-de-código",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "6. Como o Copilot usa o contexto para fornecer sugestões de código?",
    "text": "6. Como o Copilot usa o contexto para fornecer sugestões de código?\n\nConsidera apenas o texto do prompt que você fornece.\nConsidera o tipo de arquivo, mas não o conteúdo do arquivo.\nConsidera o código ao redor, o tipo de arquivo e o conteúdo das guias abertas paralelamente no editor de código.\nSeleciona aleatoriamente o contexto da Internet."
  },
  {
    "objectID": "aula_t5.html#qual-das-seguintes-estratégias-ajuda-a-melhorar-a-eficácia-do-prompt-no-github-copilot",
    "href": "aula_t5.html#qual-das-seguintes-estratégias-ajuda-a-melhorar-a-eficácia-do-prompt-no-github-copilot",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "7. Qual das seguintes estratégias ajuda a melhorar a eficácia do prompt no GitHub Copilot?",
    "text": "7. Qual das seguintes estratégias ajuda a melhorar a eficácia do prompt no GitHub Copilot?\n\nFornecer informações contextuais detalhadas com clareza.\nTornar o prompt o mais geral possível.\nManter o prompt longo e detalhado.\nEvitar exemplos no prompt para não restringir a criatividade do Copilot."
  },
  {
    "objectID": "aula_t5.html#prompts-implícitos-slash-commands",
    "href": "aula_t5.html#prompts-implícitos-slash-commands",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Prompts implícitos (slash commands)",
    "text": "Prompts implícitos (slash commands)\nPodemos usar opções do Copilot fornecem prompts implícitos prédefinidos que podem melhorar a resposta.\n\n/doc — adiciona comentários ao código especificado ou selecionado.\n/explain — obtém explicações sobre o código.\n/fix — para correção de bugs.\n/generate — gera código para responder a um dado prompt.\n/help — obtém ajuda sobre como usar o chat do Copilot.\n/optimize — analisa e melhora o tempo de execução do código selecionado.\n/tests — cria testes unitários para o código selecionado."
  },
  {
    "objectID": "aula_t5.html#prompts-implícitos-slash-commands-1",
    "href": "aula_t5.html#prompts-implícitos-slash-commands-1",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Prompts implícitos (slash commands)",
    "text": "Prompts implícitos (slash commands)\nEsses comandos facilitam a interação com o Copilopt,\n\npermitindo que sejam geradas respostas melhores sem ter que escrever prompts mais longos.\n\n\n\n\n\n\n\n\nDica\n\n\nCombine os comandos com o prompt que você deseja usar.\nExemplo: /explain como a biblioteca Pandas é usada neste código."
  },
  {
    "objectID": "aula_t5.html#contexto-seletivo-chat-participants",
    "href": "aula_t5.html#contexto-seletivo-chat-participants",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Contexto seletivo: chat participants",
    "text": "Contexto seletivo: chat participants\nNós vimos como o Copilot considera o contexto do código que está sendo trabalhado.\n\nMas você pode também dizer explicitamente ao Copilot qual contexto deve ser considerado.\n\n\nPor exemplo, suponha que você precise gerar um Dockerfile para seu projeto Python.\n\nÉ um arquivo especial que contém instruções específicas que facilitam a execução do seu projeto em diferentes ambientes.\nVocê pode usar o agente @workspace para indicar que o Copilot deve considerar o contexto de todo o projeto.\n\n@workspace Preciso criar um Dockerfile para este projeto.\nProvavelmente o Copilot vai gerar explicações sobre o que é um Dockerfile e como ele funciona e, em seguida, sugerir um Dockerfile adequado ao seu projeto."
  },
  {
    "objectID": "aula_t5.html#contexto-seletivo-chat-participants-1",
    "href": "aula_t5.html#contexto-seletivo-chat-participants-1",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Contexto seletivo: chat participants",
    "text": "Contexto seletivo: chat participants\nAlém do agente @workspace, você pode usar outros agentes para obter sugestões baseadas em contextos específicos:\n\n@terminal — fornece sugestões baseadas na saída do terminal.\n\nEx.: @terminal Como corrigir a mensagem de erro que estou vendo.\n\n@vscode — para saber mais sobre os recursos e APIs do VS Code.\n\nEx.: @vscode como eu mudo as cores do VS Code?"
  },
  {
    "objectID": "aula_t5.html#contexto-seletivo-chat-variables",
    "href": "aula_t5.html#contexto-seletivo-chat-variables",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Contexto seletivo: chat variables",
    "text": "Contexto seletivo: chat variables\nAo usar agentes como @workspace ou @vscode, por exemplo, você pode usar variáveis para referenciar contextos mais específicos.\n\nVariáveis de chat são referenciadas com prefixo #.\nVocê pode usar por exemplo #main.py ou #utils para referenciar arquivos ou pastas específicas do projeto.\n\n\nVocê também pode arrastar um arquivo para a janela do chat do Copilot.\n\nOu clicar no ícone de clipe de papel para anexar arquivos."
  },
  {
    "objectID": "aula_t5.html#modos-de-uso-do-chat-copilot",
    "href": "aula_t5.html#modos-de-uso-do-chat-copilot",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Modos de uso do Chat Copilot",
    "text": "Modos de uso do Chat Copilot\nNo canto inferior esquerdo da janela do chat do Copilot, você pode escolher entre três modos de uso:\n\nAsk\n\nPara perguntas gerais e explicações.\nPossíveis sugestões de código aparecem no Chat e você precisa copiar e colar no editor."
  },
  {
    "objectID": "aula_t5.html#histórico-do-chat-do-copilot",
    "href": "aula_t5.html#histórico-do-chat-do-copilot",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Histórico do Chat do Copilot",
    "text": "Histórico do Chat do Copilot\nO Copilot mantém um histórico das conversas que você teve com ele.\n\nVocê pode acessar esse histórico clicando no ícone de relógio no canto superior esquerdo da janela do chat.\nIsso permite que você revise conversas anteriores, reutilize prompts eficazes e acompanhe o progresso de suas interações com o Copilot ao longo do tempo."
  },
  {
    "objectID": "aula_t5.html#avançado-customização-do-copilot",
    "href": "aula_t5.html#avançado-customização-do-copilot",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Avançado: customização do Copilot",
    "text": "Avançado: customização do Copilot\nVocê pode customizar o comportamento do Copilot de diferentes formas.\n\nCom instruções customizadas (para todo o projeto ou para contextos específicos, como todos arquivos .py).\nCom arquivos de prompt para reutilização em tarefas repetitivas.\nCom modos de chat customizados (além de Ask, Edit e Agent).\nEscolhendo diferentes modelos de LLM (se sua assinatura permitir)."
  },
  {
    "objectID": "aula_t5.html#princípios-da-engenharia-de-prompt-os-4-ss-1",
    "href": "aula_t5.html#princípios-da-engenharia-de-prompt-os-4-ss-1",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Princípios da engenharia de Prompt — os 4 Ss",
    "text": "Princípios da engenharia de Prompt — os 4 Ss\n\nFoco único (single)\n\nFoque em uma tarefa ou pergunta única e bem definida.\nEssa clareza é fundamental para obter respostas precisas e úteis.\n\nEspecífico (specific)\n\nDê instruções explícitas e detalhadas.\nEspecificidade leva a sugestões mais precisas e aplicáveis."
  },
  {
    "objectID": "aula_t5.html#princípios-da-engenharia-de-prompt-os-4-ss-2",
    "href": "aula_t5.html#princípios-da-engenharia-de-prompt-os-4-ss-2",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Princípios da engenharia de Prompt — os 4 Ss",
    "text": "Princípios da engenharia de Prompt — os 4 Ss\n\nCurto (short)\n\nSeja conciso: ser específico, mas direito ao ponto.\nA ideia é garantir clareza sem sobrecarregar o Copilot ou complicar a interação.\n\nContextual (surround)\n\nUse nomes de arquivos descritivos e mantenha arquivos relacionados abertos no editor.\nIsso dá contexto rico ao Copilot, levando a sugestões mais relevantes."
  },
  {
    "objectID": "aula_t5.html#forneça-clareza-suficiente",
    "href": "aula_t5.html#forneça-clareza-suficiente",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "1. Forneça clareza suficiente",
    "text": "1. Forneça clareza suficiente\nExemplo\nEscreva uma função Python que receba uma lista de inteiros e \nretorne uma nova lista contendo apenas os números pares.\n\nEsse prompt tem foco único, é específico e conciso.\n\n\nAqui vale tudo que já vimos antes sobre decomposição de problemas."
  },
  {
    "objectID": "aula_t5.html#forneça-contexto-suficiente",
    "href": "aula_t5.html#forneça-contexto-suficiente",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "2. Forneça contexto suficiente",
    "text": "2. Forneça contexto suficiente\nQuanto mais informação contextual for fornecida, mais aderente será a sugestão do Copilot.\n\nEx.: Comentários no topo do arquivo dão mais detalhes sobre o que você quer.\n\n\n# Escreva um app Flask que retorna uma lista de números pares a partir de uma lista de números\n# Crie uma função que pega uma lista de números e retorne somente os números pares\n# Crie uma lista de números de exemplo\n# Crie uma lista de números pares a partir da lista de números\n# retorna a lista de números"
  },
  {
    "objectID": "aula_t5.html#forneça-contexto-suficiente-5",
    "href": "aula_t5.html#forneça-contexto-suficiente-5",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "2. Forneça contexto suficiente",
    "text": "2. Forneça contexto suficiente\nUtilize nomes de funções e classes descritivos.\n\nIsso ajuda o Copilot a entender melhor o propósito do código.\nE, claro, comentários docstring fornecem contexto ainda mais específico."
  },
  {
    "objectID": "aula_t5.html#forneça-contexto-suficiente-6",
    "href": "aula_t5.html#forneça-contexto-suficiente-6",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "2. Forneça contexto suficiente",
    "text": "2. Forneça contexto suficiente\nForneça exemplos de código.\n\nSe for trabalhar com uma nova biblioteca, e o Copilot gerar respostas de outras ou de versões antigas,\nforneça um exemplo de uso da nova biblioteca mesmo que não seja o que você quer fazer.\nIsso ajuda o Copilot a gerar código para a versão mais recente da biblioteca.\n(e depois apague o código de exemplo que colocou)."
  },
  {
    "objectID": "aula_t5.html#itere",
    "href": "aula_t5.html#itere",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "4. Itere",
    "text": "4. Itere\nUma das chaves para desbloquear todo o potencial do Copilot é a prática da iteração.\n\nNem sempre seu primeiro prompt produzirá um código perfeito.\nSe a primeira saída não for ideal, trate-a como uma etapa de um diálogo.\nApague o código, melhore o comentário inicial com detalhes e exemplos e deixe o Copilot tentar novamente."
  },
  {
    "objectID": "aula_t5.html#itere-1",
    "href": "aula_t5.html#itere-1",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "4. Itere",
    "text": "4. Itere\n\n\n\n\n\n\nDica\n\n\nUsando o chat com Ctrl+I, você pode pedir ao Copilot para melhorar o código que ele mesmo gerou.\nEx.: “Adicione uma função de fibonacci”, na mesma caixa, se necessário, pode continuar com instruções como “não use recursão” e depois “melhore os nomes das variáveis”."
  },
  {
    "objectID": "aula_t5.html#section-3",
    "href": "aula_t5.html#section-3",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "",
    "text": "O Copilot usa modelos de IA que foram treinados com grande quantidades de dados.\n\nPara melhorar seu reconhecimento em contextos de código específicos, geralmente fornecemos exemplos.\n\n\nEssa prática é inspirada em técnicas de aprendizado de máquina.\n\nAprendizado Zero-Shot.\nAprendizado One-Shot.\nAprendizado Few-shot."
  },
  {
    "objectID": "aula_t5.html#section-4",
    "href": "aula_t5.html#section-4",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "",
    "text": "Vamos agora ver como o Copilot transforma nossos prompts em códigos utilizáveis.\n\nRepare que é um processo de entrada (processamento do prompt) e saída (código gerado)."
  },
  {
    "objectID": "aula_t5.html#aprendizado-few-shot-1",
    "href": "aula_t5.html#aprendizado-few-shot-1",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Aprendizado Few-Shot",
    "text": "Aprendizado Few-Shot"
  },
  {
    "objectID": "aula_t5.html#pós-processamento-e-validação-da-resposta-1",
    "href": "aula_t5.html#pós-processamento-e-validação-da-resposta-1",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "5. Pós-processamento e validação da resposta",
    "text": "5. Pós-processamento e validação da resposta\n\nCorrespondência com código público (opcional)\n\nAdministradores podem habilitar um filtro que impede o Copilot de retornar sugestões com mais de ~150 caracteres que sejam muito semelhantes a trechos de código públicos existentes no GiHub.\nObjetivo é evitar sugestão de código que seja coincidente com conteúdo original.\n\n\n\nSe o código gerado falhar nessas verificações → pode ser truncada ou descartado."
  },
  {
    "objectID": "aula_t5.html#section-5",
    "href": "aula_t5.html#section-5",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "",
    "text": "O GitHub Copilot é alimentado por LLMs (Large Language Models).\n\nEles permitem escrever código de forma integrada e com reconhecimento de contexto."
  },
  {
    "objectID": "aula_t5.html#contexto-seletivo-chat-participants-2",
    "href": "aula_t5.html#contexto-seletivo-chat-participants-2",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Contexto seletivo: chat participants",
    "text": "Contexto seletivo: chat participants\n\n@github — expande as informações que o Copilot pode fornecer.\n\nDica: use @github what skills are available? para saber como usar esse agente.\n\nEm portugês essa pergunta não funciona :( … mas a resposta vem em português.\n\nPode, por exemplo, fazer busca em repositórios ou em histórico de commits.\n\n@data — permite fazer análise dados no próprio chat do Copilot.\n\nEx.: @data crie um gráfico de barras a partir deste arquivo CSV."
  },
  {
    "objectID": "aula_t5.html#contexto-seletivo-chat-participants-3",
    "href": "aula_t5.html#contexto-seletivo-chat-participants-3",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Contexto seletivo: chat participants",
    "text": "Contexto seletivo: chat participants\n\n\n\n\n\n\nDica\n\n\nExtensões do VS Code podem adicionar participantes específicos ao Copilot."
  },
  {
    "objectID": "aula_t5.html#modos-de-uso-do-chat-copilot-1",
    "href": "aula_t5.html#modos-de-uso-do-chat-copilot-1",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Modos de uso do Chat Copilot",
    "text": "Modos de uso do Chat Copilot\nEdit\n\nPara atualização rápida e específica de um conjunto definido de arquivos.\nPermite controle mais granular sobre as edições propostas pelo Copilot.\nPossibilitando assim controle total sobre o número de solicitações de LLM que o Copilot usa."
  },
  {
    "objectID": "aula_t5.html#modos-de-uso-do-chat-copilot-2",
    "href": "aula_t5.html#modos-de-uso-do-chat-copilot-2",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Modos de uso do Chat Copilot",
    "text": "Modos de uso do Chat Copilot\nAgent\n\nQuando quiser que o Copilot trate uma tarefa específica de modo autônomo.\nO próprio Copilot decide quais arquivos editar e como.\nPode sugerir comandos a serem executados no terminal (você precisa revisar e aprovar).\nFunciona em modo interativo até que a tarefa seja concluída.\nTem impactos nos custos, pois cada interação pode consumir várias solicitações de LLM."
  },
  {
    "objectID": "aula_t5.html#histórico-do-chat-do-copilot-1",
    "href": "aula_t5.html#histórico-do-chat-do-copilot-1",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Histórico do Chat do Copilot",
    "text": "Histórico do Chat do Copilot\n\n\n\n\n\n\nDica\n\n\nSe for começar uma nova tarefa que não tem relação com o que você estava fazendo, é melhor começar uma nova conversa clicando no ícone de mais (+) no canto superior esquerdo."
  },
  {
    "objectID": "aula_t5.html#avançado-customização-do-copilot-1",
    "href": "aula_t5.html#avançado-customização-do-copilot-1",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Avançado: customização do Copilot",
    "text": "Avançado: customização do Copilot\n\nUsando servidores MCP que permite conectar serviços externos e ferramentas especilizados aumentando as capacidades do Copilot.\n\n\nNão entraremos em detalhes aqui.\n\nPara quem quiser saber mais acesse Customize chat to your workflow."
  },
  {
    "objectID": "aula_t5.html#section-6",
    "href": "aula_t5.html#section-6",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "",
    "text": "Generalização de funções:\n\nAo escrever funções, tente torná-las o mais genéricas possível.\nIsso começa pelo prório prompt e/ou docstring da função.\n\n\nExemplo:\nSe você tem uma função que recebe uma lista de dados e faz algum processamento.\n\nEssa função não precisa se preocupar sobre como os dados foram obtidos.\nO que ela precisa deixar claro é o formato dos dados que ela espera.\nCom isso ela pode ser usada em diferentes contextos.\n\nEx.: não faz diferença se os dados vieram de arquivo ou não."
  },
  {
    "objectID": "aula_t5.html#generalização-de-funções",
    "href": "aula_t5.html#generalização-de-funções",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Generalização de funções",
    "text": "Generalização de funções\nAo escrever funções, tente torná-las o mais genéricas possível.\n\nIsso começa pelo prório prompt e/ou docstring da função.\n\n\nEx.: uma função que recebe uma lista de dados e faz algum processamento.\n\nnão precisa se preocupar sobre como os dados foram obtidos.\nO que ela precisa deixar claro é o formato dos dados que ela espera.\nCom isso ela pode ser usada em diferentes contextos.\n\nEx.: não faz diferença se os dados vieram de arquivo ou não."
  },
  {
    "objectID": "aula_t5.html#decomposição-de-problemas",
    "href": "aula_t5.html#decomposição-de-problemas",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Decomposição de problemas",
    "text": "Decomposição de problemas\nNotei uma resistência muito grande de boa parte dos alunos em decompor o problema da aula passada.\n\nE alguns já estavam bem dispersos na aula teórica anterior antes disso.\n\n\nLembrem-se que a expectativa é que no futuro nosso trabalho será fortemente baseado em assistência com IA.\n\nE se darão melhor aqueles que conseguirem ser mais produtivos com esse tipo de ferramenta.\nE a decomposição de problemas é uma habilidade essencial para isso."
  },
  {
    "objectID": "aula_t5.html#decomposição-de-problemas-1",
    "href": "aula_t5.html#decomposição-de-problemas-1",
    "title": "Engenharia de Prompt com o GitHub Copilot",
    "section": "Decomposição de problemas",
    "text": "Decomposição de problemas\nComo diz o ditado “Apressado come cru”.\n\nÀs vezes ficamos tentados a obter resultados rápidos.\nE, as primeiras respostas, podem nos dar a impressão que estamos cortando caminhos.\nMas, na verdade, podemos estar apenas criando mais trabalho para nós mesmos."
  },
  {
    "objectID": "aula_t6.html#section",
    "href": "aula_t6.html#section",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "O conteúdo dessa aula é baseado no capítulo 9 do livro abaixo."
  },
  {
    "objectID": "aula_t6.html#section-1",
    "href": "aula_t6.html#section-1",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Suponha que você seja responsável por criar 100 relatórios, cada um para uma pessoa diferente.\n\nPoderia ser um professor que precisa enviar correções para seus estudantes.\nOu alguém em um departamento de RH que precisa enviar a avaliação anual para cada funcionário.\n\n\nSuponha que você tenha decidido preparar os relatórios em arquivos PDF.\n\nE que você precisa de uma capa para os arquivos que é customizada para cada pessoa.\nSeu colega, designer gráfico, preparou essas capas para você."
  },
  {
    "objectID": "aula_t6.html#section-2",
    "href": "aula_t6.html#section-2",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Você e seu colega trabalharam de forma independente e agora cada um terminou sua tarefa.\n\nQuer dizer, quase, pois agora é necessário juntar as capas com os relatórios.\n\n\nAlguém que não é programador estaria agora “rangendo os dentes”\n\ncom o trabalho manual de juntar cada capa com cada relatório.\nIsso poderia levar horas!"
  },
  {
    "objectID": "aula_t6.html#section-3",
    "href": "aula_t6.html#section-3",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Mas nós somos programadores!\n\nE programadores nunca fariam um trabalho desse manualmente!\nOu pelo menos não deveriam.\n\n\n\n\n\n\n\n\nDica\n\n\nMuitas vezes seguimos o ditado: Casa de ferreiro, espeto de pau.\nE perdemos tempo com tarefas que poderiam ser otimizadas."
  },
  {
    "objectID": "aula_t6.html#section-4",
    "href": "aula_t6.html#section-4",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Nessa aula vamos ver como escrever programas que automatizam tarefas tediosas.\n\nUma das tarefas será essa dos PDFs.\nMas também veremos outras tipos de tarefas manuais com as quais podemos ganhar tempo automatizando-as."
  },
  {
    "objectID": "aula_t6.html#section-5",
    "href": "aula_t6.html#section-5",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Muitas vezes os programadores se definem como preguiçosos.\n\nNão no sentido de que não queremos fazer nosso trabalho.\nMas sim, que não queremos fazer tarefas que são repetitivas, chatas, tediosas 😒.\n\nTipos de tarefas que os computadores são muito melhores que nós.\n\n\n\nBons programadores costumam ter um 🕷️ “sentido aranha” 🕸️ para identificar tarefas penosas."
  },
  {
    "objectID": "aula_t6.html#section-6",
    "href": "aula_t6.html#section-6",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Suponha, por exemplo, que tenhamos centenas de fotos que juntamos de uma viagem. 🖼️\n\nE queremos remover as fotos duplicadas.\nE, claro, não queremos ter o trabalho de verificar uma por uma, pois isso levaria muito tempo.\n\n\nOu suponha que um professor tenha que enviar um e-mail com notas para cada um de seus estudantes.\n\nSe forem poucos alunos ele pode escrever um e-mail para cada um.\nMas se forem muitos, nenhum professor vair querer fazer isso manualmente."
  },
  {
    "objectID": "aula_t6.html#section-7",
    "href": "aula_t6.html#section-7",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Sempre que um bom programador se depara com uma tarefa com passos repetitivos\n\nele pensa em como construir uma ferramenta para automatizá-la.\n\n\nO termo ferramenta está sendo usado aqui no sentido de programas que fazem algo que nos poupe tempo.\n\nMuitas vezes a ferramenta em si não é o objetivo final.\nE criar a ferramenta pode também ser meio entendiante.\nMas uma vez que ela está pronta, ela pode nos poupar muito tempo."
  },
  {
    "objectID": "aula_t6.html#section-8",
    "href": "aula_t6.html#section-8",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Às vezes criamos uma ferramenta para usar uma única vez.\n\nMas, na maioria das vezes, essas ferramentas acabam se tornando úteis novamente no futuro.\n\nSeja do jeito que ela foi construída inicialmente,\nou com algumas melhorias."
  },
  {
    "objectID": "aula_t6.html#section-9",
    "href": "aula_t6.html#section-9",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Eu, Julio, por exemplo, envio um e-mail com feedback individual para os alunos após as correções das provas das disciplinas que leciono.\n\nSeria inviável fazer isso manualmente.\n\n\nEu faço a correção da prova em uma panilha do Google.\n\nE escrevi um script (Apps Script) que lê a planilha e envia o e-mail para cada aluno.\nDeu um trabalho inicialmente, e de vez em quando preciso fazer ajustes.\nMas no final das contas, o tempo que economizo é enorme."
  },
  {
    "objectID": "aula_t6.html#section-10",
    "href": "aula_t6.html#section-10",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "E agora que temos Assistentes de IA, como o Copilot,\n\nficou ainda mais fácil criarmos ferramentas para tarefas repetitivas.\n\n\nNão faz sentido um programador não usar essas ferramentas para se ajudar.\n\nnem no sentido pessoal (podemos usar o tempo que economizamos para coisas mais prazerosas).\nnem no sentido profissional (podemos aumentar nossa produtividade)."
  },
  {
    "objectID": "aula_t6.html#section-11",
    "href": "aula_t6.html#section-11",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Muitas vezes precisamos usar módulos (bibliotecas) do Python para realizar alguma tarefa que precisamos.\n\nPode ser que seja uma biblioteca incluída (built-in) do Python.\n\nEx.: csv, json, zipfile, etc.\n\nOu uma biblioteca que precisamos instalar antes de usar."
  },
  {
    "objectID": "aula_t6.html#section-12",
    "href": "aula_t6.html#section-12",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Quando estamos criando ferramentas, é muito comum que:\n\nprecisemos lidar com arquivos de diferentes formato\n\n(como arquivos zip, pdf, planilhas de excel ou imagens).\n\ne que precisemos fazer alguma tarefa específica\n\n(como enviar e-mails, intergair com um site, mover arquivos, etc).\n\n\n\nPara muitas dessas coisas precisaremos usar algum módulo.\n\nMas qual módulo?\nE ele é built-in ou preciso instalar?"
  },
  {
    "objectID": "aula_t6.html#section-13",
    "href": "aula_t6.html#section-13",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Assistentes de IA, como o Copilot, podem nos ajudar a começar.\n\nA ideia é conversarmos com o assistente de IA para descobrir qual módulo precisamos usar.\nE só depois disso entramos na etapa de criar a ferramenta propriamente dita.\n\n\nNa criação da ferramenta, podemos seguir os passos que vimos anteriormente.\n\nDefinir uma função, e sua docstring, e depois pedir para o Copilot gerar o código dela."
  },
  {
    "objectID": "aula_t6.html#section-14",
    "href": "aula_t6.html#section-14",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Ao fazer isso, devemos seguir o processo que já vimos antes:\n\nverificar a corretude do código (testes),\ncorrigir os bugs,\ne talvez decompor o problema.\n\n\nMas aqui na aula vamos nos concentrar na interação com o Copilot para automizarmos a tarefa que precisamos.\n\nPara manter o foco no conteúdo que estamos trabalhando neste capítulo."
  },
  {
    "objectID": "aula_t6.html#section-15",
    "href": "aula_t6.html#section-15",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Nós poderíamos pedir ao Copilot ou ao ChatGPT para fazer a ferramenta completa.\n\nMas vamos manter a ideia de criar funções.\n\n\nAcreditamos que vale a pena trabalharmos com funções, documentadas.\n\nDe forma que seja mais fácil, no futuro, fazer alguma melhoria ou evolução necessária na ferramenta."
  },
  {
    "objectID": "aula_t6.html#section-16",
    "href": "aula_t6.html#section-16",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Suponha que você precise enviar uma lista de compras para alguém por WhatsApp ou e-mail.\n\nE que essa lista precise ser numerada, com um item por linha, e em ordem alfabética.\n\n\nMas você recebeu a lista de compras de alguém (talvez seu chefe)\n\nque simplesmente digitou os itens separados por espaço, e em uma ordem qualquer.\n\n\n\nVamos usar o Copilot para automatizar essa tarefa."
  },
  {
    "objectID": "aula_t6.html#section-17",
    "href": "aula_t6.html#section-17",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Como você recebeu os itens por e-mail ou WhatsApp,\n\na ferramenta será mais útil se pudermos copiar (Ctrl+c) os itens da mensagem.\ne colar (Ctrl+v) na nossa ferramenta para ela gerar a lista numerada.\nCaso contrário, teríamos que redigitar a lista\n\ne aí não estaríamos economizando tempo.\n\n\n\nPara isso, precisaremos usar a Área de Transferência (Clipboard) do Sistema Operacional."
  },
  {
    "objectID": "aula_t6.html#section-18",
    "href": "aula_t6.html#section-18",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Essa Área de Transferência é onde ficam os últimos dados que copiamos com o Ctrl+c.\n\nPodemos então criar uma ferramenta que obtenha as palavras da Área de Transferência;\n\ngere a lista numerada;\ne copie a lista numerada de volta para a Área de Transferência.\n\n\n\nAssim, depois de rodar a ferramenta, podemos simplesmente colar (Ctrl+v) a lista numerada onde quisermos."
  },
  {
    "objectID": "aula_t6.html#section-19",
    "href": "aula_t6.html#section-19",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Basicamente o que precisamos fazer em um programa em Python é:\n\nLer o conteúdo da Área de Transferência e guardar em uma string.\nGerar a lista numerada e ordenada a partir dessa string.\nGuardar a lista em uma nova string.\nColocar a nova string na Área de Transferência.\n\n\nMas como podemos usar a Área de Transferência em um programa Python?"
  },
  {
    "objectID": "aula_t6.html#section-20",
    "href": "aula_t6.html#section-20",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Vamos descobrir isso usando a janela de chat do Copilot.\n\nMas vamos fazer uma exploração mais ampla antes de implementar uma solução.\n\n\nVamos abrir uma pasta vazia no VS Code e usar o modo Ask do chat do Copilot."
  },
  {
    "objectID": "aula_t6.html#section-21",
    "href": "aula_t6.html#section-21",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Prompt\n\n\nEu gostaria de escrever um programa em Python que acessa a área de transferência e que permita copiar e colar usando a área de transferência. Como posso fazer isso?"
  },
  {
    "objectID": "aula_t6.html#section-22",
    "href": "aula_t6.html#section-22",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot\n\n\nVocê pode usar o módulo pyperclip para acessar a área de transferência no Python.\nEle permite copiar e colar texto facilmente. Veja como fazer:\n\nInstale o pacote:\n\npip install pyperclip\n\nExemplo de código para copiar e colar:\n\nimport pyperclip\n\n# Copiar texto para a área de transferência\npyperclip.copy(\"Olá, área de transferência!\")\n\n# Colar (obter) texto da área de transferência\ntexto = pyperclip.paste()\nprint(\"Texto copiado:\", texto)\nEsse código copia um texto para a área de transferência e depois lê o que está lá.\nFunciona em Linux, Windows e macOS."
  },
  {
    "objectID": "aula_t6.html#section-23",
    "href": "aula_t6.html#section-23",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "A resposta do Copilot nos ensina que podemos usar o módulo pyperclip para interagir com a Área de Transferência em um programa em Python.\n\nE nos dá um exemplo de como usar o módulo.\nEle também nos diz como instalar o módulo.\n\nO que mostra que ele é não é built-in.\n\n\n\nMas será que não daria para fazer nossa ferramenta sem instalar um módulo?\n\nVamos perguntar ao Copilot."
  },
  {
    "objectID": "aula_t6.html#section-24",
    "href": "aula_t6.html#section-24",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Prompt\n\n\nExiste alguma forma de fazer isso sem precisar instalar um módulo Python?"
  },
  {
    "objectID": "aula_t6.html#section-25",
    "href": "aula_t6.html#section-25",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot\n\n\nSim, é possível acessar a área de transferência sem instalar módulos externos, mas depende do sistema operacional. No Linux, você pode usar comandos do sistema como xclip ou xsel via subprocess. Veja um exemplo usando xclip:\nimport subprocess\n\n# Copiar texto para a área de transferência\ntexto = \"Olá, área de transferência!\"\nprocess = subprocess.Popen(['xclip', '-selection', 'clipboard'], stdin=subprocess.PIPE)\nprocess.communicate(input=texto.encode())\n\n# Colar (obter) texto da área de transferência\nprocess = subprocess.Popen(['xclip', '-selection', 'clipboard', '-o'], stdout=subprocess.PIPE)\nsaida, _ = process.communicate()\nprint(\"Texto copiado:\", saida.decode())\nObservações:\n\nVocê precisa ter o xclip instalado (sudo apt install xclip).\nPara Windows, pode-se usar clip e powershell via subprocess.\nPara macOS, use pbcopy e pbpaste.\n\nSe precisar de exemplos para outros sistemas, é só pedir!"
  },
  {
    "objectID": "aula_t6.html#section-26",
    "href": "aula_t6.html#section-26",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Bom essa solução tem uma desvantagem: depende de um programa externo e do sistema operacional.\n\nSe formos tratar a tarefa apenas uma única vez poderia nos atender.\nMas pensando em usos futuros, não é a melhor solução.\n\n\nVamos explorar mais soluções."
  },
  {
    "objectID": "aula_t6.html#section-27",
    "href": "aula_t6.html#section-27",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Prompt\n\n\nExiste algum outro jeito de fazer isso sem precisar instalar um módulo Python?"
  },
  {
    "objectID": "aula_t6.html#section-28",
    "href": "aula_t6.html#section-28",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot\n\n\nSim, mas você ainda vai precisar de algum utilitário externo já instalado no sistema, como xclip ou xsel no Linux, pbcopy/pbpaste no macOS, ou clip no Windows.\nO Python puro não oferece acesso direto à área de transferência na biblioteca padrão.\nNo Linux, por exemplo, se o xclip já estiver instalado, você pode usar o seguinte código:\nimport subprocess\n\n# Copiar texto para a área de transferência\nsubprocess.run(\"echo 'Texto para copiar' | xclip -selection clipboard\", shell=True)\n\n# Colar texto da área de transferência\nresultado = subprocess.run(\"xclip -selection clipboard -o\", shell=True, capture_output=True, text=True)\nprint(\"Texto colado:\", resultado.stdout)\nResumo:\nSem instalar módulos Python, você pode usar comandos do sistema operacional via subprocess, desde que o utilitário de área de transferência já esteja disponível no seu sistema."
  },
  {
    "objectID": "aula_t6.html#section-29",
    "href": "aula_t6.html#section-29",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Bom, essa resposta não ajudou muito, afinal continua basicamente fazendo a mesma coisa da resposta anterior\n\nNo livro, a primeira solução dada pelo Copilot usava o módulo tkinter.\n\nQue tem a limitação de só funcionar em ambientes gráficos (não funciona em servidores Linux, por exemplo).\n\n\n\nAo pedir outra opção, o Copilot sugeriu um código específico para Windows usando win32clipboard.\n\nPorque os autores estavam em ambiente Windows.\nMas tem o mesmo tipo de limitação da nossa solução com xclip."
  },
  {
    "objectID": "aula_t6.html#section-30",
    "href": "aula_t6.html#section-30",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Avaliando então as opções que temos, a melhor é usar o módulo pyperclip.\n\nAfinal instalar um módulo não é algo tão complicado.\nE o pyperclip funciona em Linux, Windows e macOS,\n\nsem depender de programas externos."
  },
  {
    "objectID": "aula_t6.html#section-31",
    "href": "aula_t6.html#section-31",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Mas por que devemos explorar e entender várias opções?\n\n\nHá vários motivos porque não deveríamos simplesmente usar a primeira opção do Copilot:\n\nPode não funcionar em todos os sistemas operacionais.\n\nO que limita os potenciais usuários da ferramenta.\n\nPode não funcionar para a tarefa que precisamos, ou pode ser que cheguemos em um ponto que ficamos travados em como resolver um problema.\n\nE aí sabermos que temos outras opções pode nos ajudar a sair do impasse.\n\nMódulos são atualizados com frequência.\n\nE funções que existiam, podem não existir nas versões mais atuais.\nOu sua forma de uso pode ter sido alterada.\nE, assim, uma sugestão do Copilot pode não funcionar mais."
  },
  {
    "objectID": "aula_t6.html#section-32",
    "href": "aula_t6.html#section-32",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Agora que sabemos como acessar a Área de Transferência, podemos criar nossa ferramenta.\n\ncomo vamos precisar instalar um módulo, vamos aproveitar para aprender como fazer isso do jeito mais correto.\nClaro, com a ajuda do Copilot.\n\n\n\n\n\n\nPrompt\n\n\nVou seguir com a sugestão que usa pyperclip. Mas, antes disso, me explique a melhor forma de instalar um módulo Python para um projeto?"
  },
  {
    "objectID": "aula_t6.html#mas-por-que-devemos-explorar-e-entender-várias-opções",
    "href": "aula_t6.html#mas-por-que-devemos-explorar-e-entender-várias-opções",
    "title": "Automatizando Tarefas Tediosas",
    "section": "Mas por que devemos explorar e entender várias opções?",
    "text": "Mas por que devemos explorar e entender várias opções?\nHá vários motivos porque não deveríamos simplesmente usar a primeira opção do Copilot:\n\nPode não funcionar em todos os sistemas operacionais.\n\nO que limita os potenciais usuários da ferramenta.\n\nPode não funcionar para a tarefa que precisamos, ou pode ser que cheguemos em um ponto que ficamos travados em como resolver um problema.\n\nE aí sabermos que temos outras opções pode nos ajudar a sair do impasse.\n\nMódulos são atualizados com frequência.\n\nE funções que existiam, podem não existir nas versões mais atuais.\nOu sua forma de uso pode ter sido alterada.\nE, assim, uma sugestão do Copilot pode não funcionar mais."
  },
  {
    "objectID": "aula_t6.html#section-33",
    "href": "aula_t6.html#section-33",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot\n\n\nA melhor forma de instalar um módulo Python para um projeto é usar um ambiente virtual. Assim, as dependências ficam isoladas e não afetam outros projetos ou o sistema.\nPassos recomendados:\n\nCrie um ambiente virtual na pasta do projeto:\n\npython3 -m venv venv\n\nAtive o ambiente virtual:\n\nsource venv/bin/activate\n\nInstale o módulo desejado (exemplo: pyperclip):\n\npip install pyperclip\n\n(Opcional) Gere um arquivo de dependências:\n\npip freeze &gt; requirements.txt\nAssim, você mantém seu projeto organizado e fácil de compartilhar ou replicar em outros ambientes."
  },
  {
    "objectID": "aula_t6.html#section-34",
    "href": "aula_t6.html#section-34",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "O Copilot nos ensinou a criar um ambiente virtual.\n\nDe modo que a instalação do módulo pyperclip fique dentro da pasta do próprio projeto.\nEvitando interferências e conflitos de versões com outros projetos.\n\n\nTambém aprendemos a gerar um arquivo requirements.txt\n\nmas não ficou muito claro para que ele serve, já que foi gerado somente ao final.\n\n\n\nVamos perguntar ao Copilot."
  },
  {
    "objectID": "aula_t6.html#section-35",
    "href": "aula_t6.html#section-35",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Prompt\n\n\nPara que serve o arquivo requirements.txt?\n\n\n\n\n\n\n\n\n\nGitHub Copilot\n\n\nO arquivo requirements.txt serve para listar todas as dependências (módulos e suas versões) necessárias para o seu projeto Python. Ele facilita a instalação dessas dependências em outros ambientes ou por outros desenvolvedores, usando o comando:\npip install -r requirements.txt\nAssim, todos os pacotes listados no arquivo serão instalados automaticamente, garantindo que o projeto funcione corretamente."
  },
  {
    "objectID": "aula_t6.html#section-36",
    "href": "aula_t6.html#section-36",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Agora ficou mais claro.\n\nQuando formos instalar o projeto em outro computador, ou quando alguém for usar o projeto,\nbasta criar um ambiente virtual e rodar o comando pip install -r requirements.txt.\n\n\nVamos, enfim, criar nossa ferramenta.\n\nPara isso, vamos, criar um arquivo Python, importar o módulo pyperclip\ne definir a assinatura e docstring função que gera a lista numerada."
  },
  {
    "objectID": "aula_t6.html#section-37",
    "href": "aula_t6.html#section-37",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Prompt\n\nimport pyperclip\n\ndef gerar_lista_numerada():\n    \"\"\"\"\n    A área de transferêcia tem linhas de texto contendo\n    palavras separadas por espaços e/ou vírgulas.\n\n    A função extrai as palavras obtidas da área de transferência,\n    ordena-as em ordem alfabética e cria uma lista numerada com\n    um item por linha.\n\n    O resultado é copiado de volta para a área de transferência.    \n    \"\"\""
  },
  {
    "objectID": "aula_t6.html#section-38",
    "href": "aula_t6.html#section-38",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Código gerado pelo Copilot.\n\ndef gerar_lista_numerada():\n    \"\"\"\"\n    A área de transferêcia tem linhas de texto contendo\n    palavras separadas por espaços e/ou vírgulas.\n\n    A função extrai as palavras obtidas da área de transferência,\n    ordena-as em ordem alfabética e cria uma lista numerada com\n    um item por linha.\n\n    O resultado é copiado de volta para a área de transferência.    \n    \"\"\"\n    # Obtém o texto da área de transferência\n    texto = pyperclip.paste()\n\n    # Substitui vírgulas por espaços e divide o texto em palavras\n    palavras = texto.replace(',', ' ').split()\n\n    # Remove duplicatas e ordena as palavras em ordem alfabética\n    palavras_unicas = sorted(set(palavras))\n\n    # Cria a lista numerada\n    lista_numerada = [f\"{i + 1}. {palavra}\" for i, palavra in enumerate(palavras_unicas)]\n\n    # Junta a lista em uma única string com quebras de linha\n    resultado = '\\n'.join(lista_numerada)\n\n    # Copia o resultado de volta para a área de transferência\n    pyperclip.copy(resultado)\n\nif __name__ == \"__main__\":\n    gerar_lista_numerada()"
  },
  {
    "objectID": "aula_t6.html#section-39",
    "href": "aula_t6.html#section-39",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Dica\n\n\nComo nós criamos o ambiente virtual pelo terminal do VS Code, precisamos conferir se o VS Code identificou automaticamente o ambiente virtual, caso contrário, se tentarmos usar a opção Run, o programa não vai funcionar (pois não conseguirá importar o módulo pyperclip).\nPrecisamos escolher a versão do Python que está dentro do ambiente virtual. Basta clicar no canto inferior direito do VS Code e escolher o Python correto.\nObs.: se criarmos o ambiente virtual pelo VS Code (Ctrl+Shift+P e escolhendo Python: Create Environment), o VS Code já escolhe o Python correto."
  },
  {
    "objectID": "aula_t6.html#section-40",
    "href": "aula_t6.html#section-40",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Vamos então testar o nosso programa.\n\nSuponha que tenhamos recebido a seguinte lista de compras:\n\nfeijão, arroz, sorvete, café, batata, óleo, cebola\n\n\n\nCopie a lista acima (Ctrl+c) e rode o programa.\n\nEm seguida cole (Ctrl+v) a lista numerada em algum editor de texto."
  },
  {
    "objectID": "aula_t6.html#section-41",
    "href": "aula_t6.html#section-41",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Veja que deu quase tudo certo.\n\nExceto que a palavra óleo apareceu fora da ordem alfabética.\n\n\n1. arroz\n2. batata\n3. café\n4. cebola\n5. feijão\n6. sorvete\n7. óleo"
  },
  {
    "objectID": "aula_t6.html#section-42",
    "href": "aula_t6.html#section-42",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Provavelmente o erro aconteceu porque a palavra tem acento.\n\nVamos pedir ao Copilot para corrigir isso.\n\n\n\n\n\n\nPrompt\n\n\nA ordenação está errada, pois a palavra “óleo” deveria aparecer antes de “sorvete”. Pode corrigir isso?"
  },
  {
    "objectID": "aula_t6.html#section-43",
    "href": "aula_t6.html#section-43",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (início)\n\n\nClaro! O problema ocorre porque a ordenação padrão do Python (sorted) não considera corretamente os acentos para a ordem alfabética em português. Para corrigir, você pode usar o módulo locale e configurar para 'pt_BR.UTF-8'. Veja como ajustar:\nimport pyperclip\nimport locale\n\ndef gerar_lista_numerada():\n    \"\"\"\n    A área de transferêcia tem linhas de texto contendo\n    palavras separadas por espaços e/ou vírgulas.\n\n    A função extrai as palavras obtidas da área de transferência,\n    ordena-as em ordem alfabética e cria uma lista numerada com\n    um item por linha.\n\n    O resultado é copiado de volta para a área de transferência.    \n    \"\"\"\n    # Configura a ordenação para o padrão do português do Brasil\n    locale.setlocale(locale.LC_COLLATE, 'pt_BR.UTF-8')\n\n    # Obtém o texto da área de transferência\n    texto = pyperclip.paste()\n\n    # Substitui vírgulas por espaços e divide o texto em palavras\n    palavras = texto.replace(',', ' ').split()\n\n    # Remove duplicatas e ordena as palavras em ordem alfabética considerando acentos\n    palavras_unicas = sorted(set(palavras), key=locale.strxfrm)\n\n    # Cria a lista numerada\n    lista_numerada = [f\"{i + 1}. {palavra}\" for i, palavra in enumerate(palavras_unicas)]\n\n    # Junta a lista em uma única string com quebras de linha\n    resultado = '\\n'.join(lista_numerada)\n\n    # Copia o resultado de volta para a área de transferência\n    pyperclip.copy(resultado)\n\nif __name__ == \"__main__\":\n    gerar_lista_numerada()"
  },
  {
    "objectID": "aula_t6.html#section-44",
    "href": "aula_t6.html#section-44",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (continuação)\n\n\nAgora, palavras acentuadas serão ordenadas corretamente conforme o português.\nObs: Certifique-se de que o locale pt_BR.UTF-8 está instalado no seu sistema Linux. Se não estiver, instale com:\nsudo locale-gen pt_BR.UTF-8\nsudo update-locale"
  },
  {
    "objectID": "aula_t6.html#section-45",
    "href": "aula_t6.html#section-45",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Agora sim!\n\nTemos uma ferramenta que nos economiza tempo pegar gerar a lista no formato correto.\nClaro que esse é um exemplo simples e didático.\n\nSeguindo a mesma ideia você pode criar ferramentas para tarefas mais complexas."
  },
  {
    "objectID": "aula_t6.html#section-46",
    "href": "aula_t6.html#section-46",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Mas tem algo que ainda é complicado em nossa ferramenta.\n\nPrecisamos usar o VS Code para rodar o programa.\nOu então abrir o terminal, navegar até a pasta do projeto, ativar o ambiente virtual e rodar o programa.\nIsso não é muito prático.\n\n\nSeria melhor se pudéssemos simplesmente clicar duas vezes em um ícone na área de trabalho.\n\nE aí a ferramenta rodaria sem precisar abrir o VS Code ou o terminal."
  },
  {
    "objectID": "aula_t6.html#section-47",
    "href": "aula_t6.html#section-47",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Vamos conversar com o Copilot para descobrir como fazer isso.\n\n\n\n\n\nPrompt\n\n\nEu gostaria que esse programa estivesse disponível para o usuário como um comando de terminal. Sem precisar entrar na pasta do projeto, ativer o ambiente virtual e rodar o programa manualmente. Como posso fazer isso?"
  },
  {
    "objectID": "aula_t6.html#section-48",
    "href": "aula_t6.html#section-48",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (início)\n\n\nPara tornar seu programa disponível como um comando de terminal, você pode empacotá-lo como um script executável e instalá-lo no sistema.\nO jeito mais comum em projetos Python é criar um entry point usando o setuptools. Veja como fazer:\n1. Crie um arquivo setup.py na raiz do projeto:\nfrom setuptools import setup\n\nsetup(\n    name=\"gerador-lista-numerada\",\n    version=\"1.0\",\n    py_modules=[\"gerador_lista_numerada\"],\n    install_requires=[\"pyperclip\"],\n    entry_points={\n        \"console_scripts\": [\n            \"gerador-lista-numerada=gerador_lista_numerada:gerar_lista_numerada\",\n        ],\n    },\n)"
  },
  {
    "objectID": "aula_t6.html#section-49",
    "href": "aula_t6.html#section-49",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (continuação)\n\n\n2. Instale o pacote no modo editável (para desenvolvimento):\nNo terminal, dentro da pasta do projeto:\npip install --user --editable .\n3. Use o comando no terminal\nAgora, você pode rodar o comando de qualquer lugar:\ngerador-lista-numerada\n\nDicas:\n\nO comando será instalado em ~/.local/bin (Linux). Certifique-se de que esse diretório está no seu $PATH.\nPara outros usuários do sistema, use sudo pip install . (não recomendado para ambientes compartilhados).\nSe quiser distribuir, pode empacotar e publicar no PyPI.\n\nSe quiser um nome de comando diferente, basta alterar em console_scripts."
  },
  {
    "objectID": "aula_t6.html#section-50",
    "href": "aula_t6.html#section-50",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Legal! Agora podemos abrir um terminal, rodar o comando gerador-lista-numerada e pronto!\n\nTeremos nossa lista de compras numerada na Área de Transferência."
  },
  {
    "objectID": "aula_t6.html#section-51",
    "href": "aula_t6.html#section-51",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "O problema é que nas versões mais recentes do Python, o comando abaixo não é permitido:\npip install --user --editable .\n\nIsso para proteger a integridade do sistema, evitando instalação de pacotes sem usar um ambiente virtual.\n\nMas, para o nosso caso, queremos mesmo instalar o pacote para o usuário.\nE, assim, termos o comando disponível globalmente."
  },
  {
    "objectID": "aula_t6.html#section-52",
    "href": "aula_t6.html#section-52",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Perguntando então ao Copilot, precisei instalar com o comando abaixo:\npip install --user --break-system-packages .\n\nE também precisei rodar os comandos abaixo para garantir que o diretório ~/.local/bin estivesse no meu $PATH.\necho 'export PATH=$PATH:~/.local/bin' &gt;&gt; ~/.bashrc\nsource ~/.bashrc"
  },
  {
    "objectID": "aula_t6.html#section-54",
    "href": "aula_t6.html#section-54",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (início)\n\n\nPara criar um atalho com ícone na área de trabalho (no Linux), siga estes passos:\n1. Crie um arquivo .desktop\nCrie um arquivo chamado, por exemplo, GeradorListaNumerada.desktop na sua área de trabalho (~/Área de Trabalho ou ~/Desktop):\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Gerador Lista Numerada\nComment=Gera uma lista numerada a partir da área de transferência\nExec=gerador-lista-numerada\nIcon=/caminho/para/um/icone.png\nTerminal=false\nCategories=Utility;\n\nExec: o comando instalado pelo seu script (gerador-lista-numerada).\nIcon: caminho para um arquivo de ícone (PNG, SVG, etc). Você pode usar um ícone próprio ou algum do sistema.\nTerminal: coloque true se quiser que abra um terminal, ou false para rodar em segundo plano."
  },
  {
    "objectID": "aula_t6.html#section-53",
    "href": "aula_t6.html#section-53",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Mas será que não podemos fazer algo ainda mais prático?\n\nPara um usuário leigo, é ruim ter que abrir um terminal e saber o nome do comando.\n\n\nBora, conversar com o Copilot novamente.\n\n\n\n\nPrompt\n\n\nE como faço para ter um ícone na área de trabalho para executar o programa?"
  },
  {
    "objectID": "aula_t6.html#section-55",
    "href": "aula_t6.html#section-55",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (continuação)\n\n\n2. Torne o atalho executável\nNo terminal, rode:\nchmod +x ~/Área\\ de\\ Trabalho/GeradorListaNumerada.desktop\n3. (Opcional) Escolha um ícone\nSe não tiver um ícone, pode baixar um PNG ou usar algum já presente no sistema, como /usr/share/icons/hicolor/48x48/apps/accessories-text-editor.png.\n\nAgora, basta clicar duas vezes no ícone para executar o programa!\nSe aparecer um aviso de segurança, clique em “Confiar” ou “Permitir execução”."
  },
  {
    "objectID": "aula_t6.html#section-56",
    "href": "aula_t6.html#section-56",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Aqui tive que fazer outra adaptação para rodar no notebook.\n\nReferente ao caminho do executável que precisa ser completo no Ubuntu mais recente.\n\n\nNo final das contas utilizei esse arquivo GeradorListaNumerada.desktop:\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Gerador Lista Numerada\nComment=Gera uma lista numerada a partir da área de transferência\nExec=/home/julio/.local/bin/gerador-lista-numerada\nIcon=/home/julio/Área de trabalho/icone.png\nTerminal=false\nCategories=Utility;"
  },
  {
    "objectID": "aula_t6.html#section-57",
    "href": "aula_t6.html#section-57",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Bacana! Temos agora um programa disponível na área de trabalho.\n\nFicou muito mais rápido gerar a lista numerada.\n\n\nPoderíamos melhorar nosso programa dando algum retorno de que ele foi executado com sucesso.\n\nE, claro, para criar o atalho na Área de Trabalho do Windows o processo seria diferente."
  },
  {
    "objectID": "aula_t6.html#section-58",
    "href": "aula_t6.html#section-58",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Poderíamos também pensar em outros exemplos de programas com abordagem parecida:\n\nCopiar duas colunas de uma planilha contendo e-mail e nota dos alunos e gerar texto para um e-mail para a secretaria informando o número de aprovados e reprovados.\nCopiar trechos do arquivo PDF da Resolução CEPE 473 e acertar as quebras de linha.\n\n\nMas vamos tratar outra demanda tediosa agora."
  },
  {
    "objectID": "aula_t6.html#section-60",
    "href": "aula_t6.html#section-60",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "O arquivo AulaT6-ex2.zip contém duas pastas:\n\ncapas: com as 100 capas individuais em PDF.\nrelatorios: com os 100 relatórios individuais também em PDF.\n\n\nPoderíamos usar algum software, como o Adobe Acrobat, para fazer isso manualmente.\n\nMas imagina a trabalheira que daria.\nEm vez disso, vamos pedir ao Copilot para criar uma ferramenta que faça isso para nós."
  },
  {
    "objectID": "aula_t6.html#section-59",
    "href": "aula_t6.html#section-59",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Vamos voltar ao cenário comentado no início da aula.\n\nSuponha que temos 100 arquivos PDF, cada um com um relatório diferente.\nE que precisamos adicionar uma capa personalizada a cada um desses arquivos.\n\n\nPrimeiramente, vale ressaltar que não é possível ler arquivos PDF da mesma forma que lemos arquivos texto e CSV.\n\nArquivos PDF, do Word, Excel, etc., possuem uma estrutura interna diferente."
  },
  {
    "objectID": "aula_t6.html#section-61",
    "href": "aula_t6.html#section-61",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Antes de pedirmos o Copilot para criar a ferramenta completa,\n\nvamos explorar como podemos lidar com a junção (merge) de arquivos PDF em Python.\n\n\n\n\n\n\nPrompt\n\n\nEu gostaria de escrever um programa em Python que junte dois arquivos PDF em um só. Como posso fazer isso?"
  },
  {
    "objectID": "aula_t6.html#section-62",
    "href": "aula_t6.html#section-62",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot\n\n\nVocê pode usar a biblioteca PyPDF2 para juntar dois arquivos PDF em Python. Veja um exemplo simples:\n\nInstale a biblioteca (caso ainda não tenha):\n\npip install PyPDF2\n\nCódigo para juntar dois PDFs:\n\nfrom PyPDF2 import PdfMerger\n\n# Lista dos arquivos PDF a serem unidos\narquivos = ['arquivo1.pdf', 'arquivo2.pdf']\n\nmerger = PdfMerger()\nfor pdf in arquivos:\n    merger.append(pdf)\nmerger.write('pdf_unido.pdf')\nmerger.close()\nBasta substituir 'arquivo1.pdf' e 'arquivo2.pdf' pelos nomes dos seus arquivos. O resultado será salvo como pdf_unido.pdf."
  },
  {
    "objectID": "aula_t6.html#section-63",
    "href": "aula_t6.html#section-63",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Já temos então uma opção que parece atender o que precisamos.\n\nMas vamos explorar se existe alguma opção com módulo built-in.\n\n\n\n\n\n\nPrompt\n\n\nExiste alguma forma de fazer isso sem precisar instalar um módulo Python?"
  },
  {
    "objectID": "aula_t6.html#section-64",
    "href": "aula_t6.html#section-64",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot\n\n\nNão existe uma forma nativa em Python puro para manipular ou juntar arquivos PDF, pois o formato PDF é complexo e não é suportado pela biblioteca padrão do Python.\nSe você não quiser instalar módulos Python, pode usar ferramentas externas já instaladas no Linux, como o pdftk ou o qpdf. Por exemplo, usando o terminal:\nCom pdftk:\npdftk arquivo1.pdf arquivo2.pdf cat output pdf_unido.pdf\nCom qpdf:\nqpdf --empty --pages arquivo1.pdf arquivo2.pdf -- pdf_unido.pdf\nEssas ferramentas precisam estar instaladas no seu sistema, mas não exigem instalar módulos Python. Se preferir uma solução 100% Python, será necessário instalar um módulo como o PyPDF2."
  },
  {
    "objectID": "aula_t6.html#section-65",
    "href": "aula_t6.html#section-65",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Bom, a solução apresentada depende da instalação de programas externos, o que parece mais complicado do que instalar um módulo Python.\n\nObs.: no livro, o Copilot sugeriu criar um script Python que no final das contas usava esses programas.\n\n\nA primeira opção parece boa, mas vamos explorar se existem alternativas.\n\n\n\n\n\n\nPrompt\n\n\nExistem outros módulos Python que eu deveria considerar para tratar essa tarefa?"
  },
  {
    "objectID": "aula_t6.html#section-66",
    "href": "aula_t6.html#section-66",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot\n\n\nSim! Além do PyPDF2, você pode considerar outros módulos Python para manipulação de PDFs:\n\npypdf: É uma continuação moderna do PyPDF2, com mais recursos e manutenção ativa.\nPyMuPDF (fitz): Muito rápido e poderoso, permite manipular, mesclar, dividir e até extrair texto e imagens de PDFs.\npdfminer.six: Focado em extração de texto, mas também pode manipular PDFs em alguns casos.\npdfrw: Permite ler e escrever PDFs, além de mesclar e dividir arquivos.\n\nPara tarefas simples de juntar PDFs, pypdf e PyMuPDF são ótimas opções. Exemplo com pypdf:\nfrom pypdf import PdfMerger\n\nmerger = PdfMerger()\nmerger.append(\"arquivo1.pdf\")\nmerger.append(\"arquivo2.pdf\")\nmerger.write(\"pdf_unido.pdf\")\nmerger.close()\nEscolha o módulo conforme suas necessidades e preferências!"
  },
  {
    "objectID": "aula_t6.html#section-67",
    "href": "aula_t6.html#section-67",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "A resposta do Copilot nos mostrou que existe um módulo mais moderno que o PyPDF2, o pypdf.\n\nE cujo exemplo de código parece bem simples.\n\n\nMas antes de seguirmos com o pypdf, vamos entender melhor os prós e contras de cada módulo sugerido.\n\n\n\n\n\n\nPrompt\n\n\nQuais são os prós e contras de cada um desses módulos?"
  },
  {
    "objectID": "aula_t6.html#section-68",
    "href": "aula_t6.html#section-68",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (início)\n\n\nAqui está um resumo dos prós e contras dos principais módulos Python para manipulação de PDFs:\n\n1. PyPDF2\nPrós:\n\nFácil de usar para tarefas básicas (juntar, dividir, rotacionar).\nBastante documentado e com muitos exemplos.\nNão depende de bibliotecas externas.\n\nContras:\n\nDesenvolvimento desacelerado (pode estar desatualizado).\nSuporte limitado para PDFs complexos ou protegidos.\nAlgumas funções avançadas podem não funcionar corretamente."
  },
  {
    "objectID": "aula_t6.html#section-69",
    "href": "aula_t6.html#section-69",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (continuação)\n\n\n2. pypdf\nPrós:\n\nContinuação moderna do PyPDF2, com manutenção ativa.\nInterface semelhante ao PyPDF2, facilitando a migração.\nCorrige bugs e adiciona novos recursos.\nBoa documentação.\n\nContras:\n\nAinda pode ter limitações com PDFs muito complexos.\nAlgumas funções avançadas podem não estar presentes."
  },
  {
    "objectID": "aula_t6.html#section-71",
    "href": "aula_t6.html#section-71",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (continuação)\n\n\n4. pdfrw\nPrós:\n\nLeve e puro Python.\nPermite mesclar, dividir e modificar PDFs.\nÚtil para manipulação de formulários PDF.\n\nContras:\n\nMenos mantido e atualizado.\nSuporte limitado para PDFs complexos.\nDocumentação menos detalhada."
  },
  {
    "objectID": "aula_t6.html#section-70",
    "href": "aula_t6.html#section-70",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (continuação)\n\n\n3. PyMuPDF (fitz)\nPrós:\n\nMuito rápido e eficiente.\nSuporte avançado para manipulação de páginas, extração de texto, imagens e metadados.\nSuporta PDFs complexos e outros formatos (XPS, EPUB).\nDocumentação detalhada.\n\nContras:\n\nAPI um pouco mais complexa para tarefas simples.\nPode ser mais pesado para instalar (depende de bibliotecas C)."
  },
  {
    "objectID": "aula_t6.html#section-73",
    "href": "aula_t6.html#section-73",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "A resposta do Copilot nos ajudou a entender melhor as opções.\n\nO pypdf parece ser uma boa escolha, pois é uma versão mais moderna do PyPDF2.\nE o exemplo de código que ele nos deu é bem simples.\n\n\nVamos partir para a criação da ferramenta.\n\nVamos definir a assinatura da função e a docstring com o que queremos."
  },
  {
    "objectID": "aula_t6.html#section-72",
    "href": "aula_t6.html#section-72",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (continuação)\n\n\n5. pdfminer.six\nPrós:\n\nExcelente para extração de texto detalhada.\nSuporta PDFs complexos e multilíngues.\n\nContras:\n\nNão é focado em manipulação (juntar/dividir) de PDFs.\nAPI mais complexa para tarefas simples de manipulação.\n\n\nResumo:\n\nPara juntar/dividir PDFs: pypdf ou PyMuPDF são as melhores opções.\nPara extração de texto: pdfminer.six ou PyMuPDF.\nPara manipulação leve e sem dependências: pdfrw.\n\nEscolha conforme sua necessidade!"
  },
  {
    "objectID": "aula_t6.html#section-74",
    "href": "aula_t6.html#section-74",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Dica\n\n\nAntes de continuarmos, vale a pena chamar a atenção para cuidados que devemos tomar ao fazer automatizações que lidam com arquivos.\nSe a ferramenta que criarmos estiver incorreta, podemos perder arquivos em nosso computador. Algumas dicas são:\n\nSempre trabalhar com cópias dos arquivos, nunca com os originais.\nVerifique se os arquivos que a ferramenta vai processar estão corretos.\n\nEx.: podemos comentar as linhas que manipulam os arquivos e imprimir os nomes dos arquivos que seriam processados.\nAssim conseguimos conferir se são realmente os arquivos que pretendemos usar.\n\nSempre fazer testes com poucos arquivos, antes de rodar a ferramenta com todos os arquivos."
  },
  {
    "objectID": "aula_t6.html#section-75",
    "href": "aula_t6.html#section-75",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Para definirmos a assinatura da função, veja que precisaremos de três parâmetros:\n\nas pastas das capas, dos relatórios e de onde queremos colocar os arquivos gerados.\n\n\nTambém precisaremos explicar o padrão de nomes dos arquivos.\n\nPara que o Copilot gera um código que junte a capa correta com o relatório correto.\n\n\n\nE podemos importar a bibliteca pypdf que já sabemos que vamos usar."
  },
  {
    "objectID": "aula_t6.html#section-76",
    "href": "aula_t6.html#section-76",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Lembre-se também que precisamos seguir o mesmo procedimento do exemplo anterior para criar o ambiente virtual e instalar o módulo pypdf.\n\npython3 -m venv venv\nsource venv/bin/activate\npip install pypdf\npip freeze &gt; requirements.txt\n\n\nLembre-se também de configurar o VS Code para usar o Python do ambiente virtual."
  },
  {
    "objectID": "aula_t6.html#section-77",
    "href": "aula_t6.html#section-77",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Vamos então criar um arquivo Python e definir a assinatura da função e a docstring.\n\nimport pypdf\n\ndef adicionar_capas_a_pdfs(pasta_capas, pasta_relatorios, pasta_saida):\n    \"\"\"\n    Adiciona capas personalizadas a arquivos PDF de relatórios.\n\n    Parâmetros:\n    - pasta_capas: Caminho da pasta contendo os arquivos PDF das capas.\n      Os arquivos têm nome cover1.pdf, cover2.pdf, etc.\n    - pasta_relatorios: Caminho da pasta contendo os arquivos PDF dos relatórios.\n      Os arquivos têm nome 1.pdf, 2.pdf, etc.\n    - pasta_saida: Caminho da pasta onde os arquivos PDF resultantes serão salvos.\n\n    A função lê cada arquivo de capa e o respectivo relatório,\n    junta os dois em um único arquivo PDF e salva na pasta de saída.\n    \"\"\""
  },
  {
    "objectID": "aula_t6.html#section-78",
    "href": "aula_t6.html#section-78",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Esse foi o código gerado pelo Copilot no meu caso.\n\nimport pypdf\n\ndef adicionar_capas_a_pdfs(pasta_capas, pasta_relatorios, pasta_saida):\n    \"\"\"\n    Adiciona capas personalizadas a arquivos PDF de relatórios.\n\n    Parâmetros:\n    - pasta_capas: Caminho da pasta contendo os arquivos PDF das capas.\n      Os arquivos têm nome cover1.pdf, cover2.pdf, etc.\n    - pasta_relatorios: Caminho da pasta contendo os arquivos PDF dos relatórios.\n      Os arquivos têm nome 1.pdf, 2.pdf, etc.\n    - pasta_saida: Caminho da pasta onde os arquivos PDF resultantes serão salvos.\n\n    A função lê cada arquivo de capa e o respectivo relatório,\n    junta os dois em um único arquivo PDF e salva na pasta de saída.\n    \"\"\"\n    import os\n\n    # Lista os arquivos de capa e relatório\n    capas = sorted([f for f in os.listdir(pasta_capas) if f.startswith('cover') and f.endswith('.pdf')])\n    relatorios = sorted([f for f in os.listdir(pasta_relatorios) if f.endswith('.pdf')])\n\n    # Verifica se o número de capas e relatórios é o mesmo\n    if len(capas) != len(relatorios):\n        raise ValueError(\"O número de capas e relatórios deve ser o mesmo.\")\n\n    for capa, relatorio in zip(capas, relatorios):\n        caminho_capa = os.path.join(pasta_capas, capa)\n        caminho_relatorio = os.path.join(pasta_relatorios, relatorio)\n        caminho_saida = os.path.join(pasta_saida, relatorio)\n\n        # Lê os arquivos PDF\n        leitor_capa = pypdf.PdfReader(caminho_capa)\n        leitor_relatorio = pypdf.PdfReader(caminho_relatorio)\n\n        escritor_pdf = pypdf.PdfWriter()\n\n        # Adiciona a capa\n        for pagina in leitor_capa.pages:\n            escritor_pdf.add_page(pagina)\n\n        # Adiciona o relatório\n        for pagina in leitor_relatorio.pages:\n            escritor_pdf.add_page(pagina)\n\n        # Salva o novo arquivo PDF com a capa adicionada\n        with open(caminho_saida, 'wb') as arquivo_saida:\n            escritor_pdf.write(arquivo_saida)\n\n# Exemplo de uso:\n# adicionar_capas_a_pdfs('pasta_capas', 'pasta_relatorios',\n#                          'pasta_saida')\n\nif __name__ == \"__main__\":\n    # Exemplo de uso\n    adicionar_capas_a_pdfs('pasta_capas', 'pasta_relatorios', 'pasta_saida')"
  },
  {
    "objectID": "aula_t6.html#section-79",
    "href": "aula_t6.html#section-79",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Vamos agora copiar as pastas de capas e relatórios para dentro do nosso projeto.\n\nE criar uma pasta saida vazia para onde os arquivos gerados serão salvos.\nPrecisamos acertar os nomes das pastas no script.\n\n\nExemplo:\nif __name__ == \"__main__\":\n    # Exemplo de uso\n    adicionar_capas_a_pdfs('capas', 'relatorios', 'saida')"
  },
  {
    "objectID": "aula_t6.html#section-80",
    "href": "aula_t6.html#section-80",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Hora de testar o programa!\n\nConfira, por amostragem, pelo menos 3 arquivos gerados para conferir se deu certo."
  },
  {
    "objectID": "aula_t6.html#reutilizando-a-ferramenta",
    "href": "aula_t6.html#reutilizando-a-ferramenta",
    "title": "Automatizando Tarefas Tediosas",
    "section": "Reutilizando a ferramenta",
    "text": "Reutilizando a ferramenta\nVamos supor que essa operação fosse necessária mais vezes.\n\nE que precisasse ser feita por alguém que não é programador.\nQue tal pedirmos o Copilot para gerar uma interface gráfica simples para a ferramenta?\n\n\n\n\n\n\nPrompt\n\n\nEu gostaria de criar uma interface gráfica simples para essa ferramenta. Pode me ajudar?"
  },
  {
    "objectID": "aula_t6.html#section-81",
    "href": "aula_t6.html#section-81",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (início)\n\n\nClaro! Você pode criar uma interface gráfica simples usando o Tkinter, que já vem com o Python. Vou sugerir um exemplo básico onde o usuário pode selecionar as três pastas (capas, relatórios e saída) e clicar em um botão para executar a função.\nAdicione o seguinte código ao final do seu arquivo junta_capas.py:\n# ...existing code...\n\nimport tkinter as tk\nfrom tkinter import filedialog, messagebox\n\ndef selecionar_pasta(entry_widget):\n    pasta = filedialog.askdirectory()\n    if pasta:\n        entry_widget.delete(0, tk.END)\n        entry_widget.insert(0, pasta)\n\ndef executar():\n    pasta_capas = entry_capas.get()\n    pasta_relatorios = entry_relatorios.get()\n    pasta_saida = entry_saida.get()\n    try:\n        adicionar_capas_a_pdfs(pasta_capas, pasta_relatorios, pasta_saida)\n        messagebox.showinfo(\"Sucesso\", \"Arquivos gerados com sucesso!\")\n    except Exception as e:\n        messagebox.showerror(\"Erro\", str(e))"
  },
  {
    "objectID": "aula_t6.html#section-82",
    "href": "aula_t6.html#section-82",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (continuação)\n\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    root.title(\"Juntar Capas em PDFs\")\n\n    tk.Label(root, text=\"Pasta das Capas:\").grid(row=0, column=0, sticky=\"e\")\n    entry_capas = tk.Entry(root, width=40)\n    entry_capas.grid(row=0, column=1)\n    tk.Button(root, text=\"Selecionar\", command=lambda: selecionar_pasta(entry_capas)).grid(row=0, column=2)\n\n    tk.Label(root, text=\"Pasta dos Relatórios:\").grid(row=1, column=0, sticky=\"e\")\n    entry_relatorios = tk.Entry(root, width=40)\n    entry_relatorios.grid(row=1, column=1)\n    tk.Button(root, text=\"Selecionar\", command=lambda: selecionar_pasta(entry_relatorios)).grid(row=1, column=2)\n\n    tk.Label(root, text=\"Pasta de Saída:\").grid(row=2, column=0, sticky=\"e\")\n    entry_saida = tk.Entry(root, width=40)\n    entry_saida.grid(row=2, column=1)\n    tk.Button(root, text=\"Selecionar\", command=lambda: selecionar_pasta(entry_saida)).grid(row=2, column=2)\n\n    tk.Button(root, text=\"Executar\", command=executar, width=20).grid(row=3, column=0, columnspan=3, pady=10)\n\n    root.mainloop()\n# ...existing code..."
  },
  {
    "objectID": "aula_t6.html#section-83",
    "href": "aula_t6.html#section-83",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "GitHub Copilot (continuação)\n\n\nComo funciona:\n\nO usuário seleciona as três pastas usando os botões “Selecionar”.\nAo clicar em “Executar”, a função é chamada e mostra uma mensagem de sucesso ou erro.\n\nSe quiser, pode separar a interface em outro arquivo, mas assim fica tudo em um só. Se precisar de melhorias, é só pedir!"
  },
  {
    "objectID": "aula_t6.html#section-84",
    "href": "aula_t6.html#section-84",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Com esse código, temos uma interface gráfica simples, mas bem prática:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSe quiséssemos poderíamos novamente criar um atalho na área de trabalho para abrir essa interface gráfica."
  },
  {
    "objectID": "aula_t6.html#section-85",
    "href": "aula_t6.html#section-85",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Após termos feito esses dois exemplos, podemos pensar em um fluxo de trabalho para usar o Copilot na criação de ferramentas que usem módulos do Python.\n\nPedir ao Copilot (ou ChatGPT) para listar módulos do Python que podem ser usados para a tarefa de interesse.\nPerguntar ao Copilot sobre os prós e contras de cada módulo.\nEscolher o módulo que parece mais adequado.\nSe necessário, criar um ambiente virtual e instalar o módulo.\nSeguir o Ciclo de Projeto de Funções que vimos anteriormente, incluindo o módulo escolhido.\nSe ficarmos travados, tentamos um módulo diferente."
  },
  {
    "objectID": "aula_t6.html#section-86",
    "href": "aula_t6.html#section-86",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Nós acabamos de ter o 8º UFLA de Portas Abertas.\n\nE, dentro do evento, tivemos a Oficina de Programação de Jogos.\n\n\nNessa oficina, os participantes do evento experimentam, e modificam, jogos implementados como trabalho da disciplina IPOO de Sistemas de Informação.\n\nE um jogo para ensino de Python, desenvolvido como TCC de Ciência da Computação."
  },
  {
    "objectID": "aula_t6.html#section-87",
    "href": "aula_t6.html#section-87",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "No evento do ano anterior tínhamos duas dificuldades:\n\nDeixávamos todos os jogos em todas as máquinas, mas abríamos um jogo em cada máquina alternadamente.\n\nA ideia era que os participantes percebessem que havia vários jogos.\n\nDepois que os participantes alteravam o código de um jogo, precisávamos restaurar o código original para a próxima turma.\nDava uma trabalheira fazer isso na mão."
  },
  {
    "objectID": "aula_t6.html#prompt",
    "href": "aula_t6.html#prompt",
    "title": "Automatizando Tarefas Tediosas",
    "section": "Prompt",
    "text": "Prompt\nTenho alguns jogos desenvolvidos em Java usando a IDE Greenfoot que gostaria de utilizar em uma demonstração. A ideia é que a pessoa chegue e jogue os 7 jogos disponíveis no computador. Para jogar cada jogo é necessário abrir o projeto no Greenfoot e executar. Para facilitar esse processo, gostaria de ter uma espécie de “landing page” que mostrasse uma imagem de cada jogo e que, quando o usuário clicasse na imagem, o Greenfoot fosse aberto com o projeto do jogo em questão. Estou usando Linux Ubuntu e creio que para abrir o Greenfoot bastaria executar uma linha de comando passando o caminho do projeto como parâmetro. Essa “landing page” pode ser com qualquer tipo de tecnologia que seja fácil de fazer (pode ser web rodando local, ou uma aplicação Python, enfim, qualquer coisa). Procuro algo simples e rápido de fazer ou alterar."
  },
  {
    "objectID": "aula_t6.html#section-88",
    "href": "aula_t6.html#section-88",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Usei então o ChatGPT e Copilot para criar uma interface gráfica simples\n\nque funcionasse como uma tela inicial (launcher) que mostrasse os jogos disponíveis.\n\nQue permitisse iniciar os jogos ao clicar neles.\n\nE que também tivesse um botão para restaurar o código original do jogo.\n\nPara isso, usei um repositório git local para cada jogo.\nRestaurar o jogo era simplesmente rodar o comando git restore . na pasta do jogo."
  },
  {
    "objectID": "aula_t6.html#section-89",
    "href": "aula_t6.html#section-89",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Esse foi meu primeiro prompt para o ChatGPT:\n\n\n\n\nPrompt\n\n\nTenho alguns jogos desenvolvidos em Java usando a IDE Greenfoot que gostaria de utilizar em uma demonstração. A ideia é que a pessoa chegue e jogue os 7 jogos disponíveis no computador. Para jogar cada jogo é necessário abrir o projeto no Greenfoot e executar. Para facilitar esse processo, gostaria de ter uma espécie de “landing page” que mostrasse uma imagem de cada jogo e que, quando o usuário clicasse na imagem, o Greenfoot fosse aberto com o projeto do jogo em questão. Estou usando Linux Ubuntu e creio que para abrir o Greenfoot bastaria executar uma linha de comando passando o caminho do projeto como parâmetro. Essa “landing page” pode ser com qualquer tipo de tecnologia que seja fácil de fazer (pode ser web rodando local, ou uma aplicação Python, enfim, qualquer coisa). Procuro algo simples e rápido de fazer ou alterar."
  },
  {
    "objectID": "aula_t6.html#no-entanto",
    "href": "aula_t6.html#no-entanto",
    "title": "Automatizando Tarefas Tediosas",
    "section": "No entanto…",
    "text": "No entanto…\n\nBom, sistemas em produção são sempre mais complicados.\n\nO código que apresentei até aqui funcionou no meu computador.\nMas ao testar no notebook para preparar a aula, tive que fazer alguns ajustes.\n\nPorque nele, a versão do Ubuntu e do Python são mais recentes.\n\nE, claro, o Copilot me ajudou a fazer as alterações necessárias."
  },
  {
    "objectID": "aula_t6.html#section-90",
    "href": "aula_t6.html#section-90",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "O ChatGPT sugeriu três opções, já com exemplos de código\n\nUma página HTML que precisaria ser aberta com Electron ou com um servidor Python para conseguir executar scripts locais.\nUma aplicação Python com interface gráfica usando Tkinter.\nUm menu no terminal para a escolha do jogo.\n\n\nNão entendi porque ele sugeriu a opção 3 🤔\n\nMas, enfim, escolhi a opção 2, que me pareceu mais prática."
  },
  {
    "objectID": "aula_t6.html#section-91",
    "href": "aula_t6.html#section-91",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Usei o prompt:\n\n\n\n\nPrompt\n\n\nGostei da opção 2. Mas gostaria que a aplicação fosse aberta maximizada e que as imagens dos jogos ficasse todas do mesmo tamanho em um grid com 2 linhas e 4 colunas\n\n\n\n\n\nNão vou colocar todos os prompts aqui, não fiz de forma muito estruturada.\n\nDe um certo ponto em diante passei para o Copilot."
  },
  {
    "objectID": "aula_t6.html#section-92",
    "href": "aula_t6.html#section-92",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Mas alguns dos passos foram:\n\nForam geradas algumas versões de código que geravam erro (eu colava o erro no ChatGPT).\nDurante o processo, às vezes aparecia só o primeiro jogo, outra hora o primeiro e o quinto.\nQuando apareceram todos os jogos, a janela deixou de ficar maximizada.\nDepois, pedi para substituir um dos espaços de jogo por uma imagem.\nPedi que, ao abrir um jogo, a IDE fosse fechada antes (para não deixar várias instâncias em execução)."
  },
  {
    "objectID": "aula_t6.html#section-93",
    "href": "aula_t6.html#section-93",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Mas alguns dos passos foram:\n\nAcrescentei um dos jogos que era via Godot Engine e não via Greenfoot.\nAcrescentei o botão para restaurar o código original dos jogos.\n\n\nE esse foi o resultado final…"
  },
  {
    "objectID": "aula_t6.html#section-94",
    "href": "aula_t6.html#section-94",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Após termos feito esses dois exemplos, podemos pensar em um fluxo de trabalho para usar o Copilot na criação de ferramentas que usem módulos do Python.\n\nPedir ao Copilot (ou ChatGPT) para listar módulos do Python que podem ser usados para a tarefa de interesse.\nPerguntar ao Copilot sobre os prós e contras de cada módulo.\nEscolher o módulo que parece mais adequado.\nSe necessário, criar um ambiente virtual e instalar o módulo.\nSeguir o Ciclo de Projeto de Funções que vimos anteriormente, incluindo o módulo escolhido.\nSe ficarmos travados, tentamos um módulo diferente."
  },
  {
    "objectID": "aula_t6.html#exemplo-4",
    "href": "aula_t6.html#exemplo-4",
    "title": "Automatizando Tarefas Tediosas",
    "section": "Exemplo 4",
    "text": "Exemplo 4"
  },
  {
    "objectID": "aula_t6.html#section-95",
    "href": "aula_t6.html#section-95",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "No dia do evento, ainda tivemos uma surpresa.\n\nEu tinha testado o programa em uma máquina do laboratório.\n\nE como, em tese, todas as máquinas têm a mesma imagem, tudo funcionaria.\n\nMas ao fazer a instalação pela manhã, vimos que o programa não funcionava em algumas máquinas.\n\nPor que o módulo tkinter depende de instalação no sistema operacional.\n\nConsegui apoio para fazer a instalação (dependia de senha de administrador)."
  },
  {
    "objectID": "aula_t6.html#section-96",
    "href": "aula_t6.html#section-96",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Mas enquanto estava tentando isso, usei o ChatGPT e ele informou que uma alternativa seria usar o pygame.\n\nPois é um módulo Python que não depende de instalação no sistema operacional.\n\n\nPretendo fazer isso no próximo ano 😉"
  },
  {
    "objectID": "aula_t6.html#exemplo-4-juntando-fotos-de-vários-celulares",
    "href": "aula_t6.html#exemplo-4-juntando-fotos-de-vários-celulares",
    "title": "Automatizando Tarefas Tediosas",
    "section": "Exemplo 4: Juntando fotos de vários celulares",
    "text": "Exemplo 4: Juntando fotos de vários celulares"
  },
  {
    "objectID": "aula_t6.html#section-97",
    "href": "aula_t6.html#section-97",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Imagine que queremos juntar fotos dos nossos celulares e de nossos familiares.\n\nA ideia é ter tudo acessível em um único lugar.\nPara que todos possam ter acesso a todas as fotos.\nMas, provavelmente, existem fotos repetidas, que uma pessoa mandou para outra.\n\n\nVamos então criar uma ferramenta que faça isso para nós.\n\nObs.: não vou colocar todos os passos aqui, apenas os prompts usados no livro. Mas o processo é parecido com os exemplos anteriores."
  },
  {
    "objectID": "aula_t6.html#section-98",
    "href": "aula_t6.html#section-98",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Prompt\n\n\nEu preciso escrever um programa em Python que copia arquivos. Como posso fazer isso?\n\n\n\n\n\nA ideia de copiar arquivos em vez de movê-los é para evitar perda de dados.\n\n\n\n\nPrompt\n\n\nO módulo shutil precisa ser instalado?"
  },
  {
    "objectID": "aula_t6.html#section-99",
    "href": "aula_t6.html#section-99",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Prompt\n\n\nComo eu posso descobrir se dois arquivos PNG são idênticos usando Python?\n\n\n\n\n\n\n\n\n\nPrompt\n\n\nE se eu tiver centenas de arquivos PNG e quiser encontrar arquivos duplicados? Essa abordagem ainda funciona?\n\n\n\n\n\n\n\n\n\n\nPrompt\n\n\nComo eu posso descobrir se dois arquivos PNG são idênticos usando Python?"
  },
  {
    "objectID": "aula_t6.html#section-100",
    "href": "aula_t6.html#section-100",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "A partir daí o livro usa decomposição de problemas para criar a ferramenta.\n\nDefine as funções abaixo usando design top-down:\n\nFazer cópias de vários arquivos em uma pasta de destino, apenas se ele não for duplicado.\nFazer cópia de um arquivo em uma pasta de destino, apenas se ele não for duplicado.\nObter um bom nome para o arquivo copiado (para evitar perda de dados com conflito de nomes)."
  },
  {
    "objectID": "aula_t6.html#section-101",
    "href": "aula_t6.html#section-101",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "Essas são as assinaturas e docstrings das funções usadas no livro.\n\nComo já vimos antes, na hora de implementar seguimos o caminho bottom-up.\n\ndef obter_bom_nome_arquivo(caminho_arquivo):\n    \"\"\"\n    caminho_arquivo é o nome de um arquivo PNG.\n\n    Enquanto o arquivo caminho_arquivo existir, acrescenta\n    um caractere _ logo antes do .png e retorna o novo nome.\n    Ex.: 9595.png se torna 9595_.png.\n\n    Retorna o nome resultante do arquivo.\n    \"\"\""
  },
  {
    "objectID": "aula_t6.html#section-102",
    "href": "aula_t6.html#section-102",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "def fazer_copia(caminho_arquivo, pasta_destino):\n    \"\"\"\n    \"\"\""
  },
  {
    "objectID": "aula_t6.html#section-103",
    "href": "aula_t6.html#section-103",
    "title": "Automatizando Tarefas Tediosas",
    "section": "",
    "text": "def fazer_varias_copias(pastas, pasta_destino):\n    \"\"\"\n    \n    \"\"\""
  }
]