---
title: Lendo C√≥digo Python
subtitle: PASIA - Aula T.3
---

##  

O conte√∫do dessa aula √© baseado nos **cap√≠tulo 4 e 5** do livro abaixo.

![](imagens/livro_potter_zingaro.png){fig-align="center" fig-alt="Capa do livro de Potter e Zingaro." style="max-height: 50vh; width: auto;"}

# Introdu√ß√£o {background-color="#40666e"}

## Ler C√≥digo

[Ler c√≥digo]{.alert} significa [entender]{.alert} o que o c√≥digo faz ao examin√°-lo.

. . . 

Existem **dois n√≠veis de entendimento**:

- _Tracing description_: entender o que **cada linha de c√≥digo faz**.
- Entender o **objetivo geral** de um c√≥digo (fun√ß√£o, classe, etc.).

## Ler C√≥digo

O **1¬∫ n√≠vel** (_tracing description_) depende do conhecimento de estruturas e linguagem de programa√ß√£o.

. . .

J√° o **2¬∫ n√≠vel** (_objetivo geral_) √© geralmente o que esperamos encontrar na docstring de uma fun√ß√£o.

- E depende do entendimento de 1¬∫ n√≠vel.

## Por que √© importante a habilidade de ler c√≥digo?

**Ajuda a determinar se o c√≥digo est√° correto**:

- N√≥s usaremos testes para validar c√≥digo.
- Mas podemos ganhar tempo se conseguirmos identificar erros mais √≥bvios no c√≥digo, antes de gastar tempo escrevendo c√≥digo de teste.

. . .

**Para ter mais informa√ß√µes para os testes**:

- Entender o c√≥digo nos ajuda a identificar melhor os casos de testes que precisamos criar para validar a implementa√ß√£o.

## Por que √© importante a habilidade de ler c√≥digo?

**Para ajudar a escrever c√≥digo**:

- Por que escrever c√≥digo se vamos usar o Copilot?
- √Äs vezes √© mais r√°pido alterarmos n√≥s mesmos o c√≥digo, do que ficar mudando prompt at√© obter o c√≥digo correto.
- E, por fim, h√° evid√™ncia cient√≠fica de que conseguir explicar c√≥digo linha a linha √© pr√©-requisito para conseguir escrever c√≥digo.

##

A ideia aqui n√£o √© entender cada detalhe de cada linha do c√≥digo.

- E sim aprender a como usar o Copilot para chegar num meio termo entre:
  - _‚ÄúEsse c√≥digo faz m√°gica‚Äù_ 
  - e _‚ÄúEu sei exatamente como cada linha de c√≥digo funciona‚Äù_.

# Usando Copilot para Entender C√≥digo {background-color="#40666e"}

##

Nas aulas anteriores escremos prompt para que o Copilot explicasse um trecho de c√≥digo pra gente.
 
- Mas o Copilot tamb√©m tem **comandos espec√≠ficos** al√©m de texto livre.

. . .

Podemos usar o comando `/explain` por exemplo.

- Selecionamos a fun√ß√£o (ou trecho de c√≥digo) que queremos entender e acessamos com o bot√£o direito do mouse **a op√ß√£o Copilot -> Explain** 
  - ou **digitamos `/explain` no chat** (seja com <kbd>Ctrl</kbd> + <kbd>I</kbd> ou no chat).

##

::: {.callout-tip}
Podemos complementar o comando `/explain` com mais detalhes.

Isso √© especialmente √∫til para fazermos com que o Copilot entenda que queremos as explica√ß√µes em portugu√™s.
:::


##

Vamos usar como exemplo a fun√ß√£o `melhor_palavra`.

```python
def melhor_palavra(palavras):
    """
    palavras √© uma lista de palavras.

    Retorna a palavra com a maior pontua√ß√£o.
    """
    melhor = palavras[0]
    max_pontos = numero_de_pontos(melhor)

    for palavra in palavras[1:]:
        pontos = numero_de_pontos(palavra)
        if pontos > max_pontos:
            melhor = palavra
            max_pontos = pontos

    return melhor
```

##

Primeira parte da explica√ß√£o:

<div style="overflow:auto; text-align:center;">
  <img src="imagens/copilot_explicacao_melhor_palavra_part1.png" alt="Primeira parte da explica√ß√£o do Copilot sobre a fun√ß√£o melhor_palavra." style="width:auto; max-width:100%;">
</div>

##

<div style="overflow:auto; text-align:center;">
  <img src="imagens/copilot_explicacao_melhor_palavra_part2.png" alt="Segunda parte da explica√ß√£o do Copilot sobre a fun√ß√£o melhor_palavra." style="width:auto; max-width:100%;">
</div>

##

Veja que, na explica√ß√£o, o Copilot j√° destacou pontos de d√∫vidas e sugeriu melhoria.

- Nem sempre ele faz isso. Demos sorte nessa vez. üòÉ

. . .

Se uma fun√ß√£o tiver um c√≥digo com o qual n√£o temos familiaridade,
podemos pedir uma **explica√ß√£o linha a linha**.

- Usando `\explain linha a linha`, por exemplo.

##

<div style="overflow-y:auto; max-height:60vh; width:100%; text-align:center;">
  <img src="imagens/copilot_explicacao_melhor_palavra_linha_a_linha.png" alt="Explica√ß√£o do Copilot linha a linha sobre a fun√ß√£o melhor_palavra." style="width:100%; height:auto;">
</div>

##

Como professor √© incr√≠vel que agora os alunos tenham com quem **tirar d√∫vidas** quantas vezes for necess√°rio.

. . .

Apenas lembre-se que a explica√ß√£o do Copilot pode estar errada. 

- A√≠ voc√™ pode pensar: ent√£o pra que ela serve?

. . .

Realmente pode ser frustrante.

- Mas na maioria dos c√≥digos, especialmente mais simples, as explica√ß√µes s√£o corretas.
- E, sem o Copilot, se voc√™ tivesse d√∫vidas e procurasse um amigo ou no Google, poderia obter respostas erradas tamb√©m.
    
##


::: {.callout-tip}
Uma maneira de diminuir a possibilidade de erro √© pedir a explica√ß√£o mais de uma vez.

√â bem raro que o Copilot explique errado mais de uma vez.
:::


##

Vamos usar outro exemplo de explica√ß√£o do Copilot.

- Suponha que voc√™ precise entender uma fun√ß√£o j√° existente em um projeto.

. . .

::: {.halfincfontsize}
```python
def clean_number(phone_number):
    phone_number = phone_number.replace("(", "")
    phone_number = phone_number.replace(")", "")
    phone_number = phone_number.replace("-", "")
    phone_number = phone_number.replace(" ", "")
    return phone_number
```
:::

. . .

Vamos ver a explica√ß√£o do Copilot em portugu√™s.

##

<div style="overflow:auto; text-align:center;">
  <img src="imagens/copilot_explicacao_clean_number.png" alt="Explica√ß√£o do Copilot sobre a fun√ß√£o clean_number." style="width:auto; max-width:100%;">
</div>

##

Veja que neste caso o Copilot fez uma explica√ß√£o e sugeriu uma melhoria.

- Antes de avaliar a sugest√£o de melhoria √© importante que voc√™ avalie
  se realmente entendeu a explica√ß√£o dada para o c√≥digo atual.

. . .

Por exemplo, se n√£o tiver ficado claro como o m√©todo `replace` funciona, voc√™ pode pedir uma explica√ß√£o mais detalhada sobre isso.

##

<div style="overflow:auto; text-align:center;">
  <img src="imagens/copilot_explicacao_clean_number_replace.png" alt="Explica√ß√£o do Copilot sobre o uso da fun√ß√£o replace na implementa√ß√£o da fun√ß√£o clean_number." style="width:auto; max-width:100%;">
</div>

##

Voc√™ pode continuar pedindo mais informa√ß√µes do Copilot at√© julgar que tem um n√≠vel de entendimento adequado para a tarefa que precisa.

- Lembre-se do que falamos no in√≠cio da aula
- N√£o √© necess√°rio entender cada detalhe do c√≥digo.
  - Mas temos que sair do est√°gio _‚ÄúEsse c√≥digo faz m√°gica‚Äù_.
  - Para conseguirmos depois validar o nosso c√≥digo.
  - E assim resolver a tarefa que precisamos.

##

Voltando na explica√ß√£o inicial dada pelo Copilot

- voc√™ alteraria seu c√≥digo para usar a solu√ß√£o _"mais limpa e eficiente"_, segundo ele, que usa o m√≥dulo `re`?

. . .

Que **crit√©rios** adotar para decidir aceitar ou n√£o a sugest√£o?

##

::: {.callout-tip}
Minha sugest√£o √©: use a op√ß√£o que voc√™ entenda melhor.

Voc√™ pode j√° ficar satisfeito com o c√≥digo original, ou pode pedir ao Copilot explica√ß√µes sobre a sugest√£o de melhoria.
E depois de ter entendido as duas op√ß√µes, escolher a que te parece melhor.
:::

. . .

::: {.nonincremental}
::: {.callout-tip}
√â melhor ter mais rapidamente uma vers√£o do sistema que funciona corretamente e depois otimiz√°-la, se necess√°rio,
do que tentar j√° otimizar c√≥digo antes mesmo de saber se ele vai atender o que precisa.

- Pode ser, por exemplo, que uma fun√ß√£o que voc√™ est√° otimizando agora acabe nem sendo usada mais adiante.
:::
:::


# Os 10 Principais T√≥picos em Python {background-color="#40666e"}

##

O livro que estamos usando como refer√™ncia, lista os **10 principais t√≥picos em Python** que precisamos entender

- para conseguir acompanhar tudo que √© apresentado no livro.

. . .

Como voc√™ j√° fez disciplinas de programa√ß√£o, voc√™ pode ter um  entendimento razo√°vel dessas estruturas em outras linguagens. 

- Mas √© importante que consiga entend√™-las na sintaxe do Python.
- Se voc√™ j√° programa em Python √© bom revisar seu conhecimento.
- Se est√° come√ßando na linguagem agora √© uma boa hora de conhec√™-las.

## Os 10 Principais T√≥picos em Python

::: {.columns}
:::: {.column width="50%"}
1. Fun√ß√µes  
2. Vari√°veis  
3. Condicionais  
4. Strings  
5. Listas  
::::
:::: {.column width="50%"}
6. Loops  
7. Indenta√ß√£o  
8. Dicion√°rios  
9. Arquivos  
10. M√≥dulos  
::::
:::

## 

Fiquei pensando na melhor forma de passar esse conte√∫do nessa disciplina.

- Poderia ser interessante para alguns alunos fazer uma revis√£o completa desses conceitos na aula.
- Mas poderia ser tedioso para outros uma aula em formato expositivo.

##

Creio que √© muito mais interessante estudar as estruturas de maneira mais pr√°tica e interativa.

- Especialmente para quem j√° fez outras disciplinas de programa√ß√£o.

. . .

E, como temos Assistentes de IA √† nossa disposi√ß√£o

- por que n√£o utiliz√°-los para apoiar essa tarefa.

##

Em vez de sair simplesmente perguntando para um Assistente de IA o que s√£o esses conceitos,

- podemos usar um pouco de [Engenharia de Prompt]{.alert} para tornar esse processo mais interessante.

. . .

Ainda vamos ter aula espec√≠fica sobre Engenharia de Prompt.

- E pode ser que ao chegar nela a gente conclua que a abordagem que vou sugerir poderia ser melhor.
- Mas o que preparei j√° pode ser um bom come√ßo.

# Um pouco de Engenharia de Prompt {background-color="#40666e"}

##

Algumas das recomenda√ß√µes mais comuns de Engenharia de Prompt s√£o:

- **Dar contexto**.
- **Definir o papel (_persona_) do modelo**.
- **Ser claro e espec√≠fico**.
- **Definir o formato da resposta esperada**.
- **Iterar e refinar o prompt**.

## 

Seguindo essas ideias pensei no seguinte formato de estudo

- que voc√™ pode (e deve) adaptar para a sua realidade.

. . .

::: {.halfincfontsize}
::: {.callout-note}
#### Dar contexto
Considere que sou estudante de um curso de TI. J√° fiz disciplinas introdut√≥rias de programa√ß√£o, mas tenho certa dificuldade dificuldade com conceitos de programa√ß√£o. Conhe√ßo razoavelmente a linguagem Java e agora gostaria de aprender Python.
:::
:::

##

::: {.halfincfontsize}
::: {.callout-note}
#### Definir o papel (_persona_) do modelo
Atue como um professor de programa√ß√£o paciente, criativo e com √≥tima did√°tica.
:::
:::

. . .

::: {.halfincfontsize}
::: {.callout-note}
#### Ser claro e espec√≠fico
Poderia me guiar por uma sess√£o de conversa que apresente de forma did√°tica a linguagem Python comparando as constru√ß√µes com Java? Gostaria de abordar essas 10 constru√ß√µes em Python: Fun√ß√µes, Vari√°veis, Condicionais, Strings, Listas, Loops, Indenta√ß√£o, Dicion√°rios, Arquivos e M√≥dulos.
:::
:::

##

::: {.halfincfontsize}
::: {.callout-note}
#### Definir o formato da resposta esperada
Gostaria que a sess√£o fosse interativa, apresentando um conceito de cada vez, com exemplos pr√°ticos, compara√ß√µes com Java e perguntas de m√∫ltipla escolha para fixa√ß√£o do conte√∫do.
:::
:::


##

::: {.halfincfontsize}
::: {.callout-note}
#### Iterar e refinar o prompt
√â comum que um prompt n√£o funcione como gostar√≠amos.
Podemos ent√£o alter√°-lo para conseguir o que queremos.

Nesse caso como estou pedindo uma sess√£o interativa, podemos experiment√°-la e,
se ao longo do processo n√£o estivermos satisfeitos, interrompemos a
sess√£o e fazemos um novo prompt.
:::
:::

##

Podemos montar um texto corrido com tudo que escrevemos ou voc√™ pode ser mais espec√≠fico usando um **prompt estruturado**:

::: {.halfincfontsize}
```
  Contexto: Considere que sou estudante ...
  Persona: Atue como um professor ...
  Tarefa: Poderia me guiar ...
  Formato: Gostaria que a sess√£o fosse ...
```
:::


# Conhecendo/revisando os 10 t√≥picos principais em Python {background-color="#40666e"}

## Sess√£o interativa com Copilot

Vamos ent√£o testar!

```
Contexto: Considere que sou estudante de um curso de TI. J√° fiz disciplinas introdut√≥rias de programa√ß√£o, mas tenho certa dificuldade dificuldade com conceitos de programa√ß√£o. Conhe√ßo razoavelmente a linguagem Java e agora gostaria de aprender Python.
Persona: Atue como um professor de programa√ß√£o paciente, criativo e com √≥tima did√°tica.
Tarefa: Poderia me guiar por uma sess√£o de conversa que apresente de forma did√°tica a linguagem Python comparando as constru√ß√µes com Java? Gostaria de abordar essas 10 constru√ß√µes em Python: Fun√ß√µes, Vari√°veis, Condicionais, Strings, Listas,Loops, Indenta√ß√£o, Dicion√°rios, Arquivos e M√≥dulos.
Formato: Gostaria que a sess√£o fosse interativa, apresentando um conceito de cada vez, com exemplos pr√°ticos, compara√ß√µes com Java e perguntas de m√∫ltipla escolha para fixa√ß√£o do conte√∫do.
```

##

::: {.nonincremental}

::: {.callout-tip}
Durante a sess√£o interativa o Copilot deve te pedir para escrever trechos de c√≥digo
em Python e, para isso, voc√™ precisar√° pular linha. Mas se usar <kbd>ENTER</kbd> voc√™
envia o prompt incompleto. Use <kbd>Shift</kbd> + <kbd>ENTER</kbd> para pular linha.
:::


Vamos fazer uma sess√£o interativa dessas aqui na sala para revisar os conceitos.

- E √© **altamente recomend√°vel** que voc√™ fa√ßa depois em casa, adaptando o prompt √† sua realidade.
- Para tornar o processo ainda mais interativo, vamos usar o 
  [PollEverywhere](https://www.polleverywhere.com/multiple_choice_polls/kZQNDtzSrq02FX6N3CQMK) 
  para responder √†s perguntas durante a sess√£o.

:::

##

::: {.callout-tip}
Al√©m de experimentar prompts diferentes, voc√™ pode tamb√©m usar Assistentes de IA diferentes.

Eu testei com Copilot, ChatGPT e Gemini e a intera√ß√£o de cada um deles foi diferente.
Gemini pediu para escrever c√≥digo Python, ChatGPT esqueceu de tratar fun√ß√µes :)

Mas, lembre-se, se usar o mesmo prompt de novo pode ter uma intera√ß√£o diferente.
:::

## Din√¢mica em duplas

Vamos passar agora para uma segunda parte de fixa√ß√£o das 10 principais estruturas em Python.

. . .

Quando preparei a aula, logo ap√≥s a sess√£o interativa, pedi ao Copilot para gerar 
20 exerc√≠cios de fixa√ß√£o sobre as 10 estruturas do Python, usando o prompt abaixo.

```
Agora gostaria que gerasse 20 perguntas de m√∫ltipla escolha, sendo 2 de cada uma das estruturas de Python que citei anteriormente. Gostaria que as perguntas fossem listadas em Markdown para que eu possa passar para o outro arquivo. E o gabarito deve ser fornecido somente ao final.
```

##

Vamos formar duplas e cada dupla vai responder os exerc√≠cios.

- N√£o √© necess√°rio identificar os nomes, basta dar um nome para a dupla.
- Anote o gabarito de voc√™s no caderno para facilitar a pr√≥xima etapa da din√¢mica.

##

Depois de respondidos os exerc√≠cios, cada dupla receber√° as respostas de outra dupla.

- E vai preencher a folha de confer√™ncia.
- Justificando as respostas incorretas.

##

Para fechar a din√¢mica vamos comparar as respostas com o gabarito oficial.

## Fun√ß√µes

::: {.nonincremental}
1. Qual √© a forma correta de definir uma fun√ß√£o que retorna o quadrado de um n√∫mero em Python?

a) `def quadrado(n): return n * n`
b) `function quadrado(n) { return n * n }`
c) `def quadrado(n) { return n * n }`
d) `int quadrado(int n) { return n * n }`
:::

. . .

**Resposta: a**

## Fun√ß√µes

::: {.nonincremental}
2. O que acontece se uma fun√ß√£o Python n√£o possui a instru√ß√£o `return`?

a) Retorna `0`
b) Retorna `None`
c) Retorna `False`
d) Retorna vazio
:::

. . .

**Resposta: b**

## Vari√°veis

::: {.nonincremental}
3. Qual destas op√ß√µes declara corretamente uma vari√°vel chamada `idade` com valor 25 em Python?

a) `int idade = 25`
b) `idade = 25`
c) `idade := 25`
d) `var idade = 25`

:::

. . .

**Resposta: b**

## Vari√°veis

::: {.nonincremental}
4. O que acontece se voc√™ atribuir um valor string a uma vari√°vel que antes era um inteiro?

a) Erro de tipo
b) Python converte automaticamente para inteiro
c) Python aceita a mudan√ßa de tipo
d) O valor anterior √© mantido
:::

. . .

**Resposta: c**

## Condicionais

::: {.nonincremental}
5. Qual √© a sintaxe correta para um if em Python?

a) `if (x > 10) { print("maior") }`
b) `if x > 10: print("maior")`
c) `if x > 10 then print("maior")`
d) `if x > 10 { print("maior") }`
:::

. . .

**Resposta: b**

## Condicionais

::: {.nonincremental}
6. Qual palavra-chave √© usada para m√∫ltiplas condi√ß√µes em Python?

a) `elseif`
b) `else if`
c) `elif`
d) `otherwise`
:::

. . .

**Resposta: c**

## Strings

::: {.nonincremental}
7. Qual comando imprime o tamanho da string `"Python"`?

a) `print(size("Python"))`
b) `print(length("Python"))`
c) `print(len("Python"))`
d) `print(count("Python"))`
:::

. . .

**Resposta: c**

## Strings

::: {.nonincremental}
8. Qual m√©todo transforma todos os caracteres de uma string para mai√∫sculas?

a) `upper()`
b) `capitalize()`
c) `toUpper()`
d) `uppercase()`
:::

. . .

**Resposta: a**

## Listas

::: {.nonincremental}
9. Como criar uma lista com os elementos 1, 2 e 3?

a) `lista = [1, 2, 3]`
b) `lista = (1, 2, 3)`
c) `lista = {1, 2, 3}`
d) `lista = <1, 2, 3>`
:::

. . .

**Resposta: a**

## Listas

::: {.nonincremental}
10. Qual m√©todo adiciona um elemento ao final de uma lista?

a) `add()`
b) `append()`
c) `insert()`
d) `push()`
:::

. . .

**Resposta: b**

## Loops

::: {.nonincremental}
11. Qual √© a forma correta de percorrer uma lista chamada nomes e imprimir cada elemento?

a) `for nome in nomes: print(nome)`
b) `for nome of nomes: print(nome)`
c) `for (nome in nomes) { print(nome) }`
d) `foreach nome in nomes: print(nome)`
:::

. . .

**Resposta: a**

## Loops

::: {.nonincremental}
12. O que faz o comando `range(5)` em um loop for?

a) Cria uma lista de 1 a 5
b) Cria uma lista de 0 a 5
c) Cria uma lista de 0 a 4
d) Cria uma lista de 1 a 4
:::

. . .

**Resposta: c**

## Indenta√ß√£o

::: {.nonincremental}
13. O que acontece se voc√™ esquecer de indentar o corpo de uma fun√ß√£o em Python?

a) O c√≥digo funciona normalmente
b) O Python ignora o bloco
c) O Python gera erro de indenta√ß√£o
d) O Python executa sem problemas
:::

. . .

**Resposta: c**

## Indenta√ß√£o

::: {.nonincremental}
14. Qual √© o padr√£o de indenta√ß√£o recomendado em Python?

a) 2 espa√ßos
b) 4 espa√ßos
c) 1 tabula√ß√£o
d) N√£o √© necess√°rio indentar
:::

. . .

**Resposta: b**

## Dicion√°rios

::: {.nonincremental}
15. Como criar um dicion√°rio com as chaves `"a"` e `"b"` e valores `1` e `2`?

a) `d = {"a": 1, "b": 2}`
b) `d = ["a": 1, "b": 2]`
c) `d = ("a": 1, "b": 2)`
d) `d = <"a": 1, "b": 2>`
:::

. . .

**Resposta: a**

## Dicion√°rios

::: {.nonincremental}
16. Como acessar o valor da chave `"nome"` em um dicion√°rio chamado aluno?

a) `aluno["nome"]`
b) `aluno.nome`
c) `aluno->nome`
d) `aluno.get("nome")`
:::

. . .

**Resposta: a**

## Arquivos

::: {.nonincremental}
17. Qual comando abre um arquivo para leitura em Python?

a) `open("arquivo.txt", "r")`
b) `open("arquivo.txt", "w")`
c) `open("arquivo.txt", "a")`
d) `open("arquivo.txt", "rw")`
:::

. . .

**Resposta: a**

## Arquivos

::: {.nonincremental}
18. Qual m√©todo l√™ todo o conte√∫do de um arquivo aberto?

a) `read()`
b) `readline()`
c) `readall()`
d) `get()`
:::

. . .

**Resposta: a**

## M√≥dulos

::: {.nonincremental}
19. Como importar o m√≥dulo `math` em Python? ______

a. `import math`
b. `include math`
c. `using math`
d. `require math`
:::


. . .

**Resposta: a**

## M√≥dulos

::: {.nonincremental}
20. Como importar apenas a fun√ß√£o `sqrt` do m√≥dulo math?

a) `from math import sqrt`
b) `import sqrt from math`
c) `math.sqrt()`
d) `include sqrt from math`
:::

. . .

**Resposta: a**

##

::: {.callout-tip}
Em casa voc√™ pode gerar outro question√°rio para estudar podendo direcionar melhor.
Voc√™ pode pedir mais exerc√≠cios de algum t√≥pico, ou se basear em compara√ß√µes
com outra linguagem por exemplo.
:::

## Videoaula

::: {.nonincremental}

Para quem prefere um material em v√≠deo, h√° v√°rios dispon√≠veis na internet.

- Uma sugest√£o s√£o esses v√≠deos iniciais de um curso de Ci√™ncia de Dados do ICMC.

::: {.columns}
:::: {.column width="50%"}
<iframe width="100%" height="315" src="https://www.youtube.com/embed/LxP-r00E2fo" title="Aula 1 - Introdu√ß√£o ao Python" frameborder="0" allowfullscreen></iframe>
::::
:::: {.column width="50%"}
<iframe width="100%" height="315" src="https://www.youtube.com/embed/1TEVHMv3vcs" title="Aula 2 - Fun√ß√µes e POO" frameborder="0" allowfullscreen></iframe>
::::
:::

:::

# Quiz mais avan√ßado {background-color="#40666e"}

##

::: {.nonincremental}
Se ainda tivermos tempo, nossa √∫ltima parte ser√° um [Quiz](https://www.polleverywhere.com/activities?folder=20148464) no Poll Everywhere,
mas agora com perguntas um pouco mais avan√ßadas.


N√£o se preocupe se n√£o precisar chutar respostas, afinal podem ser perguntas de coisas que n√£o revisamos.

- Mas vou aproveitar o gancho para comentar sobre elas.

::: {.callout-tip}
Na primeira vez que gerei esse Quiz o Copilot gerou respostas estranhas em alguns casos. 
Lembre-se que Assistentes de IA podem gerar respostas erradas.

Uma dica quando estiver estudando sozinho √© experimentar o c√≥digo voc√™ mesmo para conferir.
:::
:::
