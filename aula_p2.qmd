---
title: Projetando Fun√ß√µes
subtitle: PASIA - Aula P.2
---

##  

O conte√∫do dessa aula √© baseado em **partes dos cap√≠tulos 2 e 3** do livro abaixo.

![](imagens/livro_potter_zingaro.png){fig-align="center" fig-alt="Capa do livro de Potter e Zingaro." style="max-height: 50vh; width: auto;"}

# Caracter√≠sticas de boas fun√ß√µes (cont.) {background-color="#40666e"}

##

Na aula anterior, vimos um [guia para criarmos boas fun√ß√µes]{.alert}:

1. Uma tarefa clara a realizar
2. Comportamento claramente definido
3. Poucas linhas de c√≥digo
4. Uso geral em vez de uso espec√≠fico
5. Entrada e sa√≠da claras

## Exemplos de **boas** fun√ß√µes folha

- _Calcular o volume de uma esfera_ 
  - Dado o raio da esfera calcula seu volume.
- _Encontrar o maior n√∫mero em uma lista_
  - Dada uma lista, retorna seu maior valor.
- _Verificar se a lista cont√©m um valor espec√≠fico_ 
  - Dada uma lista e um valor, retornar True se ela tem o valor e False em caso contr√°rio.

## Exemplos de **boas** fun√ß√µes folha

- _Exibir o estado de um jogo de Xadrez_
  - Dada uma lista 2D representando o tabuleiro do jogo, exibir o tabuleiro na tela em formato texto.
- _Inserir um valor em uma lista_
  - Dada uma lista, um novo valor e uma posi√ß√£o na lista, retornar uma nova lista que √© a lista original com o novo valor inserido na posi√ß√£o especificada.

## Fun√ß√µes folha **ruins**

Vamos agora ver alguns exemplos de fun√ß√µes folha ruins e porque elas s√£o ruins.

. . .

_Pedir informa√ß√µes fiscais de um usu√°rio e calcular seu imposto de renda_

- Calcular imposto de renda envolve v√°rios c√°lculos que deveriam ser implementados em fun√ß√µes separadas.

## Fun√ß√µes folha **ruins**

_Remover o maior valor de uma lista_

- Pode n√£o parecer ruim a princ√≠pio, mas veja que estamos fazendo duas coisas.
  - Precisamos encontrar o maior valor na lista.
  - E precisamos remover um valor da lista.
- Assim, seria mais reutiliz√°vel ter uma fun√ß√£o folha para cada subtarefa.
  - Obs.: pode ser √∫til criar uma fun√ß√£o n√£o folha que chama as outras duas se isso for usado v√°rias vezes em um sistema.

## Fun√ß√µes folha **ruins**

_Dado um conjunto de dados estat√≠sticos de partidas de futebol, retornar os nomes dos zagueiros que correram mais de 8 km_

- H√° muita informa√ß√£o espec√≠fica nesse caso.
- Claramente a dist√¢ncia percorrida poderia ser um par√¢metro.
- Mas, se pensarmos bem, inclusive a posi√ß√£o dos jogadores poderia ser um par√¢metro.
- Melhor ainda seria se a pr√≥pria estat√≠stica fosse um par√¢metro.
  - Poder√≠amos querer consultar, por exemplo, o nome dos goleiro que fizeram mais que 10 gols.

## Fun√ß√µes folha **ruins**

_Determinar o melhor filme de todos os tempos_

- O problema dessa fun√ß√£o √© que ela √© muito vaga.
  - O que define o que √© um bom filme?
  - Quais filmes deveriam ser considerados?
- Seria mais claro se a fun√ß√£o recebesse uma lista de filmes com suas respectivas avalia√ß√µes e um n√∫mero limite de avalia√ß√µes.
  - E retornasse os filmes melhor avaliados que tivessem, no m√≠nimo, o n√∫mero de avalia√ß√µes passado como limite.

## Fun√ß√µes folha **ruins**

_Jogar Call of Duty_

- Precisa explicar? ü§ì
 
# Dica: escolhendo sugest√£o do Copilot  {background-color="#40666e"}

##

Quando pedimos ao Copilot para gerar um c√≥digo, podemos avaliar outras poss√≠veis sugest√µes dele.

. . .

Para exemplificar isso, suponha que vamos criar um programa para jogar `Scrabble`.

![](imagens/jogo_scrabble.png){fig-align="center" fig-alt="Jogo de tabuleiro Scrabble em portugu√™s."}

. . .

- √â um jogo de tabuleiro baseado em palavras-cruzadas.

##

![](imagens/jogo_scrabble.png){fig-align="center" fig-alt="Jogo de tabuleiro Scrabble em portugu√™s."}

Dois jogadores devem ir completando palavras em um tabuleiro com pe√ßas de letras.

- E, cada vez que um jogador consegue incluir uma palavra, ele ganha pontos de acordo com as letras da palavra.

##

Vamos trabalhar aqui apenas com a fun√ß√£o que calcula os pontos de uma palavra.

- O cabe√ßalho e docstring abaixo mostram como √© o c√°lculo na vers√£o do jogo em portugu√™s.

. . .

```python 
def numero_de_pontos(palavra):
    """
    Cada letra na palavra vale os seguintes pontos:
    a, e, i, o, u, m, s, r, t: 1 ponto
    d, l, c, p: 2 pontos
    n, b, √ß: 3 pontos
    f, g, h, v: 4 pontos
    j: 5 pontos
    q: 6 pontos
    x, z: 8 pontos

    palavra √© uma palavra formada por letras caracteres min√∫sculos
    Retorna a soma dos pontos de cada letra da palavra
    """
```

## 

Uma poss√≠vel resposta do Copilot para o corpo da fun√ß√£o √©:

```python 
    pontos = 0
    for letra in palavra:
        if letra in "aeioumsrt":
            pontos += 1
        elif letra in "dlcp":
            pontos += 2
        elif letra in "nb√ß":
            pontos += 3
        elif letra in "fghv":
            pontos += 4
        elif letra == "j":
            pontos += 5
        elif letra == "q":
            pontos += 6
        elif letra in "xz":
            pontos += 8
    return pontos
```

## 

O c√≥digo parece razo√°vel, e nosso pr√≥ximo passo seria testar a fun√ß√£o.

- Mas o ponto que quero mostrar aqui √© como escolher as sugest√µes do Copilot.

## 

Quando o Copilot sugere o c√≥digo, ele aparece esmaecido e em it√°lico.

- Antes de apertarmos <kbd>TAB</kbd> para aceitar o c√≥digo, 
- podemos avaliar outras sugest√µes que o Copilot oferece.
  - Isso pode ser feito passando o mouse sobre o c√≥digo e escolhendo no painel que aparece acima do c√≥digo.
  - Ou pelo atalho <kbd>ALT</kbd> + <kbd>]</kbd> para ver a pr√≥xima sugest√£o ou <kbd>ALT</kbd> + <kbd>[</kbd> para ver a anterior.

##

Uma segunda sugest√£o feita pelo c√≥digo para o corpo da fun√ß√£o foi:

```python 
    pontos = {
        'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1, 'm': 1, 's': 1, 'r': 1, 't': 1,
        'd': 2, 'l': 2, 'c': 2, 'p': 2,
        'n': 3, 'b': 3, '√ß': 3,
        'f': 4, 'g': 4, 'h': 4, 'v': 4,
        'j': 5,
        'q': 6,
        'x': 8, 'z': 8
    }
    total = 0
    for letra in palavra:
        total += pontos.get(letra, 0)  # Adiciona o valor da letra ou 0 se n√£o estiver no dicion√°rio
    return total
```

. . .

Repare que ela √© bem diferente da anterior.

##

Essa segunda sugest√£o usa um [dicion√°rio]{.alert} para guardar o valor de cada letra.

- Um dicion√°rio do Python √© uma estrutura similar a um `HashMap` do Java.

. . .

No c√≥digo, o dicion√°rio `pontos` usa as letras como chaves e os pontos correspondentes como valores.

- Assim, ao percorrer a palavra uma letra de cada vez.
  - podemos consultar o dicion√°rio para buscar quanto vale a letra.

## 

::: {.nonincremental}
Em uma terceira sugest√£o, o Copilot fez a soma dos pontos em uma √∫nica linha, trocando o trecho

::: {.fontsize125}
```python 
    total = 0
    for letra in palavra:
        total += pontos.get(letra, 0)  # Adiciona o valor da letra ou 0 se n√£o estiver no dicion√°rio
    return total
```
:::

por

::: {.fontsize125}
```python 
    return sum(pontos.get(letra, 0) for letra in palavra)
```
:::

:::

- Esse tipo de constru√ß√£o usando [list comprehension]{.alert} √© muito comum em Python.

##

::: {.callout-tip}
Voc√™ pode fazer com o que o painel de escolha das sugest√µes do Copilot fique sempre vis√≠vel, 
para n√£o precisar passar o mouse sobre o c√≥digo para acess√°-lo.

Para isso, quando ele aparecer uma vez, acesse os bot√£o de tr√™s pontos ao final do painel e 
escolha a op√ß√£o _Always show toolbar_.
:::

##

Para fechar o exemplo, suponha que o Ti√£o est√° jogando Scrabble

- e tem tr√™s palavras que poderiam ser encaixadas agora: _zape_, _pazes_ e _pizza_.
- ele gostaria de saber qual palavra d√° mais pontos.

. . .

O que acha do cabe√ßalho abaixo para uma fun√ß√£o que retorne a melhor dessas tr√™s palavras?

::: {.fontsize125}
```python
def melhor_palavra(palavra1, palavra2, palavra3):
```
:::

##

::: {.fontsize125}
```python
def melhor_palavra(palavra1, palavra2, palavra3):
```
:::

De acordo com o **guia para criarmos boas fun√ß√µes** essa n√£o √© uma boa fun√ß√£o, por que?

- Ela poderia ser mais geral, funcionando para qualquer quantidade de palavras.
- Poder√≠amos, por exemplo, receber uma lista de palavras como par√¢metro.

. . .

Vamos ent√£o melhorar a defini√ß√£o da fun√ß√£o.

##

::: {.fontsize125}
```python
def melhor_palavra(palavras):
    """
    palavras √© uma lista de palavras.

    Retorna a palavra com a maior pontua√ß√£o.
    """
```
```python {.fragment start=7}
    if not palavras:
        return None  # Retorna None se a lista estiver vazia

    melhor = palavras[0]
    max_pontos = numero_de_pontos(melhor)

    for palavra in palavras[1:]:
        pontos = numero_de_pontos(palavra)
        if pontos > max_pontos:
            melhor = palavra
            max_pontos = pontos

    return melhor
```
:::

##

Escolhendo entre as sugest√µes do Copilot, essa foi outra op√ß√£o:

::: {.fontsize125}
```python
def melhor_palavra(palavras):
    """
    palavras √© uma lista de palavras.

    Retorna a palavra com a maior pontua√ß√£o.
    """
    return max(palavras, key=numero_de_pontos)
```
:::

. . .

Qual das duas op√ß√µes voc√™ prefere?

##

Talvez seja prematuro escolher sem fazer testes.

. . .

Veja esse teste feito com a segunda op√ß√£o:

::: {.fontsize125}
```python {.fragment code-line-numbers="false"}
>>> melhor_palavra([])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 6, in melhor_palavra
ValueError: max() iterable argument is empty
```
:::

. . .

Esse erro n√£o ocorreria na primeira op√ß√£o.

##

A dica portanto √©:

- Para qualquer que seja a sugest√£o escolhida: √© necess√°rio **sempre testar**!

. . .

A segunda op√ß√£o poderia ser alterada para a acrescentar o mesmo `if` da primeira op√ß√£o.

- Nesse caso, qual voc√™ escolheria?
- Sugest√£o: depende do seu objetivo.
  - A primeira op√ß√£o √© mais leg√≠vel.
  - A segunda √© mais compacta.

# Demonstrando o uso do Copilot para Processamento de Dados {background-color="#40666e"}

## 

Vamos agora fazer algo mais interessante.

- E que j√° d√™ uma ideia de como podemos usar o Copilot em tarefas de processamento de dados.

. . .

N√≥s vamos utilizar um conjunto de dados (_dataset_) da plataforma Kaggle.

- Uma plataforma de competi√ß√£o de ci√™ncia de dados e aprendizado de m√°quina.
- Que tem milhares de conjuntos de dados dos mais variados assuntos.

## 

Vamos trabalhar com dados sobre futebol.

- Acesse a p√°gina do _dataset_ [All footeball player stats in top 5 leagues 23/24](https://www.kaggle.com/datasets/orkunaktas/all-football-players-stats-in-top-5-leagues-2324).
- S√£o dados estat√≠sticos dos jogadores das 5 principais ligas de futebol europeias.
- Veja na p√°gina quais s√£o os dados dispon√≠veis e uma amostra dos dados.

##

Vamos baixar os dados para usar em nosso programa. Para isso:

- Clique em `Download` &rarr; `Download dataset as zip`.
  - Logue no Kaggle ou crie uma conta se n√£o tiver (pode ser logando com a conta do Google).
- Descompacte o arquivo zip baixado.
- Crie uma pasta para o projeto da aula de hoje e copie para ela o arquivo `top5-players.csv`.

## 

Vamos agora escrever um prompt para carregar os dados do arquivo em nosso programa.

- Abra a pasta criada no VS Code.
- Crie um novo arquivo python chamado `futebol.py`.
- Em seguida, vamos definir uma fun√ß√£o para carregar os dados
  com do arquivo `top5-players.csv`.

. . .

::: {.halfincfontsize}
```python
def carregar_dados_futebol(nome_arquivo_csv):
    """
    A fun√ß√£o abre o arquivo CSV passado por par√¢metro
    e retorna os dados carregados
    """
```
:::

##

Teste seu programa usando <kbd>Shift</kbd> + <kbd>Enter</kbd> para excecut√°-lo em um terminal Python.

- Chame a fun√ß√£o passando como par√¢metro o nome do arquivo `top5-players.csv`.
- Se tudo der certo, os dados do arquivo v√£o aparecer na tela.

## 

Nessa parte cada aluno pode estar vendo um c√≥digo diferente:

- pois h√° v√°rias bibliotecas no Python para lidar com arquivos CSV.
- E, como j√° sabemos, os assistentes de IA s√£o n√£o determin√≠sticos.


## 

::: {.nonincremental}

√â poss√≠vel que o Copilot tenha sugerido uma biblioteca mas n√£o a tenha importado.

- Para corrigir isso, ou algum outro tipo de erro, voc√™ pode selecionar o c√≥digo gerado, 
  - clicar na l√¢mpada que aparece e acessar a op√ß√£o `fix` (consertar).

- Se ele sugeriu usar uma biblioteca que precisaria ser instalada voc√™ pode alterar o prompt
  - pedindo para usar apenas as bibliotecas padr√µes do python.
 
:::

## 

Vamos agora trabalhar com os dados que foram carregados.

- A ideia √© analisar as estat√≠sticas dos jogadores brasileiros nas principais ligas de futebol.

. . .

Para isso vamos usar duas fun√ß√µes:

- Uma para calcular os dados que queremos: quantidade de gols feitos por brasileiros em cada liga.
- E outra para exibir os resultados.

## 

Gere ent√£o o c√≥digo da primeira fun√ß√£o com o prompt abaixo.

::: {.fontsize125}
```python
def calcular_quantidade_gols(dados, pais):
    """
    dados cont√©m dados estat√≠sticos de futebol:
    - a terceira coluna traz o nome do pa√≠s do jogador
    - a sexta coluna o nome da liga
    - a nota coluna o n√∫mero de gols feitos pelo jogador
    pais √© a identifica√ß√£o do pa√≠s de interesse (ex.: "br BRA")

    A fun√ß√£o calcula e retorna a quantidade de gols feitos 
    por jogadores do pa√≠s passado em cada liga
    """
```
:::

. . .

E teste sua fun√ß√£o.

- Lembre-se que voc√™ precisa chamar a primeira fun√ß√£o.

##

N√≥s j√° vimos os resultados no terminal mas em um formato
que n√£o √© muito adequado para o usu√°rio final.

- Vamos agora criar uma fun√ß√£o para mostrar o resultado.
- E pedir o resultado com as quantidades de gols em ordem decrescente.

. . .

::: {.fontsize125}
```python
def exibir_gols_por_liga(quantidade_gols):
    """
    A fun√ß√£o exibe a quantidade de gols feitos por 
    jogadores de um pa√≠s em cada liga em ordem decrescente.
    """
```
:::

## 

Em seguida, vamos pedir ao Copilot para chamar as fun√ß√µes
no pr√≥prio script Python que estamos criando.

. . .

::: {.fontsize125}
```python
# Chame as fun√ß√µes anteriores para exibir ao usu√°rio
# as quantidades de gols feitos por brasileiros
# a partir do arquivo top5-players.csv
```
:::

. . .

Agora n√≥s vamos testar o script propriamente dito.

- Clicando no bot√£o `Run` no canto superior direito do VS Code.

##


Repare que fizemos o nosso programa com apenas tr√™s fun√ß√µes.

- Uma para lidar com a entrada de dados.
- Outra para process√°-los.
- E a √∫ltima para exibir os dados.

. . .

Esse ciclo de entrada, processamento e sa√≠da √© extremamente comum em programa√ß√£o.

## 

Vamos agora usar o Copilot para alterar o c√≥digo que hav√≠amos gerado.

- Suponha que estamos interessados apenas nos gols dos jogadores jovens (que t√™m at√© 23 anos)

. . .

Para isso, n√≥s vamos apagar o c√≥digo gerado para a segunda fun√ß√£o que criamos

- e vamos redefinir a fun√ß√£o.
- Voc√™ alteraria algo na assinatura da fun√ß√£o?
- E o que voc√™ alteraria na docstring da fun√ß√£o?
- M√£os √† Obra e ao Teste!

## 

Seguindo os crit√©rios de cria√ß√£o de boas fun√ß√µes provavelmente voc√™:

- Acrescentou um par√¢metro de idade m√°xima √† fun√ß√£o
- Acrescentou na docstring 
  - a informa√ß√£o da coluna que tem a idade do jogador (a s√©tima).
  - o significado do par√¢metro idade
- Al√©m, √© claro de ter passado 23 como idade m√°xima na chamada da fun√ß√£o.

. . .

Se n√£o foi isso que fez, bora fazer :)

## 

Voc√™ deve ter notado que os nomes das ligas come√ßam com um identificador do pa√≠s

- `eng`, `es`, `it`, `fr` ou `de`.

. . . 

Vamos pedir ao Copilot para substituir esse identificador pelo nome do pa√≠s.

- Acrescentando o texto do slide a seguir √† docstring da fun√ß√£o de exibi√ß√£o dos resultados

##

::: {.fontsize125}
```python
O nome da liga tem primeiro duas ou tr√™s letras para 
identificar o pa√≠s, seguido de um espa√ßo e depois o 
nome da liga propriamente dito. Substitua essas duas 
letras pelo nome do pa√≠s. Os pa√≠ses s√£o: 
eng: Inglaterra, es: Espanha, it: It√°lia, fr: Fran√ßa 
e de: Alemanha
```
:::

Dica: se o copilot n√£o gerar o c√≥digo selecione o coment√°rio, clique na l√¢mpada, 
 acesse `Modify` e digite `complete o c√≥digo`.

## 

Repare que, se n√£o estiv√©ssemos preocupados em separar o c√≥digo em fun√ß√µes,
quem nunca programou tamb√©m conseguiria fazer o que fizemos usando o Copilot.

- Essa pessoa poderia ter mais dificuldade nas situa√ß√µes que geram erro.
- Mas ainda assim conseguiria, ao final, obter o resultado que precisa.
- Imagine como seria dif√≠cil para ela fazer isso sem uma ferramenta como o Copilot?


# Copilot via chat {background-color="#40666e"}

## 

Vamos agora interagir com o Copilot via chat para gerar um gr√°fico a partir dos dados processados.

. . . 

Para isso, selecione toda a terceira fun√ß√£o e

- Abra o chat do Copilot (clicando no √≠cone de chat na barra de t√≠tulo do VS Code ou digitando <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>I</kbd>).
- Mude do modo `Agent` para `Ask` (primeira op√ß√£o na parte inferior do chat).
- E digite o prompt do slide a seguir.

##

::: {.fontsize125}
```text
A fun√ß√£o selecionada exibe informa√ß√µes no terminal. 
Altere o c√≥digo para que essas informa√ß√µes sejam 
exibidas em um gr√°fico. Caso seja necess√°rio 
instalar alguma biblioteca, me explique como eu 
poderia fazer isso.
```
:::


Siga ent√£o as instru√ß√µes e fa√ßa intera√ß√µes com o Copilot, se necess√°rio, at√© obter o gr√°fico.

# Mais experimentos com o Copilot {background-color="#40666e"}

## 

Os exerc√≠cios a seguir podem ser feitos usando o Copilot 

- selecionando o c√≥digo e acessando a op√ß√£o `Modify` 
- ou via chat.

1. Aumente o tamanho das fontes do gr√°fico.
2. Exiba o n√∫mero de gols nas barras do gr√°fico.
3. Salve o gr√°fico em um arquivo PNG.

##

√â importante termos em mente que n√£o estamos validando os resultados gerados

- Assim, √© poss√≠vel que alguns resultados estejam incorretos.

. . .

Como foi mencionado nas aulas anteriores, precisamos aprender a testar o c√≥digo gerado pelo Copilot

- Para termos seguran√ßa de que ele faz o que precisamos.
- Veremos mais sobre isso mais adiante na disciplina.

## 

Obtendo mais informa√ß√µes do _dataset_:

- Crie fun√ß√µes com ajuda do Copilot para cada situa√ß√£o abaixo.
- Obs.: as informa√ß√µes podem ser exibidas apenas no terminal.

4. Exiba os nomes e quantidade de gols dos cinco jogadores que mais fizeram gols em cada liga, ordenados pela quantidade de gols.
5. Encontre o jogador mais jovem que marcou gol em cada liga e exiba seu nome, idade, equipe e n√∫mero de gols.
6. Encontre a equipe que menos tomou cart√µes (amarelos e vermelhos em cada liga).
Exiba o nome da equipe e a quantidade de cart√µes recebidos de cada tipo.