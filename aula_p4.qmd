---
title: Depura√ß√£o e Decomposi√ß√£o de Problemas
subtitle: PASIA - Aula P.4
---

O conte√∫do dessa aula √© baseado no **cap√≠tulo 11** do livro abaixo (e um pouquinho do **cap√≠tulo 8**).

![](imagens/livro_potter_zingaro.png){fig-align="center" fig-alt="Capa do livro de Potter e Zingaro." style="max-height: 50vh; width: auto;"}


# Depura√ß√£o {background-color="#40666e"}

##

[Encontrar e resolver bugs]{.alert} s√£o algumas das principais atividades realizadas por um Engenheiro de Software.

- Os testes de c√≥digo s√£o essenciais para encontrarmos bugs em nossos sistemas.
- Mas, uma vez que eles s√£o encontrados, como podemos resolv√™-los?

##

Claro que podemos usar o Copilot para nos ajudar a resolver bugs.

- Mas **√© importante conseguirmos depurar nosso pr√≥prio c√≥digo**.
- Seja porque √†s vezes o Copilot n√£o consegue nos ajudar.
- Seja porque √†s vezes √© mais r√°pido e eficiente resolvermos o problema sozinhos, do que ficar
  gerando prompts e analisando as respostas do Copilot.

##

Existem diversas **formas de depurar nosso c√≥digo**.

- Lendo o c√≥digo.
- Explicando para algu√©m.
- Incluindo comandos `print()` (que depois precisam ser removidos).
- Ou usando um [depurador (_debugger_)]{.alert}.
  - Que √© a forma mais recomendada!
  - Alunos geralmente t√™m pregui√ßa de usar, mas, quando entram em um est√°gio ou emprego, 
    costumam perceber que depuradores s√£o ferramentas essenciais para o dia-a-dia de um desenvolvedor.

##

Vamos fazer um Quiz para verificar como (e se) voc√™s costumam usar depuradores.

- [Quiz](https://www.polleverywhere.com/activities?folder=20270545) (obs.: apenas o professor consegue acessar esse link).

##

Como voc√™s n√£o s√£o alunos de in√≠cio de curso, provavelmente j√° sabem usar um depurador.

- Para quem nunca usou o depurador do VS Code, √© [altamente recomend√°vel]{.alert} **que comece a usar**.
  - Voc√™ pode come√ßar com esse [tutorial](https://scribehow.com/viewer/Usando_Debugger_do_VS_Code__8ggh8wtURoivTHc4W6pGDg) bem simples que uso em PPOO.
  - E h√° bastante material dispon√≠vel na internet.
- N√£o vamos trabalhar isso nessa aula.
  - E vou considerar que, aqueles que ainda n√£o usam, v√£o tratar isso como tarefa de casa.


# Programa de Identifica√ß√£o de Autoria {background-color="#40666e"}

##

Na aula passada, sobre [Decomposi√ß√£o de Problemas]{.alert}, fizemos o **_Design Top-Down_**
de um programa para sugest√µes de corre√ß√£o.

- Vamos agora levar o _design top-down_ para outro n√≠vel,
- **praticando** essa habilidade em um **problema muito maior**.

##

O processo, a princ√≠pio, ser√° o mesmo:

- Vamos dividir o problema em subproblemas.
- E dividir novamente os subproblemas, se necess√°rio.
- Vamos criar fun√ß√µes bem definidas, que recebam poucos par√¢metros e retornem o resultado √∫til.

. . .

Mas, voc√™ ver√° que teremos **uma novidade** nesse caso:

- Criaremos fun√ß√µes que ser√£o chamadas por mais de uma fun√ß√£o.
- Evitando a [replica√ß√£o de c√≥digo]{.alert}.

## Programa de Identifica√ß√£o de Autoria

A ideia nessa aula √© desenvolvermos um programa que **tenta identificar o** 
**autor desconhecido de um texto misterioso**.

- Vamos usar IA para fazer essa predi√ß√£o.
- N√£o vamos perder a oportunidade de  usar IA em uma disciplina de Programa√ß√£o com Suporte de IA. üòÅ

## 

Suponha que temos dois trechos de texto.

::: {.callout-note}
## Trecho 1
I have not yet described to you the most singular part. About six years
ago ‚Äî to be exact, upon the 4th of May 1882 ‚Äî an advertisement appeared in the
Times asking for the address of Miss Mary Morstan and stating that it would be
to her advantage to come forward. There was no name or address appended. I
had at that time just entered the family of Mrs. Cecil Forrester in the capacity of
governess. By her advice I published my address in the advertisement column.
The same day there arrived through the post a small card-board box addressed
to me, which I found to contain a very large and lustrous pearl. No word of writing 
was enclosed. Since then, every year upon the same date there has always
appeared a similar box, containing a similar pearl, without any clue as to the
sender. They have been pronounced by an expert to be of a rare variety and of
considerable value. You can see for yourselves that they are very handsome.
:::

## 

::: {.callout-note}
## Trecho 2
It was the Dover Road that lay on a Friday night late in November,
before the first of the persons with whom this history has business. The Dover
Road lay, as to him, beyond the Dover mail, as it lumbered up Shooter‚Äôs Hill.
He walked up hill in the mire by the side of the mail, as the rest of the passen-
gers did; not because they had the least relish for walking exercise, under the
circumstances, but because the hill, and the harness, and the mud, and the
mail, were all so heavy, that the horses had three times already come to a stop,
besides once drawing the coach across the road, with the mutinous intent of
taking it back to Blackheath. Reins and whip and coachman and guard, however, 
in combination, had read that article of war which forbade a purpose otherwise 
strongly in favour of the argument, that some brute animals are endued
with Reason; and the team had capitulated and returned to their duty.
:::

## 

Suponha que algu√©m te pergunte se √© prov√°vel que esses dois trechos tenham sido
escritos pelo mesmo autor.

- Como voc√™ poderia responder a essa pergunta?
- Apenas com base nos textos - n√£o vale jogar no Google üòú

. . .

Podemos assumir uma **premissa** razo√°vel de que **autores diferentes t√™m estilo de escrita diferentes**.

- E que essas diferen√ßas aparecem em **m√©tricas** que podemos calcular a partir dos textos.

## 

Como assim?

- Podemos notar, por exemplo, que o primeiro trecho tem frases mais curtas.
- E o segundo texto parece mais complexo se repararmos a quantidade de v√≠rgulas e ponto-e-v√≠rgulas.

. . .

Com base nessa avalia√ß√£o poder√≠amos concluir que os textos, provavelmente, foram escritos por autores diferentes.

- O que √© verdade nesse caso.

## 

::: {.columns}

:::: {.column width="50%"}
O autor do primeiro texto √© [Sir Arthur Conan Doyle](https://pt.wikipedia.org/wiki/Arthur_Conan_Doyle).

::: {.row}
![](imagens/conan_doyle.jpg){fig-align="center" fig-alt="Foto de Sir Arthur Conan Doyle." style="max-width: 48%; display: inline-block;"}
![](imagens/filme_sherlock_holmes.jpg){fig-align="center" fig-alt="Imagem do filme Sherlock Holmes." style="max-width: 48%; display: inline-block;"}
:::
::::

:::: {.column width="50%"}
E o autor do segundo texto √© [Charles Dickens](https://pt.wikipedia.org/wiki/Charles_Dickens).

::: {.row}
![](imagens/charles_dickens.jpg){fig-align="center" fig-alt="Foto de Charles Dickens." style="max-width: 48%; display: inline-block;"}
![](imagens/charles_dickens_adaptacoes.jpg){fig-align="center" fig-alt="Imagem de adapta√ß√µes de obras de Charles Dickens." style="max-width: 48%; display: inline-block;"}
:::
::::

:::

## 

Nesse caso acertamos que s√£o autores diferentes, mas o exemplo foi escolhido a dedo ü§≠

- Pode ser, por exemplo, que um mesmo autor escreva diferente em trechos ou livros diferentes.
- Mas, como n√£o vamos fazer um programa perfeito, tudo bem.

## Ideia Geral

Baseado no princ√≠pio desse exemplo, suponha que tenhamos:

- **um conjunto de textos de autores conhecidos**.
- e **o texto de um autor desconhecido**
  - Poderia ser uma obra nunca publicada, que foi encontrada por acaso com um colecionador, por exemplo.

. . .

Precisamos de uma forma que nos permita **comparar o estilo de escrita** dos autores conhecidos com o do autor desconhecido.

## Ideia Geral

Nossa estrat√©gia ser√° construir uma **_"impress√£o digital"_** (ou **_"assinatura"_**) do estilo de escrita de cada autor.

- Com base em um livro que ele tenha escrito.
- Essa _impress√£o digital_ seria **baseada em m√©tricas que conseguimos calcular a partir do texto**.
  - Como o n√∫mero m√©dio de palavras por frase e a complexidade m√©dia das frases.

## Ideia Geral

Usar√≠amos o mesmo processo para construir a _impress√£o digital_ do texto de autor desconhecido.

- E comparar√≠amos a _impress√£o digital_ do autor desconhecido com a dos autores conhecidos.
- Aquele que tiver a _impress√£o digital_ mais pr√≥xima, seria o autor mais prov√°vel do texto desconhecido.

## Limita√ß√µes

Claro que o texto de autor desconhecido pode ser de um autor completamente novo.

- Ou pode ser que nossas m√©tricas n√£o capturem bem o estilo de escrita de cada autor.
- Ou ainda que um mesmo autor escreva livros diferentes com estilos diferentes.

. . .

Portanto, nosso programa n√£o estar√° pronto para ser lan√ßado no mercado üôÉ

- De todo modo, dada a dificuldade da tarefa, voc√™ ficar√° surpreso com o resultado que conseguiremos alcan√ßar.

##

A ideia nessa aula √© que **voc√™ mesmo fa√ßa o _design top-down_ do programa**.

- E use o Copilot para ajudar a implementar as fun√ß√µes que voc√™ definir.

. . .

O livro da disciplina vai construindo o _design_ e, √† medida que avan√ßa, vai acrescentando mais detalhes sobre como
o programa deve funcionar.

- Como quais m√©tricas usar, por exemplo.
- Mas como aqui √© voc√™ quem far√° o _design_, √© necess√°rio que voc√™ conhe√ßa
esses detalhes antes de come√ßar a fazer o _design_.

# Defini√ß√µes para o Programa de Identifica√ß√£o de Autoria {background-color="#40666e"}

## Textos dispon√≠veis

O projeto inicial disponibilizado tem uma pasta `dados`.

- Dentro da pasta h√° uma pasta chamada `autores_conhecidos` com 5 arquivos de texto.
  - Cada arquivo √© um livro diferente, escrito por um autor diferente.
  - O t√≠tulo do arquivo √© o nome do autor.
- H√° tamb√©m 4 arquivos de autores desconhecidos.
  - Cada arquivo √© um trecho de texto, que pode ter sido escrito por qualquer um dos autores conhecidos.
  - O nome do arquivo n√£o indica o autor.

## M√©tricas

A ideia √© utilizar as seguintes m√©tricas para construir a _impress√£o digital_ de cada autor:

1. tamanho m√©dio das palavras
2. n√∫mero de palavras diferentes dividido pelo n√∫mero total de palavras
3. n√∫mero de palavras usadas exatamente uma vez dividido pelo n√∫mero total de palavras
4. n√∫mero m√©dio de palavras por frase
5. complexidade m√©dia das frases

. . .

A seguir vamos detalhar como calcular cada uma dessas m√©tricas.

## Tamanho m√©dio das palavras

A ideia aqui √© diferenciar autores que usam, em m√©dia, palavras mais curtas ou mais longas.

- Calculamos o n√∫mero total de letras das palavras e o n√∫mero total de palavras do texto.
- E dividimos o primeiro pelo segundo.

. . .

::: {.fontsize80}
Exemplo: _"A chuva ca√≠a. O guarda-chuva tinha ficado em casa."_

- S√£o 40 letras e 9 palavras com um total.
- Tamanho m√©dio das palavras: 40 / 9 = 4.44
- Obs.: para simplificar estamos considerando que o h√≠fen conta como letra.
:::

## N√∫mero de palavras diferentes dividido pelo n√∫mero total de palavras

A ideia dessa m√©trica √© identificar autores que costumam ser repetitivos ou n√£o.

- Calculamos o n√∫mero de palavras diferentes que aparecem.
- E dividimos pelo n√∫mero total de palavras do texto.

. . .

::: {.fontsize80}

Ex.: _Uma p√©rola! Uma p√©rola! Uma p√©rola brilhante! Rara. Que belo achado._

- Total de palavras: 10
- Palavras diferentes: 7 (_uma, p√©rola, brilhante, rara, que, belo, achado_)
- Resultado da m√©trica: 7 / 10 = 0.7
:::

## N√∫mero de palavras usadas exatamente uma vez dividido pelo n√∫mero total de palavras

Pode ser que alguns autores usem muitas palavras apenas uma vez, enquanto outros 
tendem a repetir mais as palavras.

- Vamos calcular o n√∫mero de palavras que aparecem exatamente uma vez no texto.
- E dividir pelo n√∫mero total de palavras do texto.

. . .

::: {.fontsize80}
Exemplo: _Uma p√©rola! Uma p√©rola! Uma p√©rola brilhante! Rara. Que belo achado._

- N√∫mero total de palavras: 10
- Palavras usadas exatamente uma vez: 5 (_brilhante, rara, que, belo, achado_)
- Resultado da m√©trica: 5 / 10 = 0.5
:::

## N√∫mero m√©dio de palavras por frase

A ideia dessa m√©trica √© identificar se o autor costuma escrever frases mais longas ou mais curtas.

- Calculamos o n√∫mero total de palavras e o n√∫mero total de frases do texto.
- E dividimos o primeiro pelo segundo.

. . .

::: {.fontsize80}
Exemplo: _"A chuva ca√≠a. O guarda-chuva tinha ficado em casa."_

- N√∫mero total de palavras: 9
- N√∫mero total de frases: 2
- N√∫mero m√©dio de palavras por frase: 9 / 2 = 4.5
:::

## Complexidade m√©dia das frases

Comentamos no exemplo inicial que um trecho de texto tinha frases mais curtas e outro mais longas.

- Uma maneira que temos de medir a complexidade √© verificar se as frases t√™m mais de uma ora√ß√£o.

. . .

Exemplo: _"No mesmo dia chegou uma carta endere√ßada a mim, que parecia conter algo importante. Mas n√£o tive coragem de abri-la."_

- Veja que a primeira frase tem duas ora√ß√µes, separadas pela v√≠rgula.
- J√° a segunda frase tem apenas uma ora√ß√£o.

## Complexidade m√©dia das frases

Como seria muito complicado realmente tentar identificar ora√ß√µes, vamos usar uma aproxima√ß√£o simples:

- Vamos considerar que toda v√≠rgula, ponto-e-v√≠rgula ou dois-pontos indicam a separa√ß√£o de ora√ß√µes de uma frase.
- E vamos calcular o total de ora√ß√µes dividido pelo total de frases do texto.
  - No exemplo citado, o resultado da m√©trica seria: 3 / 2 = 1.5

## 

A **_impress√£o digital_** de cada autor ser√° ent√£o dada pelo **conjunto de m√©tricas** calculada a partir de um livro que ele tenha escrito.

- Em Aprendizado de M√°quina, n√≥s chamar√≠amos esse conjunto de **vetor de caracter√≠sticas (_features_)**.
- Portanto, ela ser√° dada por uma lista de 5 n√∫meros, com os valores de cada m√©trica na ordem que definimos.
  - Exemplo: `[4.44, 0.7, 0.5, 4.5, 1.5]`

. . .

::: {.fontsize70 .nonincremental}
1. tamanho m√©dio das palavras
2. n√∫mero de palavras diferentes dividido pelo n√∫mero total de palavras
3. n√∫mero de palavras usadas exatamente uma vez dividido pelo n√∫mero total de palavras
4. n√∫mero m√©dio de palavras por frase
5. complexidade m√©dia das frases
:::

## Identificando o autor desconhecido

Para identificar o autor desconhecido de um texto, faremos o seguinte:

- Calcularemos a _impress√£o digital_ de cada autor conhecido.
- Calcularemos a _impress√£o digital_ do texto de autor desconhecido.
  - E a compararemos com a _impress√£o digital_ de cada autor conhecido.
- O autor conhecido cuja _impress√£o digital_ for mais pr√≥xima, ser√° o autor mais prov√°vel do texto desconhecido.

. . .

Mas como ser√° feita a compara√ß√£o entre as impress√µes digitais?

## Identificando o autor desconhecido

Suponha que estamos comparando a _impress√£o digital_ `[4.44, 0.7, 0.5, 4.5, 1.5]` com uma 
_impress√£o digital_ de um autor desconhecido dada por `[4.0, 0.5, 0.7, 4.0, 1.9]`.

- Vamos calcular a diferen√ßa, em m√≥dulo, entre cada m√©trica.
  - O resultado seria `[0.44, 0.2, 0.2, 0.5, 0.4]`.
- E, em seguida, vamos calcular a soma ponderada dessas diferen√ßas.
  - Os pesos da soma seria: `[11, 33, 50, 0.4, 4]`.
  - O resultado seria ent√£o `(0.44*11 + 0.2*33 + 0.2*50 + 0.5*0.4 + 0.4*4) = 23.24`.

## Identificando o autor desconhecido

Mas de onde veio essa lista de pesos?

- Os autores do livro aplicaram esse exerc√≠cio ao longo do tempo.
- E, empiricamente, descobriram que esses pesos funcionam bem para esse problema.

. . .

Obs.: em uma aplica√ß√£o profissional de Aprendizado de M√°quina, esses pesos seriam aprendidos a partir de um conjunto
de dados de treinamento.

## Identificando o autor desconhecido

Voltando √† identifica√ß√£o do autor desconhecido:

- Vimos que a compara√ß√£o entre duas _impress√µes digitais_ resulta em um n√∫mero (_score_).
- E quanto menor esse n√∫mero, menor a diferen√ßa entre as _impress√µes digitais_, certo?
- Portanto, o autor conhecido cuja compara√ß√£o resulte no menor _score_ ser√° o autor mais prov√°vel do texto desconhecido.

## Dica para a fase de _design_

::: {.fontsize80}
Uma das opera√ß√µes necess√°rias √© a contagem de palavras.

- Para isso, podemos usar a fun√ß√£o `split()` da classe `str`.
- Exemplo: 
  - Usando fun√ß√£o `split()` no trecho _"A chuva ca√≠a. O guarda-chuva tinha ficado em casa."_
  - Obter√≠amos as palavras: `["A", "chuva", "ca√≠a.", "O", "guarda-chuva", "tinha", "ficado", "em", "casa."]`
- Mas veja que as palavras _"ca√≠a."_ e _"ca√≠a"_ seriam consideradas diferentes.
  - Precisamos ent√£o tratar isso, removendo as pontua√ß√µes das palavras.
  - Mas devemos tomar cuidado para n√£o remover o h√≠fen, que faz parte da palavra (como na palavra _"guarda-chuva"_).
  - Bastaria remover as pontua√ß√µes apenas do in√≠cio e do fim das palavras.
:::

# _Design top-down_ do Programa de Identifica√ß√£o de Autoria {background-color="#40666e"}

## 

√â **hora** ent√£o **de construir o _design top-down_ do programa**.

- Recomendo que fa√ßam em duplas, mas podem fazer individualmente se preferirem.
- Lembre-se que o [objetivo √© praticar a habilidade de decomposi√ß√£o de problemas]{.alert}.
- **Dica**: provavelmente voc√™ encontrar√° uma ou mais fun√ß√µes que s√£o chamadas por mais de uma fun√ß√£o.

##

No pr√≥ximo slide vou apresentar o _design_ feito pelos autores do livro.

- Mas [aten√ß√£o]{.alert}: √© **muito importante** que voc√™ mesmo fa√ßa o design.
  - N√£o adianta copiar o design de algu√©m ou usar o _design_ mostrado a seguir.
- Somente depois que terminar o _design_, antes de implementar, voc√™ pode comparar com o _design_ mostrado a seguir.
  - E ver se h√° algo que voc√™ n√£o tinha pensado.
- Lembre-se que o _design_ n√£o precisa ser igual ao do livro.
  - A ideia √© apenas ajudar a identificar se voc√™ esqueceu de algo importante.

## Design dos autores do livro

Voc√™ j√° terminou mesmo seu design? Tem certeza?

. . .

![](imagens/fig11-6_authorship_program_design.png){fig-align="center" fig-alt="Design do programa de identifica√ß√£o de autoria feito pelos autores do livro." style="max-height: 50vh; width: auto;"}



# Implementa√ß√£o do Programa de Identifica√ß√£o de Autoria {background-color="#40666e"}

## 

Agora √© **hora de implementar o programa**.

- A ideia √© usar o Copilot para ajudar na implementa√ß√£o.
- Voc√™ precisar√° **tamb√©m escrever testes** para suas fun√ß√µes.
  - Pelo menos um caso de teste para cada fun√ß√£o.
  - O Copilot pode ajudar nisso tamb√©m. Mas voc√™ precisa verificar se os testes est√£o corretos.
- Dica: ao escrever o prompt/docstring de cada fun√ß√£o, pense que ela poderia ser reutilizada 
  futuramente em outros programas

Como saber se o programa funciona corretamente?

##

Voc√™ ver√° que os arquivos de autores desconhecidos t√™m o nome do autor dentro do arquivo.

- Portanto, voc√™ poder√° verificar se o programa est√° funcionando corretamente. üòâ
- E, claro, seu programa n√£o pode usar essa informa√ß√£o para fazer a predi√ß√£o. üòè

. . .

O exerc√≠cio deve ser entregue no Campus Virtual at√© a data indicada.