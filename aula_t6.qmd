---
title: Automatizando Tarefas Tediosas
subtitle: PASIA - Aula T.6
---

##  

O conte√∫do dessa aula √© baseado no **cap√≠tulo 9** do livro abaixo.

![](imagens/livro_potter_zingaro.png){fig-align="center" fig-alt="Capa do livro de Potter e Zingaro." style="max-height: 50vh; width: auto;"}

# Introdu√ß√£o {background-color="#40666e"}

##

Suponha qe voc√™ seja respons√°vel por criar 100 relat√≥rios, cada um para uma pessoa diferente.

- Poderia ser um professor que precisa enviar corre√ß√µes para seus estudantes.
- Ou algu√©m em um departamento de RH que precisa enviar a avalia√ß√£o anual para cada funcion√°rio.

. . .

Suponha que voc√™ tenha decidido preparar os relat√≥rios em arquivos PDF.

- E que voc√™ precisa de uma capa para os arquivos que √© customizada para cada pessoa.
- Seu colega, designer gr√°fico, preparou essas capas para voc√™.

##

Voc√™ e seu colega trabalharam de forma independente e agora cada um terminou sua tarefa.

- Quer dizer, quase, pois agora √© necess√°rio juntar as capas com os relat√≥rios.

. . .

Algu√©m que n√£o √© programador estaria agora _"rangendo os dentes"_

- com o trabalho manual de juntar cada capa com cada relat√≥rio.
- Isso poderia levar horas!

##

Mas n√≥s somos [programadores]{.alert}!

- E programadores nunca fariam um trabalho desse manualmente!
- Ou pelo menos n√£o deveriam.

. . .

::: {.callout-tip}
Muitas vezes seguimos o ditado: _Casa de ferreiro, espeto de pau._

E perdemos tempo com tarefas que poderiam ser otimizadas.
:::

##

Nessa aula vamos ver como escrever programas que automatizam tarefas tediosas.

- Uma das tarefas ser√° essa dos PDFs.
- Mas tamb√©m veremos outras tarefas que podem ser automatizadas.

# Por que programadores criam ferramentas? {background-color="#40666e"}

##

Muitas vezes os programadores se definem como _pregui√ßosos_.

- N√£o no sentido de que n√£o queremos fazer nosso trabalho.
- Mas sim, que n√£o queremos fazer tarefas que s√£o **reptitivas**, **chatas**, **tediosas** üòí.
  - Para as quais os computadores s√£o muito melhores que n√≥s.

. . .

Bons programadores costumam ter um _"sentido aranha"_ üï∏Ô∏è para identificar tarefas penosas.

##

Suponha, por exemplo, que tenhamos centenas de fotos que juntamos de uma viagem.

- E que queremos remover as fotos duplicadas.
- N√£o queremos olhar uma por uma, pois isso levaria muito tempo.

. . .

Ou suponha que um professor tenha que enviar um e-mail com notas para cada um de seus estudantes.

- Se forem poucos alunos ele pode escrever um e-mail para cada um.
- Mas se forem muitos, nenhum professor vair querer fazer isso manualmente.

##

Sempre que um bom programador se depara com uma tarefa com passos repetitivos

- ele pensa em como construir uma [ferramenta]{.alert} para automatiz√°-la.

. . .

O termo **ferramenta** est√° sendo usado aqui no sentido de programas 
que fazem algo que nos poupe tempo.

- Muitas vezes a ferramenta em si n√£o √© o objetivo final.
- E criar a ferramenta pode tamb√©m ser meio entendiante.
- Mas uma vez que ela est√° pronta, ela pode nos poupar muito tempo.

##

√Äs vezes criamos uma ferramenta para usar uma √∫nica vez.

- Mas, na maioria das vezes, essas ferramentas acabam se tornando √∫teis novamente no futuro.
  - Seja do jeito que ela foi constru√≠da inicialmente,
  - ou com algumas melhorias.

##

Eu, Julio, por exemplo, envio um e-mail com feedback individual para os alunos ap√≥s as corre√ß√µes das provas das disciplinas que leciono.

- Seria invi√°vel fazer isso manualmente.

. . .

Eu fa√ßo a corre√ß√£o da prova em uma panilha do Google.

- E escrevi um script (_Apps Script_) que l√™ a planilha e envia o e-mail para cada aluno.
- Deu um trabalho inicialmente, e de vez em quando preciso fazer ajustes.
- Mas no final das contas, o tempo que economizo √© enorme.

##

E agora que temos Assistentes de IA, como o Copilot,

- ficou ainda mais f√°cil criarmos ferramentas para tarefas repetitivas.

. . .

N√£o faz sentido um programador n√£o usar essas ferramentas para se ajudar.

- nem no sentido pessoal (podemos usar o tempo que economizamos para coisas mais prazerosas).
- nem no sentido profissional (podemos aumentar nossa produtividade).

# Como usar o Copilot para criar ferramentas {background-color="#40666e"}

##

Muitas vezes precisamos usar m√≥dulos (bibliotecas) do Python para realizar alguma
tarefa que precisamos.

- Pode ser que seja uma biblioteca inclu√≠da (_built-in_) do Python.
  - Ex.: `csv`, `json`, `zipfile`, etc.
- Ou uma biblioteca que precisamos instalar antes de us√°-la.

##

Quando estamos criando ferramentas, √© muito comum que: 

- precisemos lidar com arquivos de diferentes formato
  - (como arquivos zip, pdf, planilhas de excel ou imagens).
- e que precisemos fazer alguma tarefa espec√≠fica
  - (como enviar e-mails, intergair com um site, mover arquivos, etc).

. . .

Para muitas dessas coisas precisaremos usar algum m√≥dulo. 

- Mas qual m√≥dulo?
- E ele √© _built-in_ ou preciso instalar?

##

Assistentes de IA, como o Copilot, podem nos ajudar a come√ßar.

- A ideia √© conversarmos com o assistente de IA para descobrir qual m√≥dulo precisamos usar.
- E s√≥ depois disso entramos na etapa de criar a ferramenta propriamente dita.

. . .

Na cria√ß√£o da ferramenta, podemos seguir os passos que vimos anteriormente.

- Definir uma fun√ß√£o, e sua docstring, e depois pedir para o Copilot gerar o c√≥digo dela.

##

Ao fazer isso, devemos seguir o processo que j√° vimos antes:

- verificar a corretude do c√≥digo (testes), 
- corrigir os bugs, 
- e talvez decompor o problema.

. . .

Mas aqui na aula vamos nos concentrar na intera√ß√£o com o Copilot para automizarmos a tarefa que precisamos.

- Para manter o foco no conte√∫do que estamos trabalhando aqui.

## 

N√≥s poder√≠amos pedir ao Copilot ou ao ChatGPT para fazer a ferramenta completa.

- Mas vamos manter a ideia de criar fun√ß√µes.

. . . 

Acreditamos que vale a pena trabalharmos com fun√ß√µes, documentadas.

- De forma que seja mais f√°cil, no futuro, fazer alguma melhoria ou evolu√ß√£o necess√°ria na ferramenta.

# Exemplo 1: Lista de compras {background-color="#40666e"}

##

Suponha que voc√™ precise enviar uma lista de compras para algu√©m por WhatsApp ou e-mail.

- E que essa lista precise ser numerada, com um item por linha, e em ordem alfab√©tica.

. . .

Mas voc√™ recebeu a lista de compras de algu√©m (talvez seu chefe)

- que simplesmente digitou os itens separados por espa√ßo, e em uma ordem qualquer.

. . .

Vamos usar o Copilot para automatizar essa tarefa.


## 

Como voc√™ recebeu os itens por e-mail ou WhatsApp,

- a ferramenta ser√° mais √∫til se pudermos copiar (Ctrl+c) os itens da mensagem.
- e colar (Ctrl+v) na nossa ferramenta para ela gerar a lista numerada.
- Caso contr√°rio, ter√≠amos que redigitar a lista
  - e a√≠ n√£o estar√≠amos economizando tempo.

. . .

Para isso, precisaremos usar a [√Årea de Transfer√™ncia]{.alert} (_Clipboard_) do Sistema Operacional.

##

Essa **√Årea de Transfer√™ncia** √© onde ficam os √∫ltimos dados que copiamos com o Ctrl+c.

- Podemos ent√£o criar uma ferramenta que obtenha as palavras da √Årea de Transfer√™ncia.
- Gere a lista numerada.
- E copie a lista numerada de volta para a √Årea de Transfer√™ncia.

. . .

Assim, depois de rodar a ferramenta, podemos simplesmente colar (Ctrl+v) a lista numerada onde quisermos.

##

Basicamente o que precisamos fazer em um programa em Python √©:

- Ler o conte√∫do da √Årea de Transfer√™ncia e guardar em uma string.
- Gerar a lista numerada e ordenada a partir dessa string.
- Guardar a lista em uma nova string.
- Colocar a nova string na √Årea de Transfer√™ncia.

. . .

Mas como podemos usar a √Årea de Transfer√™ncia em um programa Python?

## 

Vamos descobrir isso usando a janela de chat do Copilot.

- Mas vamos fazer uma explora√ß√£o mais ampla antes de implementar uma solu√ß√£o.

. . .

Vamos abrir uma pasta vazia no VS Code e usar o modo `Ask` do chat do Copilot.

##

[Prompt]{.alert}: Eu gostaria de escrever um programa em Python que 
acessa a √°rea de transfer√™ncia e que permita copiar 
e colar usando a √°rea de transfer√™ncia. 
Como posso fazer isso?

##

::: {.r-fit-text .nonincremental}
[GitHub Copilot]{.alert}: Voc√™ pode usar o m√≥dulo `pyperclip` para acessar a √°rea de transfer√™ncia no Python. Ele permite copiar e colar texto facilmente. Veja como fazer:

1. Instale o pacote:
```bash
pip install pyperclip
```

2. Exemplo de c√≥digo para copiar e colar:

````python
import pyperclip

# Copiar texto para a √°rea de transfer√™ncia
pyperclip.copy("Ol√°, √°rea de transfer√™ncia!")

# Colar (obter) texto da √°rea de transfer√™ncia
texto = pyperclip.paste()
print("Texto copiado:", texto)
````

Esse c√≥digo copia um texto para a √°rea de transfer√™ncia e depois l√™ o que est√° l√°.  
Funciona em Linux, Windows e macOS.
:::

##

A resposta do Copilot nos ensina que podemos usar o m√≥dulo `pyperclip` para
interagir com a √Årea de Transfer√™ncia em um programa em Python.

- Ele tamb√©m nos d√° um exemplo de como usar o m√≥dulo.
- Ele tamb√©m nos diz como instalar o m√≥dulo.
  - O que mostra que ele √© n√£o √© _built-in_.

. . .

Mas ser√° que n√£o daria para fazer nossa ferramenta sem instalar um m√≥dulo?

- Vamos perguntar ao Copilot.

##

[Prompt]{.alert}: Existe alguma forma de fazer isso sem precisar instalar um m√≥dulo Python?

##

::: {.r-fit-text .nonincremental}
[GitHub Copilot]{.alert}: Sim, √© poss√≠vel acessar a √°rea de transfer√™ncia sem instalar m√≥dulos externos, mas depende do sistema operacional. No Linux, voc√™ pode usar comandos do sistema como `xclip` ou `xsel` via `subprocess`. Veja um exemplo usando `xclip`:

````python
import subprocess

# Copiar texto para a √°rea de transfer√™ncia
texto = "Ol√°, √°rea de transfer√™ncia!"
process = subprocess.Popen(['xclip', '-selection', 'clipboard'], stdin=subprocess.PIPE)
process.communicate(input=texto.encode())

# Colar (obter) texto da √°rea de transfer√™ncia
process = subprocess.Popen(['xclip', '-selection', 'clipboard', '-o'], stdout=subprocess.PIPE)
saida, _ = process.communicate()
print("Texto copiado:", saida.decode())
````

**Observa√ß√µes:**

- Voc√™ precisa ter o `xclip` instalado (`sudo apt install xclip`).
- Para Windows, pode-se usar `clip` e `powershell` via subprocess.
- Para macOS, use `pbcopy` e `pbpaste`.

Se precisar de exemplos para outros sistemas, √© s√≥ pedir!
:::

##

Bom essa solu√ß√£o tem uma desvantagem: depende de um programa externo e do sistema operacional.

- Se formos tratar a tarefa apenas uma √∫nica vez poderia nos atender.
- Mas pensando em usos futuros, n√£o √© a melhor solu√ß√£o.

. . .

Vamos explorar mais solu√ß√µes.

##

[Prompt]{.alert}: Existe algum outro jeito de fazer isso sem precisar instalar um m√≥dulo Python?


##

::: {.r-fit-text .nonincremental}
[GitHub Copilot]{.alert}: Sim, mas voc√™ ainda vai precisar de algum utilit√°rio externo j√° instalado no sistema, como `xclip` ou `xsel` no Linux, `pbcopy`/`pbpaste` no macOS, ou `clip` no Windows. O Python puro n√£o oferece acesso direto √† √°rea de transfer√™ncia na biblioteca padr√£o.

No Linux, por exemplo, se o `xclip` j√° estiver instalado, voc√™ pode usar o seguinte c√≥digo:

````python
import subprocess

# Copiar texto para a √°rea de transfer√™ncia
subprocess.run("echo 'Texto para copiar' | xclip -selection clipboard", shell=True)

# Colar texto da √°rea de transfer√™ncia
resultado = subprocess.run("xclip -selection clipboard -o", shell=True, capture_output=True, text=True)
print("Texto colado:", resultado.stdout)
````

**Resumo:**  
Sem instalar m√≥dulos Python, voc√™ pode usar comandos do sistema operacional via `subprocess`, desde que o utilit√°rio de √°rea de transfer√™ncia j√° esteja dispon√≠vel no seu sistema.
:::


##

Bom, essa resposta n√£o ajudou muito, afinal continua basicamente fazendo a mesma coisa.

. . .

No livro, a primeira solu√ß√£o do Copilot foi usar o m√≥dulo `tkinter`.

- Que tem a limita√ß√£o de s√≥ funcionar em ambientes gr√°ficos (n√£o funciona em servidores Linux, por exemplo).

. . .

Ao pedir outra op√ß√£o, o Copilot sugeriu um c√≥digo espec√≠fico para Windows usando `win32clipboard`.

- Porque os autores estavam em ambiente Windows.
- Mas tem o mesmo tipo de limita√ß√£o da nossa solu√ß√£o com `xclip`.

##

Avaliando ent√£o as op√ß√µes que temos, a melhor √© usar o m√≥dulo `pyperclip`.

- Afinal instalar um m√≥dulo n√£o √© algo t√£o complicado.
- E o `pyperclip` funciona em Linux, Windows e macOS.
- E n√£o depende de programas externos.

##

:::{.callout-note}
## Mas por que devemos explorar e entender v√°rias op√ß√µes?

H√° v√°rios motivos porque n√£o dever√≠amos simplesmente usar a primeira op√ß√£o do Copilot:

- Pode n√£o funcionar em todos os sistemas operacionais. 
  - O que limita os potenciais usu√°rios da ferramenta.
- Pode n√£o funcionar para a tarefa que precisamos, ou pode ser que cheguemos em um ponto
que ficamos travados em como resolver um problema.
  - E a√≠ sabermos que temos outras op√ß√µes pode nos ajudar a sair do impasse.
- M√≥dulos s√£o atualizados com frequ√™ncia.
  - E fun√ß√µes que existiam, podem n√£o existir nas vers√µes mais atuais.
  - Ou sua forma de uso pode ter sido alterada.
  - E, assim, uma sugest√£o do Copilot pode n√£o funcionar mais.
:::

## 

Agora que sabemos como acessar a √Årea de Transfer√™ncia, podemos criar nossa ferramenta.

- como vamos precisar instalar um m√≥dulo, vamos aproveitar para aprender como fazer isso do jeito mais correto.
- Claro, com a ajuda do Copilot.

. . .

[Prompt]{.alert}: Vou seguir com a sugest√£o que usa pyperclip. Mas, antes disso, me explique a melhor forma de instalar um m√≥dulo Python para um projeto?

##

::: {.r-fit-text .nonincremental}
[GitHub Copilot]{.alert}: A melhor forma de instalar um m√≥dulo Python para um projeto √© usar um ambiente virtual. Assim, as depend√™ncias ficam isoladas e n√£o afetam outros projetos ou o sistema.

**Passos recomendados:**

1. **Crie um ambiente virtual na pasta do projeto:**
```bash
python3 -m venv venv
```

2. **Ative o ambiente virtual:**
```bash
source venv/bin/activate
```

3. **Instale o m√≥dulo desejado (exemplo: pyperclip):**
```bash
pip install pyperclip
```

4. **(Opcional) Gere um arquivo de depend√™ncias:**
```bash
pip freeze > requirements.txt
```

Assim, voc√™ mant√©m seu projeto organizado e f√°cil de compartilhar ou replicar em outros ambientes.
:::

##

O Copilot nos ensinou a criar um ambiente virtual.

- De modo que a instala√ß√£o do m√≥dulo `pyperclip` fique dentro da pasta do pr√≥prio projeto.
- Evitando interfer√™ncias e conflitos de vers√µes com outros projetos.

. . .

Tamb√©m aprendemos a gerar um arquivo `requirements.txt`

- mas n√£o ficou muito claro para que ele serve, j√° que foi gerado somente ao final.

. . .

Vamos perguntar ao Copilot.

##

[Prompt]{.alert}: Para que serve o arquivo requirements.txt?

. . .

::: {.nonincremental}
[GitHub Copilot]{.alert}: O arquivo requirements.txt serve para listar todas as depend√™ncias (m√≥dulos e suas vers√µes) necess√°rias para o seu projeto Python. Ele facilita a instala√ß√£o dessas depend√™ncias em outros ambientes ou por outros desenvolvedores, usando o comando:

```bash
pip install -r requirements.txt
```

Assim, todos os pacotes listados no arquivo ser√£o instalados automaticamente, garantindo que o projeto funcione corretamente.
:::

##

Agora ficou mais claro.

- Quando formos instalar o projeto em outro computador, ou quando algu√©m for usar o projeto,
- basta criar um ambiente virtual e rodar o comando `pip install -r requirements.txt`.

. . .

Vamos, enfim, criar nossa ferramenta.

- Para isso, vamos, criar um arquivo Python, importar o m√≥dulo `pyperclip`
- e definir a assinatura e docstring fun√ß√£o que gera a lista numerada.

##

::: {.r-fit-text .nonincremental}
```python
import pyperclip

def gerar_lista_numerada():
    """"
    A √°rea de transfer√™cia tem linhas de texto contendo
    palavras separadas por espa√ßos e/ou v√≠rgulas.

    A fun√ß√£o extrai as palavras obtidas da √°rea de transfer√™ncia,
    ordena-as em ordem alfab√©tica e cria uma lista numerada com
    um item por linha.

    O resultado √© copiado de volta para a √°rea de transfer√™ncia.    
    """
```
:::

##

::: {.r-fit-text .nonincremental}
```python
def gerar_lista_numerada():
    """" docstring omitida para n√£o encher o slide """
    # Obt√©m o texto da √°rea de transfer√™ncia
    texto = pyperclip.paste()

    # Substitui v√≠rgulas por espa√ßos e divide o texto em palavras
    palavras = texto.replace(',', ' ').split()

    # Remove duplicatas e ordena as palavras em ordem alfab√©tica
    palavras_unicas = sorted(set(palavras))

    # Cria a lista numerada
    lista_numerada = [f"{i + 1}. {palavra}" for i, palavra in enumerate(palavras_unicas)]

    # Junta a lista em uma √∫nica string com quebras de linha
    resultado = '\n'.join(lista_numerada)

    # Copia o resultado de volta para a √°rea de transfer√™ncia
    pyperclip.copy(resultado)

if __name__ == "__main__":
    gerar_lista_numerada()
```
:::

##

:::{.callout-tip}
Como n√≥s criamos o ambiente virtual pelo termninal do VS Code, se tentarmos usar a op√ß√£o `Run` do VS Code, ele n√£o vai funcionar.

Precisamos escolher a vers√£o do Python que est√° dentro do ambiente virtual.
Basta clicar no canto inferior esquerdo do VS Code e escolher o Python correto.

Obs.: se tiv√©ssemos criado o ambiente virtual pelo VS Code (`Ctrl_Shift_P` e escolher `Python: Create Environment`), o VS Code j√° teria escolhido o Python correto.
:::

##

Vamos ent√£o testar o nosso programa.

. . .

Suponha que tenhamos recebido a seguinte lista de compras:

- feij√£o, arroz, sorvete, caf√©, batata, √≥leo, cebola

. . .

Copie a lista acima (Ctrl+c) e rode o programa.

- Em seguida cole (Ctrl+v) a lista numerada em algum editor de texto.

##

Veja que deu quase tudo certo.

- Exceto que a palavra `√≥leo` apareceu fora da ordem alfab√©tica.

. . .

```{.text code-line-numbers="false"}
1. arroz
2. batata
3. caf√©
4. cebola
5. feij√£o
6. sorvete
7. √≥leo
```


## 

Provavelmente o erro aconteceu porque a palavra tem acento.

- Vamos pedir ao Copilot para corrigir isso.

. . .

[Prompt]{.alert}: A ordena√ß√£o est√° errada, pois a palavra "√≥leo" deveria aparecer antes de "sorvete". Pode corrigir isso?

##

::: {.r-fit-text .nonincremental}
[GitHub Copilot]{.alert}: Claro! O problema ocorre porque a ordena√ß√£o padr√£o do Python (`sorted`) n√£o considera corretamente os acentos para a ordem alfab√©tica em portugu√™s. Para corrigir, voc√™ pode usar o m√≥dulo `locale` e configurar para `'pt_BR.UTF-8'`. Veja como ajustar:

````python
import pyperclip
import locale

def gerar_lista_numerada():
    """
    A √°rea de transfer√™cia tem linhas de texto contendo
    palavras separadas por espa√ßos e/ou v√≠rgulas.

    A fun√ß√£o extrai as palavras obtidas da √°rea de transfer√™ncia,
    ordena-as em ordem alfab√©tica e cria uma lista numerada com
    um item por linha.

    O resultado √© copiado de volta para a √°rea de transfer√™ncia.    
    """
    # Configura a ordena√ß√£o para o padr√£o do portugu√™s do Brasil
    locale.setlocale(locale.LC_COLLATE, 'pt_BR.UTF-8')

    # Obt√©m o texto da √°rea de transfer√™ncia
    texto = pyperclip.paste()

    # Substitui v√≠rgulas por espa√ßos e divide o texto em palavras
    palavras = texto.replace(',', ' ').split()

    # Remove duplicatas e ordena as palavras em ordem alfab√©tica considerando acentos
    palavras_unicas = sorted(set(palavras), key=locale.strxfrm)

    # Cria a lista numerada
    lista_numerada = [f"{i + 1}. {palavra}" for i, palavra in enumerate(palavras_unicas)]

    # Junta a lista em uma √∫nica string com quebras de linha
    resultado = '\n'.join(lista_numerada)

    # Copia o resultado de volta para a √°rea de transfer√™ncia
    pyperclip.copy(resultado)

if __name__ == "__main__":
    gerar_lista_numerada()
````

Agora, palavras acentuadas ser√£o ordenadas corretamente conforme o portugu√™s.  
**Obs:** Certifique-se de que o locale `pt_BR.UTF-8` est√° instalado no seu sistema Linux. Se n√£o estiver, instale com:

```bash
sudo locale-gen pt_BR.UTF-8
sudo update-locale
```
:::

##

Agora sim!

- Temos uma ferramenta que nos economiza tempo pegar gerar a lista no formato correto.
- Claro que esse √© um exemplo simples e did√°tico.
  - Seguindo a mesma ideia voc√™ pode criar ferramentas para tarefas mais complexas.

##

Mas tem algo que ainda √© complicado em nossa ferramenta.

- Precisamos usar o VS Code para rodar o programa.
- Ou ent√£o abrir o terminal, navegar at√© a pasta do projeto, ativar o ambiente virtual e rodar o programa.
- Isso n√£o √© muito pr√°tico.

. . .

Seria melhor se pud√©ssemos simplesmente clicar duas vezes em um √≠cone na √°rea de trabalho.

- E a√≠ a ferramenta rodaria sem precisar abrir o VS Code ou o terminal.

##

[Prompt]{.alert}: Eu gostaria que esse programa estivesse dispon√≠vel para o usu√°rio como um comando de terminal. Sem precisar entrar na pasta do projeto, ativer o ambiente virtual e rodar o programa manualmente. Como posso fazer isso?

##

::: {.r-fit-text .nonincremental}
[GitHub Copilot]{.alert}: Para tornar seu programa dispon√≠vel como um comando de terminal, voc√™ pode empacot√°-lo como um **script execut√°vel** e instal√°-lo no sistema. O jeito mais comum em projetos Python √© criar um **entry point** usando o `setuptools`. Veja como fazer:

### 1. Crie um arquivo `setup.py` na raiz do projeto:

````python
from setuptools import setup

setup(
    name="gerador-lista-numerada",
    version="1.0",
    py_modules=["gerador_lista_numerada"],
    install_requires=["pyperclip"],
    entry_points={
        "console_scripts": [
            "gerador-lista-numerada=gerador_lista_numerada:gerar_lista_numerada",
        ],
    },
)
````
### 2. Instale o pacote no modo edit√°vel (para desenvolvimento):

No terminal, dentro da pasta do projeto:

```bash
pip install --user --editable .
```
:::

##

::: {.r-fit-text .nonincremental}
[GitHub Copilot _(continua√ß√£o)_]{.alert}: 

### 3. Use o comando no terminal

Agora, voc√™ pode rodar o comando de qualquer lugar:

```bash
gerador-lista-numerada
```

---

**Dicas:**

- O comando ser√° instalado em `~/.local/bin` (Linux). Certifique-se de que esse diret√≥rio est√° no seu `$PATH`.
- Para outros usu√°rios do sistema, use `sudo pip install .` (n√£o recomendado para ambientes compartilhados).
- Se quiser distribuir, pode empacotar e publicar no PyPI.

Se quiser um nome de comando diferente, basta alterar em `console_scripts`.
:::

##

Legal! Agora podemos abrir um terminal, rodar o comando `gerador-lista-numerada` e pronto!

- Teremos nossa lista de compras numerada na √Årea de Transfer√™ncia.

. . . 

Mas ser√° que n√£o podemos fazer algo ainda mais pr√°tico?

. . . 

[Prompt]{.alert}: E como fa√ßo para ter um √≠cone na √°rea de trabalho para executar o programa?

##

::: {.r-fit-text .nonincremental}
[GitHub Copilot]{.alert}: Para criar um atalho com √≠cone na √°rea de trabalho (no Linux), siga estes passos:

### 1. Crie um arquivo `.desktop`

Crie um arquivo chamado, por exemplo, `GeradorListaNumerada.desktop` na sua √°rea de trabalho (`~/√Årea de Trabalho` ou `~/Desktop`):

````ini
[Desktop Entry]
Version=1.0
Type=Application
Name=Gerador Lista Numerada
Comment=Gera uma lista numerada a partir da √°rea de transfer√™ncia
Exec=gerador-lista-numerada
Icon=/caminho/para/um/icone.png
Terminal=false
Categories=Utility;
````

- **Exec**: o comando instalado pelo seu script (`gerador-lista-numerada`).
- **Icon**: caminho para um arquivo de √≠cone (PNG, SVG, etc). Voc√™ pode usar um √≠cone pr√≥prio ou algum do sistema.
- **Terminal**: coloque `true` se quiser que abra um terminal, ou `false` para rodar em segundo plano.
:::

##

::: {.r-fit-text .nonincremental}
[GitHub Copilot _(continua√ß√£o)_]{.alert}: 

### 2. Torne o atalho execut√°vel

No terminal, rode:

```bash
chmod +x ~/√Årea\ de\ Trabalho/GeradorListaNumerada.desktop
```

### 3. (Opcional) Escolha um √≠cone

Se n√£o tiver um √≠cone, pode baixar um PNG ou usar algum j√° presente no sistema, como `/usr/share/icons/hicolor/48x48/apps/accessories-text-editor.png`.

---

Agora, basta clicar duas vezes no √≠cone para executar o programa!  
Se aparecer um aviso de seguran√ßa, clique em "Confiar" ou "Permitir execu√ß√£o".
:::

##

Bacana! Temos agora um programa dispon√≠vel na √°rea de trabalho.

- Ficou muito mais r√°pido gerar a lista numerada.

. . .

Poder√≠amos melhorar nosso programa dando algum retorno de que ele foi executado com sucesso.

- Mas vamos tratar outra demanda tediosa agora.

# Exemplo 2: Adicionando capas a arquivos PDF {background-color="#40666e"}

##

## 
Possibilidades para o primeiro exemplo:
- Copiar uma lista de palavras como `arroz feijao caf√©` e gerar uma lista numerada com um por linha.
- Ou copiar duas colunas de uma planilha contendo e-mail e nota e gerar e-mail informando para secretaria
  um e-mail relatando o n√∫mero de aprovados e reprovados.
- Copiar trechos da CEPE 473 e acertar as quebras de linha.
- Copiar a CEPE inteira e obter o artigo que fala sobre um determinado assunto.

feij√£o, arroz, caf√©, batata, √≥leo, cebola

