---
title: Visualizando Dados
subtitle: PASIA - Aula P.7
---

# Pandas {background-color="#40666e"}

##

O [Pandas]{.alert} √© a principal biblioteca de an√°lise e manipula√ß√£o de dados em Python.

. . .

Ele fornece duas estruturas de dados fundamentais:

- `Series` ‚Üí colunas unidimensionais (semelhantes a vetores ou colunas de uma tabela).
- `DataFrame` ‚Üí tabelas bidimensionais (semelhantes a planilhas do Excel ou tabelas de Banco de Dados).

## Para que serve o Pandas?

**Leitura e escrita de dados**

- Permite lidar facilmente com arquivos CSV, Excel, JSON, SQL e muitos outros.

. . .

**Limpeza e prepara√ß√£o de dados**

- Facilita o tratamento de valores ausentes, remo√ß√£o de duplicatas, corre√ß√£o de tipos de dados, etc.

## Para que serve o Pandas?

**Transforma√ß√£o e manipula√ß√£o**

- Realiza opera√ß√µes de sele√ß√£o de colunas, filtro de linhas, agrupamento de dados (_groupby_), ordena√ß√£o, etc.
- Permite criar novas colunas com base em c√°lculos ou fun√ß√µes.

. . .

**An√°lise estat√≠stica**

- M√©dias, somas, contagens, desvios padr√£o, correla√ß√µes.

## Para que serve o Pandas?

**Integra√ß√£o**

- Funciona muito bem com NumPy, Matplotlib, Seaborn, Scikit-learn e outras bibliotecas.

. . .

**Gr√°ficos**

- Facilita a gera√ß√£o de gr√°ficos b√°sicos diretamente a partir de DataFrames.
- Usa, internamente, a biblioteca Matplotlib.

##

Como nosso foco aqui √© em visualiza√ß√£o de dados, n√£o entraremos em detalhes sobre o Pandas.

- Mas vamos ver exemplos de gera√ß√£o de gr√°ficos com ele.

. . .

::: {.callout-caution title="Prompt" icon="false"}
Os dados abaixo que se referem √†s vendas mensais de tr√™s produtos.
Armazene os dados em um DataFrame do Pandas e gere um gr√°fico de linhas.

```
M√™s	Produto A	Produto B	Produto C
Jan	150	100	80
Fev	200	120	90
Mar	250	180	100
Abr	300	160	120
Mai	280	170	140
Jun	320	150	160
```
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import pandas as pd

import matplotlib.pyplot as plt

# Dados das vendas mensais
dados = {
    'M√™s': ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun'],
    'Produto A': [150, 200, 250, 300, 280, 320],
    'Produto B': [100, 120, 180, 160, 170, 150],
    'Produto C': [80, 90, 100, 120, 140, 160]
}

# Criar DataFrame
df = pd.DataFrame(dados)

# Definir a coluna 'M√™s' como √≠ndice
df.set_index('M√™s', inplace=True)

# Gerar gr√°fico de linhas
df.plot(marker='o')

plt.show()
```
:::

##

::: {.callout-caution title="Prompt" icon="false"}
Calcule o total de vendas de cada produto e mostre em um gr√°fico de barras.
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import pandas as pd
import matplotlib.pyplot as plt

# Dados das vendas mensais
dados = {
    'M√™s': ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun'],
    'Produto A': [150, 200, 250, 300, 280, 320],
    'Produto B': [100, 120, 180, 160, 170, 150],
    'Produto C': [80, 90, 100, 120, 140, 160]
}

# Criar DataFrame
df = pd.DataFrame(dados)

# Definir a coluna 'M√™s' como √≠ndice
df.set_index('M√™s', inplace=True)

# Calcular o total de vendas de cada produto
totais = df.sum()

# Gerar gr√°fico de barras
totais.plot(kind='bar', color=['blue', 'orange', 'green'])
plt.ylabel('Total de Vendas')
plt.title('Total de Vendas por Produto')
plt.show()
```
:::

# Seaborn {background-color="#40666e"}

## Seaborn

- Biblioteca constru√≠da sobre o Matplotlib.
- Oferece visualiza√ß√µes estat√≠sticas com apar√™ncia mais elegante.
- Facilita cria√ß√£o de gr√°ficos de distribui√ß√µes, correla√ß√µes e regress√µes.
- Ideal para an√°lise explorat√≥ria de dados.






# Pandas {background-color="#40666e"}

## Pandas (df.plot)

- üìå Permite criar gr√°ficos diretamente de DataFrames.
- Baseado no Matplotlib.
- Muito √∫til para an√°lises r√°pidas e relat√≥rios simples.
- Menos flex√≠vel para visualiza√ß√µes complexas.

```python
import pandas as pd

df = pd.DataFrame({
    "Ano": [2021, 2022, 2023],
    "Vendas": [150, 200, 250]
})

df.plot(x="Ano", y="Vendas", kind="bar", title="Vendas por Ano")
```

# Seaborn {background-color="#40666e"}

## Seaborn

- üìå Constru√≠da sobre o Matplotlib.
- Oferece visualiza√ß√µes estat√≠sticas com apar√™ncia mais elegante.
- Facilita cria√ß√£o de gr√°ficos de distribui√ß√µes, correla√ß√µes e regress√µes.
- Ideal para an√°lise explorat√≥ria de dados.

```python
import seaborn as sns
import matplotlib.pyplot as plt

sns.lineplot(x=[1, 2, 3, 4], y=[10, 20, 25, 30], marker="o")
plt.title("Exemplo Seaborn")
plt.show()
```

##


meses = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"]
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 220, 210]
produto_c = [80, 90, 100, 120, 140, 160]

Para ma

Suponha que tenhamos esses dados de vendas em um dicion√°rio Python:

- Note que as chaves dos dicion√°rios representam os nomes das colunas
- e os valores s√£o listas com os dados de cada coluna.

. . 

```python
import pandas as pd



df = pd.DataFrame(dados)
print(df)
```

## Os Dados

Para exemplicar o uso das bibliotecas, vamos usar um conjunto de dados simples.

- üìä Exemplo: **Vendas mensais de tr√™s produtos**

```python
import pandas as pd

dados = {
    "M√™s": ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"],
    "Produto A": [150, 200, 250, 300, 280, 320],
    "Produto B": [100, 120, 180, 160, 220, 210],
    "Produto C": [80, 90, 100, 120, 140, 160]
}

df = pd.DataFrame(dados)
print(df)
```



##

Esses dados poderiam estar dispon√≠veis em uma planilha ou arquivo CSV, por exemplo.

- Mas para usarmos aqui, vamos criar um dicion√°rio Python com esses dados.

. . .

```python
vendas = {
    "M√™s": ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"],
    "Produto A": [150, 200, 250, 300, 280, 320],
    "Produto B": [100, 120, 180, 160, 220, 210],
    "Produto C": [80, 90, 100, 120, 140, 160]
}
```

Repare que cada chave do dicion√°rio representa o nome de uma coluna.

- E os valores s√£o listas com os dados de cada coluna.

# Plotly {background-color="#40666e"}

## Plotly

- üìå Biblioteca para gr√°ficos interativos.
- Suporta zoom, hover, exporta√ß√£o e gr√°ficos 3D.
- Muito usada em dashboards e relat√≥rios din√¢micos.
- Integra-se bem com Dash para aplica√ß√µes web.

```python
import plotly.express as px

df = px.data.iris()
fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species")
fig.show()
```

#


Ideias:

- Usar colormap para visualizar temperatura ou chuvas em uma mapa.