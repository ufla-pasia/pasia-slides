---
title: Visualizando Dados
subtitle: PASIA - Aula P.7
---

##

Na aula de hoje vamos praticar a [análise e visualização de dados]{.alert} em Python.

- Trabalharemos com análise de dados, conhecendo um pouco da biblioteca [Pandas]{.alert}.

. . .

Já em relação à visualização, não usaremos a biblioteca Matplotlib.

- Em vez disso vamos explorar a biblioteca [Plotly]{.alert}.
- Veremos que ela tem uma proposta diferente, focada em gráficos interativos.

# Pandas {background-color="#40666e"}

## Para que serve o Pandas?

O [Pandas]{.alert} é a principal biblioteca de **análise** e **manipulação de dados** em Python.

. . .

**Leitura e escrita de dados**

- Permite lidar facilmente com arquivos CSV, Excel, JSON, SQL e muitos outros.

. . .

**Limpeza e preparação de dados**

- Facilita o tratamento de valores ausentes, remoção de duplicatas, correção de tipos de dados, etc.

## Para que serve o Pandas?

**Transformação e manipulação**

- Realiza operações de seleção de colunas, filtro de linhas, agrupamento de dados (_groupby_), ordenação, etc.
- Permite criar novas colunas com base em cálculos ou funções.

. . .

**Análise estatística**

- Médias, somas, contagens, desvios padrão, correlações.

## Para que serve o Pandas?

**Integração**

- Funciona muito bem com NumPy, Matplotlib, Seaborn, Scikit-learn e outras bibliotecas.

. . .

**Gráficos**

- Facilita a geração de gráficos básicos diretamente a partir de DataFrames.
- Usa, internamente, a biblioteca Matplotlib.

##

Como mencionado, Pandas trabalha com dados tabulares

- como planilhas do Excel ou tabelas de banco de dados.

- E possui duas estruturas de dados principais: [DataFrame]{.alert} e [Series]{.alert}.


## DataFrame

Um **DataFrame** é uma **tabela bidimensional**.

- Cada coluna pode ter um tipo de dado diferente (números, texto, datas, etc).
- Cada linha representa um registro ou observação.

:::: {.columns}

::: {.column width="50%"}
![](imagens/pandas_dataframe.svg){fig-align="center" fig-alt="Ilustração de um DataFrame do Pandas." style="max-height: 50vh; width: auto;"}
:::

::: {.column width="50%"}
- Pandas tem suporte para leitura e escrita de dados em diversos formatos.
- Como CSV, Excel, JSON, SQL, entre outros.
:::

::::


## Series

Cada **coluna** de um DataFrame é uma **Series**.


:::: {.columns}

::: {.column width="50%"}
![](imagens/pandas_series.svg){fig-align="center" fig-alt="Ilustração de uma Series do Pandas." style="max-height: 50vh; width: auto;"}
:::

::: {.column width="50%"}
- Uma Series é uma estrutura unidimensional, como uma lista ou array.
- Tem um índice associado a cada valor.
- E tem um tipo de dado único.
:::

::::

## Exemplo

Para ilustrar esse conceito vamos criar um DataFrame simples,

- basedo no mesmo exemplo vendas de produtos que vimos na aula passada.

. . .

::: {.callout-caution title="Prompt" icon="false"}
Crie um dataframe do Pandas com os dados abaixo que se referem às vendas mensais de três produtos.

```
Mês	Produto A	Produto B	Produto C
Jan	150	100	80
Fev	200	120	90
Mar	250	180	100
Abr	300	160	120
Mai	280	170	140
Jun	320	150	160
```
:::

##

:::: {.columns}

::: {.column width="60%"}

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import pandas as pd

# Dados das vendas mensais
dados = {
    'Mês': ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun'],
    'Produto A': [150, 200, 250, 300, 280, 320],
    'Produto B': [100, 120, 180, 160, 170, 150],
    'Produto C': [80, 90, 100, 120, 140, 160]
}

df = pd.DataFrame(dados)

print(df)
```
:::

```text
   Mês  Produto A  Produto B  Produto C
0  Jan        150        100         80
1  Fev        200        120         90
2  Mar        250        180        100
3  Abr        300        160        120
4  Mai        280        170        140
5  Jun        320        150        160
```
:::

::: {.column width="40%"}
- O DataFrame foi criado a partir de um dicionário Python.
- As chaves do dicionário representam os nomes das colunas.
- E os valores são listas com os dados de cada coluna (se tornam as Series).
:::

::::

## Operações comuns com DataFrames 

. . .

**Seleção de colunas**

- Sintaxe: dataframe[nome_da_coluna]

. . .

```python
print("Vendas do Produto A:")
print(df['Produto A'])
```

. . .

```
Vendas do Produto A:
0    150
1    200
2    250
3    300
4    280
5    320
Name: Produto A, dtype: int64
```

##

**Filtragem de dados (linhas)**

- Sintaxe: dataframe[condição]

. . .

```python
print("\nMeses com vendas do Produto B acima de 150:")
print(df[df['Produto B'] > 150])
```

. . .

```
Meses com vendas do Produto B acima de 150:
   Mês  Produto A  Produto B  Produto C
2  Mar        250        180        100
3  Abr        300        160        120
4  Mai        280        170        140
```

##

**Ordenação de dados**

. . .

```python
# Exemplo de 
print("\nDados ordenados por vendas do Produto A (decrescente):")
print(df.sort_values(by='Produto A', ascending=False))
```

. . .

```
Dados ordenados por vendas do Produto A (decrescente):
   Mês  Produto A  Produto B  Produto C
5  Jun        320        150        160
3  Abr        300        160        120
4  Mai        280        170        140
2  Mar        250        180        100
1  Fev        200        120         90
0  Jan        150        100         80
```

##

**Criação de novas colunas**

- Sintaxe: dataframe[nova_coluna] = expressão

. . .

```python
# Exemplo de adição de nova coluna
df['Total Vendas'] = df['Produto A'] + df['Produto B'] + df['Produto C']
print("\nDataFrame com coluna de Total de Vendas por Mês:")
print(df)
```

. . .

```
DataFrame com coluna de Total de Vendas:
   Mês  Produto A  Produto B  Produto C  Total Vendas
0  Jan        150        100         80           330
1  Fev        200        120         90           410
2  Mar        250        180        100           530
3  Abr        300        160        120           580
4  Mai        280        170        140           590
5  Jun        320        150        160           630
```

##

**Estatísticas básicas**

- Sintaxe: dataframe.funcao()

. . .

```python
print("\nMaior Venda Mensal do Produto A:")
print(df['Produto A'].max())
```

. . .

```
Maior Venda Mensal do Produto A:
320
```

. . .

```python
print("\nMédia de vendas por produto:")
print(df[['Produto A', 'Produto B', 'Produto C']].mean())
```

. . .

```
Média de vendas por produto:
Produto A    250.000000
Produto B    146.666667
Produto C    115.000000
dtype: float64
```

##

A função `describe()` gera várias estatísticas descritivas de uma só vez.

. . .

```python
print("\nEstatísticas descritivas dos produtos:")
print(df[['Produto A', 'Produto B', 'Produto C']].describe())
```

. . .

```
Estatísticas descritivas dos produtos:
        Produto A   Produto B  Produto C
count    6.000000    6.000000    6.00000
mean   250.000000  146.666667  115.00000
std     64.498062   30.767949   30.82207
min    150.000000  100.000000   80.00000
25%    212.500000  127.500000   92.50000
50%    265.000000  155.000000  110.00000
75%    295.000000  167.500000  135.00000
max    320.000000  180.000000  160.00000
```

##

Podemos gerar **gráficos** facilmente a partir de DataFrames.

. . .

```python
import matplotlib.pyplot as plt

# A geração do gráfico em si é feita nessa chamada
df.set_index('Mês')[['Produto A', 'Produto B', 'Produto C']].plot(marker='o')

plt.title('Vendas Mensais por Produto')
plt.xlabel('Mês')
plt.ylabel('Vendas')
plt.legend()
plt.grid()
plt.show()
```

##

O Pandas possui integração com Matplotlib para gerar os gráficos.


![](imagens/pandas_grafico_vendas.png){fig-align="center" fig-alt="Gráfico de linhas gerado com Pandas." style="max-height: 50vh; width: auto;"}

## 

Vamos agora utilizar o Pandas, com a ajuda do Copilot, para analisar consumo de refeições do RU.

- Você pode baixar o CSV diretamente do [Portal de Dados Abertos](https://dados.ufla.br/dataset/relacao-de-estudantes-contemplados-com-o-restaurante-universitario-ru/resource/342c5912-ff29-4a4f-b150-46ebc06e7424?inner_span=True) da UFLA:
- Ou então baixar da página da disciplina no Campus Virtual.

##

A ideia dos exercícios é ganhar familiaridade com o Pandas.

- Portanto, copiar e colar enunciado da questão e copiar e
  só rodar o programa não vai agregar muito ao seu aprendizado.

##

:::: {.callout-note title="Tarefa 1" icon=false, .nonincremental}
Faça a leitura do arquivo CSV com os dados de Consumo do RU.

Identifique, via código, as colunas que estão disponíveis no conjunto de dados
e exiba na tela os nomes das colunas.

Observando o nome das colunas, identifique qual coluna indica a data das refeições
e exiba o número total de refeições e o período no qual se referem os dados 
(data inicial e final).
::::

##

:::: {.callout-note title="Tarefa 2" icon=false, .nonincremental}
Exiba um gráfico de linhas mostrando a quantidade de refeições consumidas por mês
por estudantes dos cursos de Ciência da Computação e de Sistemas de Informação
(separadamente).

Dica: lembre-se de filtrar o tipo de usuário.
:::

. . .

:::: {.callout-note title="Tarefa 3" icon=false, .nonincremental}
Considerando em conjunto as refeições de estudantes dos cursos de Ciência da Computação 
e de Sistemas de Informação, exiba um gráfico de colunas mostrando a quantidade de
refeições consumidas de acordo com a cidade de nascimento do estudante.

O gráfico deve mostrar primeiro as cidades com maior número de refeições consumidas.
:::

##

# Plotly {background-color="#40666e"}

## Plotly

- É uma biblioteca para criação de gráficos interativos.
- Possui alta qualidade visual, com design moderno.
- Possui layout responsivo, que se adapta a diferentes tamanhos de tela.
- Suporta zoom e _hover_ (informação adicional ao passar o mouse), por exemplo.
- Permite seleção, destaque e filtragem de dados diretamente no gráfico.
- Muito usada em dashboards e relatórios dinâmicos.

##

Plotly suporta vários tipos de gráficos.

- Vale a pena dar uma olhada no site para ter uma visão geral.
- [plotly.com/python](https://plotly.com/python/)

##

Vamos agora usar o Pandas e Plotly para criar gráficos interativos com os dados de municípios brasileiros.

- Para os próximos exercícios, baixe o [arquivo Excel](dados/municipios-mg.xlsx) com dados de municípios de Minas Gerais, obtidos do IBGE.


##

:::: {.callout-note title="Tarefa 4" icon=false, .nonincremental}
Faça a leitura do arquivo Excel com os dados dos municípios de Minas Gerais,
usando a biblioteca Pandas.

Crie um gráfico, usando Plotly, que mostre a população estimada em 2025 dos
20 municípios mais populosos de Minas Gerais.
::::

. . .

:::: {.callout-note title="Tarefa 5" icon=false, .nonincremental}
Exiba um gráfico de pizza mostrando a proporção de receitas realizadas em 2024
dos 5 maiores municípios do sul de Minas Gerais 
(Poços de Caldas, Pouso Alegre, Varginha, Passos e Lavras).
::::

##

:::: {.callout-note title="Tarefa 6" icon=false, .nonincremental}
Crie um gráfico de dispersão que mostre a relação entre o nível de escolarização,
a mortalidade infantil, a população estimada e o PIB per capta dos 40 municípios mais populosos de Minas Gerais.

Utilize:

- o eixo X para representar representar o PIB per capta,
- o eixo Y para representar a população estimada,
- o tamanho dos pontos para representar a mortalidade infantil,
- e a cor dos pontos para representar o nível de escolarização.
::::

# Dash {background-color="#40666e"}

## Dash

É um framework **_low code_** para construir aplicações web interativas baseadas em dados.

- Integrada ao Plotly para criar dashboards e visualizações complexas com pouco código.
- Usa componentes pré-construídos para gráficos, tabelas, controles deslizantes, botões, etc.
- Suporta callbacks para atualizar gráficos e componentes com base em interações do usuário.

##

Dê uma olhada no catálogo de exemplos do Dash:

- [dash-example-index.herokuapp.com](https://dash-example-index.herokuapp.com/)

##

:::: {.callout-note title="Tarefa 7" icon=false, .nonincremental}
Crie uma aplicação web interativa para mostrar o gráfico da Tarefa 6.

A aplicação deve permitir que o usuário selecione o número de municípios a serem exibidos no gráfico,
usando um controle deslizante (_slider_).
::::

. . .

:::: {.callout-note title="Tarefa 8" icon=false, .nonincremental}
Altere a aplicação web para que ela permita que o usuário altere o critério de seleção dos municípios 
a serem exibidos (mais populosos, de maior PIB per capta, etc), usando um menu suspenso (_dropdown_).
::::

##

:::: {.callout-note title="Tarefa 9" icon=false, .nonincremental}
Altere a aplicação Web de forma que o usuário consiga escolher quais colunas serão usadas
no gráfico de dispersão.

Ou seja, quais colunas representarão os eixos X e Y, o tamanho dos pontos e a cor dos pontos.
::::

