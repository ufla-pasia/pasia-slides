---
title: Visualizando Dados
subtitle: PASIA - Aula T.7
---

##  

O conte√∫do dessa aula √© inspirado:

:::: {.columns}

:::{.column width="50%"}
No **cap√≠tulo 8** do livro:

![](imagens/livro_python_ciencia_de_dados.png){fig-align="center" fig-alt="Capa do livro de Python para Ci√™ncia de Dados." style="max-height: 50vh; width: auto;"}

:::

:::{.column width="50%"}
E no **cap√≠tulo 15** do livro:

![](imagens/livro_curso_intensivo_python.jpg){fig-align="center" fig-alt="Capa do livro de Curso Intensivo de Python." style="max-height: 50vh; width: auto;"}
:::

::::


# Introdu√ß√£o {background-color="#40666e"}

## 

Imagine que voc√™ trabalha em uma empresa que comercializa um app para Smartphones.

- A empresa tem informa√ß√µes sobre a quantidade de licen√ßas vendidas por m√™s.
- E sobre o perfil de usu√°rio (como idade, pa√≠s, etc.) relacionado a essas vendas.

. . .

Voc√™ precisa apresentar essas informa√ß√µes para a diretoria da empresa.

- O objetivo √© ajudar a entender como aumentar o faturamento da empresa.

## 

Como voc√™ apresentaria as informa√ß√µes para a diretoria?

- voc√™ mostraria os dados em tabelas?
- ou voc√™ faria gr√°ficos?

. . .

A maioria das pessoas entende melhor informa√ß√µes apresentadas em gr√°ficos do que em tabelas.

- Um formato visual traz muito mais clareza para os dados.

##

Mas veja que n√£o basta mostrar os dados em um gr√°fico qualquer.

- √â necess√°rio que o gr√°fico seja simples, 
- visualmente agrad√°vel
- e, principalmente, que permita que todos entendem claramente o que veem.

. . .

Com isso, as pessoas conseguir√£o identificar padr√µes e tend√™ncias nos dados.

##

√â disso que se trata o que chamamos de [visualiza√ß√£o de dados]{.alert};

- que √© o uso de representa√ß√µes visuais para explorar e para evidenciar padr√µes em conjuntos de dados.

. . .

Um conjunto de dados (ou _dataset_) pode ser:

- desde uma simples lista de n√∫meros 
- at√© terabytes de dados com diversos tipos diferentes de inforama√ß√µes.

. . . 

A visualiza√ß√£o est√° estreitamente ligada ao que chamamos de **an√°lise explorat√≥ria de dados**.


##

Exemplos de √°reas que fazem uso intensivo de dados s√£o:

- gen√©tica, pesquisa clim√°tica, an√°lise pol√≠tica, an√°lise econ√¥mica, 
- e diversas outras.

. . .

Mas h√° muitos outros usos mesmo para √°reas que n√£o s√£o t√£o _"intensas em dados"_ assim.

- Qualquer empresa que queira tomar decis√µes baseadas em dados pode se beneficiar de visualiza√ß√µes eficazes.

- Participei, por exemplo, de projeto com mineradora brasileira no qual a primeira fase consistia
em uma an√°lise explorat√≥ria de dados.

##

Nosso foco na disciplina n√£o ser√° em Ci√™ncia dos Dados em si, nosso objetivo ser√°:

- Ter uma vis√£o geral sobre as principais **bibliotecas de visualiza√ß√£o de dados** em Python.
- Conhecer alguns dos **tipos de gr√°ficos mais comuns**.
- Tratar alguns exemplos de **gera√ß√£o de dados**.
- E aprender a usar essas bibliotecas **com a ajuda do GitHub Copilot**.

##

Python deve ser a linguagem mais usada em Ci√™ncia de Dados.

. . .

E as bibliotecas mais usadas para visualiza√ß√£o de dados em Python s√£o:

- Matplotlib
- Seaborn
- Pandas
- Plotly

##

Antes de demonstrarmos o uso das bibliotecas, vamos criar uma pasta com um arquivo
`requirements.txt` com as bibliotecas que usaremos e abri-la no VS Code.

. . .

```text
pandas
matplotlib
seaborn
plotly
```

. . .

Lembre-se que para instalar as bibliotecas, voc√™ deve criar um ambiente virtual
e instalar as bibliotecas.

- Voc√™ pode fazer isso manualmente, como mostrei antes, ou...

. . .

```bash
python3 -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows
python -m pip install -r requirements.txt
```

##

Voc√™ pode, em vez de fazer manualmente, usar o VS Code para facilitar o processo.

. . .

Se voc√™ tiver um arquivo `requirements.txt` na raiz do projeto

- e depois acessar a paleta de comandos (Ctrl+Shift+P) e digitar **Python: Create Environment**
- o VS Code cria o ambiente virtual e j√° instala as bibliotecas listadas no arquivo.

# Matplotlib {background-color="#40666e"}

## Matplotlib

- √â a biblioteca **fundamental** para gr√°ficos em Python.  
- Suporta grande variedade de gr√°ficos 2D (linhas, barras, dispers√£o, histogramas).  
- Muito flex√≠vel, mas exige mais c√≥digo para personaliza√ß√µes.  
- √â a **base** de v√°rias outras bibliotecas (como Seaborn e Pandas).  

. . .

```python
# Exemplo simples
import matplotlib.pyplot as plt

plt.plot([1, 2, 3, 4], [10, 20, 25, 30])
plt.title("Exemplo Matplotlib")
plt.show()
```

##

Com o exemplo anterior, seria mostrado o gr√°fico abaixo:

:::: {.columns}
::: {.column width="50%"}
![](imagens/exemplo_matplotlib.png){fig-align="center" fig-alt="Exemplo gr√°fico matplotlib."}
:::

::: {.column width="50%"}
- Note que a primeira lista representa os valores do eixo X e a segunda os do eixo Y.

```{.python code-line-numbers="false"}
plt.plot([1, 2, 3, 4], [10, 20, 25, 30])
```
:::
::::

##

Repare que o gr√°fico √© exibido em uma tela que possui uma barra de ferramentas na parte inferior.

:::: {.columns}
::: {.column width="50%"}
![](imagens/exemplo_matplotlib_tela.png){fig-align="center" fig-alt="Tela do exemplo gr√°fico matplotlib."}
:::

::: {.column width="50%"}
- Com essa barra, podemos salvar o gr√°fico como uma imagem,
- ou interagir com o gr√°fico, fazendo zoom, por exemplo.
- Ou ainda alterando configura√ß√µes como o tamanho e espa√ßamento do gr√°fico.
:::
::::


##

Vamos usar agora, como exemplo, um conjunto de dados simples,
sobre üìä **vendas mensais de tr√™s produtos** 

- Vamos pedir ao Copilot para gerar um gr√°fico de linhas com esses dados,
usando a biblioteca Matplotlib.



| M√™s | Produto A | Produto B | Produto C |
|-----|-----------|-----------|-----------|
| Jan |   150     |   100     |    80     |
| Fev |   200     |   120     |    90     |
| Mar |   250     |   180     |   100     |
| Abr |   300     |   160     |   120     |
| Mai |   280     |   170     |   140     |
| Jun |   320     |   150     |   160     |

##

::: {.callout-caution title="Prompt" icon="false"}
Gere um gr√°fico de linhas usando Matplotlib com os dados abaixo que se referem √†s vendas mensais 
de tr√™s produtos.

```
M√™s	Produto A	Produto B	Produto C
Jan	150	100	80
Fev	200	120	90
Mar	250	180	100
Abr	300	160	120
Mai	280	170	140
Jun	320	150	160
```
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun']
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 170, 150]
produto_c = [80, 90, 100, 120, 140, 160]

plt.plot(meses, produto_a, marker='o', label='Produto A')
plt.plot(meses, produto_b, marker='o', label='Produto B')
plt.plot(meses, produto_c, marker='o', label='Produto C')

plt.title('Vendas Mensais por Produto')
plt.xlabel('M√™s')
plt.ylabel('Vendas')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
```
:::

##  

Note que o Copilot criou uma lista para cada coluna dos dados.

- E o gr√°fico de resultado seria esse:

. . .

:::: {.columns}
::: {.column width="50%"}
![](imagens/matplotlib_vendas.png){fig-align="center" fig-alt="Gr√°fico de vendas mensais usando matplotlib."}
:::

::: {.column width="50%"}

- Avalie o gr√°fico e o c√≥digo gerado pelo Copilot e tente identificar o que cada parte do c√≥digo faz.

- Depois, compare com o c√≥digo e gr√°ficos do primeiro exemplo mostrado.
:::
::::

##

Com o Copilot √© f√°cil alterarmos a forma como o gr√°fico √© gerado.

- Podemos, por exemplo, pedir que use marcadores diferentes para cada produto,
- Ou linhas mais grossas, cores diferentes, etc.

. . .

::: {.callout-caution title="Prompt" icon="false"}
Altere o gr√°fico usando marcadores diferentes para cada produto, linhas mais grossas
e esconda nas linhas de grade.
:::

##

![](imagens/matplotlib_vendas_alterado.png){fig-align="center" fig-alt="Gr√°fico de vendas mensais alterado usando matplotlib."}

##

Dava bastante trabalho üòÆ‚Äçüí® customizar gr√°ficos antes dos Assisentes de IA;

. . .

Agora com o Copilot podemos concentrar 

- [mais]{.alert} aten√ß√£o [no que queremos]{.alert} mostrar ü§ì com o gr√°fico  
- e **menos em como** fazer isso.

# Tipos de Gr√°ficos com Matplotlib {background-color="#40666e"}

## Gr√°fico de Linhas

[Gr√°ficos de linhas]{.alert}, como os que apresentamos, s√£o √∫teis quando precisamos:

- ilustrar tend√™ncias em dados ao longo de um per√≠odo de tempo.

. . .

Geral usamos per√≠odos de tempo no eixo `X` (horizontal).

- e uma ou mais colunas num√©ricas no eixo `Y` (vertical).

## 

Podemos fazer gr√°ficos de linha mais complexos, como quando sobrepomos dados de diferentes escalas.

. . .

![](imagens/matplotlib_linhas_escalas_diferentes.png){fig-align="center" fig-alt="Gr√°fico de temperatura e umidade em diferentes escalas."}

##

O gr√°fico do slide anterior anterior foi gerado com o seguinte c√≥digo:

```python
import matplotlib.pyplot as plt

# Dados de exemplo
dias = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S√°b', 'Dom']
temperatura = [22, 21, 23, 24, 22, 20, 19]
umidade = [60, 65, 58, 55, 62, 70, 75]

fig, ax1 = plt.subplots(figsize=(8, 5))

ax1.plot(dias, temperatura, marker='o', color='tab:red', label='Temperatura (¬∞C)')
ax1.set_xlabel('Dia')
ax1.set_ylabel('Temperatura (¬∞C)', color='tab:red')
ax1.tick_params(axis='y', labelcolor='tab:red')

ax2 = ax1.twinx()
ax2.plot(dias, umidade, marker='s', color='tab:blue', label='Umidade (%)')
ax2.set_ylabel('Umidade (%)', color='tab:blue')
ax2.tick_params(axis='y', labelcolor='tab:blue')

plt.title('Temperatura e Umidade ao longo da semana')
fig.tight_layout()
plt.show()
```

##

Como esse √© um exemplo um pouco mais complexo, vamos pedir ao Copilot para explicar o c√≥digo linha a linha

::: {.callout-caution title="Prompt" icon="false"}
`/explain` Explique o c√≥digo linha a linha.
:::

##

::: {.callout-note title="GitHub Copilot (in√≠cio)" icon="false" .nonincremental}

Vou explicar o c√≥digo Python linha a linha. Este c√≥digo cria um gr√°fico com dois eixos Y para mostrar temperatura e umidade ao longo da semana:

[Linha 1]{.alert}

```python
import matplotlib.pyplot as plt
```
Importa a biblioteca matplotlib.pyplot com o alias `plt`. Esta biblioteca √© usada para criar gr√°ficos e visualiza√ß√µes em Python.

[Linhas 3-6]{.alert}

```python
# Dados de exemplo
dias = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S√°b', 'Dom']
temperatura = [22, 21, 23, 24, 22, 20, 19]
umidade = [60, 65, 58, 55, 62, 70, 75]
```
- **Linha 3**: Coment√°rio indicando que os dados s√£o de exemplo
- **Linha 4**: Cria uma lista com os dias da semana abreviados
- **Linha 5**: Cria uma lista com valores de temperatura em graus Celsius para cada dia
- **Linha 6**: Cria uma lista com valores de umidade em percentual para cada dia
:::

##

::: {.callout-note title="GitHub Copilot (continua√ß√£o)" icon="false" .nonincremental}

[Linha 8]{.alert}

```python
fig, ax1 = plt.subplots(figsize=(8, 5))
```
Cria uma figura (fig) e um eixo principal (ax1) com tamanho de 8x5 polegadas. A fun√ß√£o `subplots()` retorna tanto a figura quanto o(s) eixo(s).

[Linhas 10-13]{.alert}

```python
ax1.plot(dias, temperatura, marker='o', color='tab:red', label='Temperatura (¬∞C)')
ax1.set_xlabel('Dia')
ax1.set_ylabel('Temperatura (¬∞C)', color='tab:red')
ax1.tick_params(axis='y', labelcolor='tab:red')
```
- **Linha 10**: Plota a temperatura no eixo principal com marcadores circulares ('o') em cor vermelha
- **Linha 11**: Define o r√≥tulo do eixo X como 'Dia'
- **Linha 12**: Define o r√≥tulo do eixo Y esquerdo como 'Temperatura (¬∞C)' em cor vermelha
- **Linha 13**: Configura a cor dos n√∫meros do eixo Y esquerdo para vermelho
:::

##

::: {.callout-note title="GitHub Copilot (continua√ß√£o)" icon="false" .nonincremental}

[Linhas 15-18]{.alert}

```python
ax2 = ax1.twinx()
ax2.plot(dias, umidade, marker='s', color='tab:blue', label='Umidade (%)')
ax2.set_ylabel('Umidade (%)', color='tab:blue')
ax2.tick_params(axis='y', labelcolor='tab:blue')
```
- **Linha 15**: Cria um segundo eixo Y (ax2) que compartilha o mesmo eixo X com ax1
- **Linha 16**: Plota a umidade no segundo eixo com marcadores quadrados ('s') em cor azul
- **Linha 17**: Define o r√≥tulo do eixo Y direito como 'Umidade (%)' em cor azul
- **Linha 18**: Configura a cor dos n√∫meros do eixo Y direito para azul

[Linhas 20-23]{.alert}

```python
plt.title('Temperatura e Umidade ao longo da semana')
fig.tight_layout()
plt.show()
```
- **Linha 20**: Define o t√≠tulo do gr√°fico
- **Linha 21**: Ajusta automaticamente o layout para evitar sobreposi√ß√£o de elementos
- **Linha 22**: Linha em branco para melhor legibilidade
- **Linha 23**: Exibe o gr√°fico na tela
:::

##

::: {.callout-note title="GitHub Copilot (continua√ß√£o)" icon="false" .nonincremental}

[Resultado]{.alert}

O c√≥digo gera um gr√°fico que mostra duas linhas:

- Uma linha vermelha com c√≠rculos mostrando a temperatura (eixo Y esquerdo)
- Uma linha azul com quadrados mostrando a umidade (eixo Y direito)

Ambas as linhas compartilham o mesmo eixo X (dias da semana), permitindo comparar facilmente como temperatura e umidade variam ao longo da semana.
:::

##

::: {.callout-tip}
Voc√™ pode estar se perguntando para que pedir explica√ß√µes sobre o c√≥digo ao Copilot,
se basta pedir a ele novamente se precisarmos fazer algo diferente.

Repare que, quanto mais um programador conhece uma biblioteca, melhor uso ele 
consegue fazer dos assistentes de IA.

Claro que n√£o √© necess√°rio entender os detalhes de sintaxe e decorar as fun√ß√µes que 
fazem os gr√°ficos. E dependendo do seu objetivo, talvez nem precise entender nada.

Mas, dependendo do que precisa, pode ser especialmente √∫til saber o que a biblioteca √©
capaz de fazer e entender o suficiente do c√≥digo para que tornar mais f√°cil o processo 
de depura√ß√£o e customiza√ß√£o do c√≥digo gerado.
:::

## Gr√°ficos de Barras

[Gr√°ficos de Barras]{.alert}, tamb√©m conhecidos como **Gr√°ficos de Colunas**, s√£o √∫teis para:

- comparar quantidades entre diferentes categorias.

. . .

Vamos usar o Copilot de maneira ligeiramente diferente que usamos antes.

- Vamos pedir que ele n√£o s√≥ gere o gr√°fico, como tamb√©m totalize os dados mensais antes
  de gerar o gr√°fico.

##

::: {.callout-caution title="Prompt" icon="false"}
Gere um gr√°fico de barras usando Matplotlib mostrando as vendas **totais** de cada produto
a partir da tabela abaixo que cont√©m dados de vendas mensais de tr√™s produtos.

```
M√™s	Produto A	Produto B	Produto C
Jan	150	100	80
Fev	200	120	90
Mar	250	180	100
Abr	300	160	120
Mai	280	170	140
Jun	320	150	160
```
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

# Dados de vendas mensais
meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun']
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 170, 150]
produto_c = [80, 90, 100, 120, 140, 160]

# Calculando vendas totais por produto
total_a = sum(produto_a)
total_b = sum(produto_b)
total_c = sum(produto_c)

produtos = ['Produto A', 'Produto B', 'Produto C']
totais = [total_a, total_b, total_c]

# Criando o gr√°fico de barras
plt.bar(produtos, totais, color=['blue', 'green', 'orange'])
plt.title('Vendas Totais por Produto (Jan-Jun)')
plt.xlabel('Produto')
plt.ylabel('Vendas Totais')
plt.tight_layout()
plt.show()
```
:::

##

Esse √© o gr√°fico gerado:

:::: {.columns}
::: {.column width="50%"}
![](imagens/matplotlib_vendas_totais.png){fig-align="center" fig-alt="Gr√°fico de vendas totais por produto usando matplotlib."}
:::

::: {.column width="50%"}
- Veja que, no c√≥digo, foi usado o m√©todo `bar` em vez do m√©todo `plot`.
- Ele recebe como primeiro argumento uma lista com os nomes das categorias (produtos)
- e como segundo argumento uma lista com os valores num√©ricos (vendas totais).
:::
::::

##

Vamos ver outras melhorias de visualiza√ß√£o que podemos fazer com a ajuda do Copilot.

- Podemos, por exemplo, pedir que o gr√°fico seja gerado na horizontal,
- ou que as barras sejam exibidas com cores diferentes.

. . .

::: {.callout-caution title="Prompt" icon="false"}
Altere o gr√°fico para que as barras sejam exibidas na horizontal, e os valores de 
cada barra sejam exibidos dentro da pr√≥pria barra. Use uma paleta de cores.
Tamb√©m altere o t√≠tulo do eixo X para Produtos e mude a cor do T√≠tulo e dos nomes dos
eixos para azul escuro.
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

# Dados de vendas mensais
meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun']
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 170, 150]
produto_c = [80, 90, 100, 120, 140, 160]

# Calculando vendas totais por produto
total_a = sum(produto_a)
total_b = sum(produto_b)
total_c = sum(produto_c)

produtos = ['Produto A', 'Produto B', 'Produto C']
totais = [total_a, total_b, total_c]

# Paleta de cores
colors = plt.cm.Set2.colors[:3]

# Criando o gr√°fico de barras horizontais
bars = plt.barh(produtos, totais, color=colors)
plt.title('Vendas Totais por Produto (Jan-Jun)', color='#003366')
plt.xlabel('Vendas Totais', color='#003366')
plt.ylabel('Produtos', color='#003366')

# Adicionando os valores dentro das barras
for bar in bars:
    width = bar.get_width()
    plt.text(width / 2, bar.get_y() + bar.get_height() / 2,
             str(width),
             ha='center', va='center', color='white', fontsize=10, fontweight='bold')

plt.tight_layout()
plt.show()
```
:::

##

![](imagens/matplotlib_vendas_totais_alterado.png){fig-align="center" fig-alt="Gr√°fico de vendas totais por produto alterado, usando Matplolib."}

. . .

Voc√™ pode notar pelo c√≥digo gerado, que a Matplotlib √© uma biblioteca bastante flex√≠vel,
mas que pode exigir bastante c√≥digo para fazer gr√°ficos como queremos.

## Gr√°ficos de Pizza

[Gr√°ficos de Pizza]{.alert} s√£o √∫teis para:

- mostrar propor√ß√µes de cada categoria em rela√ß√£o ao total,
- geralmente expressas em porcentagens.

. . .

Vamos pedir ao Copilot para mostrar as vendas totais de cada produto em um gr√°fico de pizza.

- E, em seguida, entender que diferen√ßa faz mostrar esses dados em gr√°ficos de barras ou de pizza.

##

::: {.callout-caution title="Prompt" icon="false"}
Gere um gr√°fico de **pizza** usando Matplotlib mostrando as vendas totais de cada produto
a partir da tabela abaixo que cont√©m dados de vendas mensais de tr√™s produtos.

```
M√™s	Produto A	Produto B	Produto C
Jan	150	100	80
Fev	200	120	90
Mar	250	180	100
Abr	300	160	120
Mai	280	170	140
Jun	320	150	160
```
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

# Dados de vendas mensais
produtos = ['Produto A', 'Produto B', 'Produto C']
vendas = [
    [150, 200, 250, 300, 280, 320],  # Produto A
    [100, 120, 180, 160, 170, 150],  # Produto B
    [80, 90, 100, 120, 140, 160]     # Produto C
]

# Soma das vendas de cada produto
vendas_totais = [sum(v) for v in vendas]

# Gr√°fico de pizza
plt.figure(figsize=(6, 6))
plt.pie(vendas_totais, labels=produtos, autopct='%1.1f%%', startangle=90)
plt.title('Vendas Totais por Produto')
plt.axis('equal')
plt.show()
```
:::

##

Esse √© o gr√°fico gerado:

![](imagens/matplotlib_vendas_totais_pizza.png){fig-align="center" fig-alt="Gr√°fico de vendas totais por produto em gr√°fico de pizza usando Matplolib."}

## 

Em que situa√ß√µes voc√™ preferiria usar o **gr√°fico de barras** ou o **gr√°fico de pizza**?

:::: {.columns}
::: {.column width="50%"}
![](imagens/matplotlib_vendas_totais.png){fig-align="center" fig-alt="Gr√°fico de vendas totais por produto usando matplotlib."}
:::

::: {.column width="50%"}
![](imagens/matplotlib_vendas_totais_pizza.png){fig-align="center" fig-alt="Gr√°fico de vendas totais por produto em gr√°fico de pizza usando Matplolib."}
:::
::::

## 

Repare que **gr√°ficos de barra** s√£o mais eficazes para comparar valores absolutos entre categorias.

- Eles facilitam a visualiza√ß√£o de diferen√ßas entre os valores.
- No nosso caso, conseguimos ver facilmente que o Produto A teve vendas muito maiores que os outros.

. . .

J√° **gr√°ficos de pizza** s√£o mais √∫teis para comparar as propor√ß√µes em rela√ß√£o ao total.

- Eles ajudam a entender a participa√ß√£o de cada categoria.
- No nosso caso, conseguimos ver facilmente que o Produto A representa quase metade das vendas totais.


## Histogramas

Os [histogramas]{.alert} s√£o √∫teis para:

- mostrar distribui√ß√µes de frequ√™ncia,
- ou seja, quantas vezes cada valor ou intervalo de valores ocorre em um conjunto de dados. 

. . .

Cada valor (ou intervalo) √© representado por uma barra vertical, cuja altura corresponde 
√† frequ√™ncia daquele valor.

##

Suponha, por exemplo, que um professor queira analisar as notas de uma turma.

- Ele pode usar um histograma para visualizar a distribui√ß√£o das notas.

. . .

::: {.callout-caution title="Prompt" icon="false"}
```python
import matplotlib.pyplot as plt

notas = [91, 92, 60, 82, 94, 54, 83, 81, 74, 91, 75, 70, 81, 48, 0, 82, 90, 65, 88, 89, 56, 51, 64, 63, 60, 61, 80, 66, 65, 79, 49, 71, 44, 72, 78, 60, 55, 53, 87, 80, 63, 60, 66, 61, 75, 48, 87, 53, 63, 39, 74, 27, 61]

# gerar um histograma com as notas, considerando intervalos de 10 em 10
```
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

notas = [91, 92, 60, 82, 94, 54, 83, 81, 74, 91, 75, 70, 81, 48, 0, 82, 90, 65, 88, 89, 56, 51, 64, 63, 60, 61, 80, 66, 65, 79, 49, 71, 44, 72, 78, 60, 55, 53, 87, 80, 63, 60, 66, 61, 75, 48, 87, 53, 63, 39, 74, 27, 61]

# gerar um histograma com as notas, considerando intervalos de 10 em 10
plt.hist(notas, bins=range(0, 101, 10), edgecolor='black', alpha=0.7)
plt.title('Distribui√ß√£o de Notas')
plt.xlabel('Notas')
plt.ylabel('N√∫mero de Alunos')
plt.xticks(range(0, 101, 10))
plt.grid(axis='y', alpha=0.75)
plt.show()
```
:::

##

![](imagens/matplotlib_histograma_notas.png){fig-align="center" fig-alt="Histograma de notas usando Matplolib."}

. . .

Analisando o histograma podemos ver que 15 alunos ficaram com nota entre 60 e 70.

- E que a maioria das notas est√° entre 60 e 90.

## Gr√°ficos de Dispers√£o

Os [gr√°ficos de dispers√£o]{.alert} s√£o √∫teis para:

- mostrar a rela√ß√£o entre duas (ou mais) vari√°veis num√©ricas.
- Cada ponto do gr√°fico tem o valor de uma vari√°vel no eixo X e o valor da outra vari√°vel no eixo Y.

. . .

Suponha, por exemplo, que um professor queira analisar a rela√ß√£o entre a presen√ßa nas aulas e as notas dos alunos.

- Ele pode usar um gr√°fico de dispers√£o para visualizar essa rela√ß√£o.

##

::: {.callout-caution title="Prompt" icon="false"}
```python
import matplotlib.pyplot as plt

notas = [91, 79, 39, 62, 96, 84, 82, 24, 69, 15, 50, 38, 64, 30, 62, 76, 57, 58, 75, 72, 63, 74, 47, 72, 60, 79, 67, 70, 24, 59, 75, 60, 58, 14, 42, 89, 83, 47, 79, 46, 48, 91, 63, 83, 74, 90, 92]
faltas = [12, 28, 6, 16, 4, 12, 4, 32, 12, 12, 14, 14, 16, 16, 12, 8, 16, 2, 10, 54, 4, 54, 0, 16, 10, 8, 10, 8, 14, 16, 2, 12, 12, 22, 20, 2, 4, 18, 20, 6, 4, 4, 10, 2, 20, 12, 4]

# gerar um gr√°fico de dispers√£o relacionando notas e faltas
```
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

notas = [91, 79, 39, 62, 96, 84, 82, 24, 69, 15, 50, 38, 64, 30, 62, 76, 57, 58, 75, 72, 63, 74, 47, 72, 60, 79, 67, 70, 24, 59, 75, 60, 58, 14, 42, 89, 83, 47, 79, 46, 48, 91, 63, 83, 74, 90, 92]
faltas = [12, 28, 6, 16, 4, 12, 4, 32, 12, 12, 14, 14, 16, 16, 12, 8, 16, 2, 10, 54, 4, 54, 0, 16, 10, 8, 10, 8, 14, 16, 2, 12, 12, 22, 20, 2, 4, 18, 20, 6, 4, 4, 10, 2, 20, 12, 4]

# gerar um gr√°fico de dispers√£o relacionando notas e faltas
plt.figure(figsize=(10, 6))
plt.scatter(faltas, notas, color='blue', alpha=0.6)
plt.title('Rela√ß√£o entre Notas e Faltas')
plt.xlabel('N√∫mero de Faltas')
plt.ylabel('Notas')
plt.xlim(0, max(faltas) + 5)
plt.ylim(0, 100)
plt.grid(True)
plt.axhline(y=60, color='r', linestyle='--', label='Nota de Corte')
plt.legend()
plt.show()
```
:::

##

![](imagens/matplotlib_dispersao_notas_faltas.png){fig-align="center" fig-alt="Gr√°fico de dispers√£o relacionando notas e faltas usando Matplolib."}

##

Esse gr√°ficos traz algumas quest√µes interessantes.

1. O Copilot adicionou, por conta pr√≥pria, uma linha horizontal indicando a nota de corte (60).

- J√° que ele fez isso, seria interessante destacar tamb√©m o limite de faltas para reprova√ß√£o.
- Que inclusive, depende se a nota √© 60 ou 70. 

##

2. Aƒ∫√©m disso, tem dois pontos no gr√°fico bem estranhos.

- Alunos que faltaram em quase todas as aulas e ainda assim passaram. O que poderia ser?
- S√£o alunos de matr√≠cula especial (turma Z).
- Esses dados deveriam exclu√≠dos (limpeza de dados) ou destacados de alguma forma no gr√°fico.

##

Vamos ent√£o alterar o gr√°fico:

- removendo os alunos de turma Z.
- destacando o limite de faltas/notas para reprova√ß√£o.

. . . 

::: {.callout-caution title="Prompt" icon="false"}
Altere o gr√°fico acrescentando uma nova linha de corte para a nota: 70 (em azul).
E linhas de corte tamb√©m para as faltas: 17 (em vermelho) e 23 (em azul).
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

notas = [91, 79, 39, 62, 96, 84, 82, 24, 69, 15, 50, 38, 64, 30, 62, 76, 57, 58, 75, 63, 47, 72, 60, 79, 67, 70, 24, 59, 75, 60, 58, 14, 42, 89, 83, 47, 79, 46, 48, 91, 63, 83, 74, 90, 92]
faltas = [12, 28, 6, 16, 4, 12, 4, 32, 12, 12, 14, 14, 16, 16, 12, 8, 16, 2, 10, 4, 0, 16, 10, 8, 10, 8, 14, 16, 2, 12, 12, 22, 20, 2, 4, 18, 20, 6, 4, 4, 10, 2, 20, 12, 4]

plt.figure(figsize=(10, 6))
plt.scatter(faltas, notas, color='blue', alpha=0.6)
plt.title('Rela√ß√£o entre Notas e Faltas')
plt.xlabel('N√∫mero de Faltas')
plt.ylabel('Notas')
plt.xlim(0, max(faltas) + 5)
plt.ylim(0, 100)
plt.grid(True)

# Linhas horizontais de corte para notas
plt.axhline(y=60, color='r', linestyle='--', label='Nota de Corte 60')
plt.axhline(y=70, color='blue', linestyle='--', label='Nota de Corte 70')

# Linhas verticais de corte para faltas
plt.axvline(x=17, color='r', linestyle='-.', label='Faltas Corte 17')
plt.axvline(x=23, color='blue', linestyle='-.', label='Faltas Corte 23')

plt.legend()
plt.show()
```
:::

##

![](imagens/matplotlib_dispersao_notas_faltas_alterado.png){fig-align="center" fig-alt="Gr√°fico de dispers√£o relacionando notas e faltas alterado, usando Matplolib."}

## Outros tipos de gr√°ficos e funcionalidades do Matplotlib

Como j√° citado anteriormente, o Copilot nos permite manter foco no que queremos,

- em vez de preocuparmos sobre detalhes sobre como isso pode ser feito.

. . .

Por isso, √© interessante ter uma ideia do que √© poss√≠vel fazer com as bibliotecas de visualiza√ß√£o
como o Matplotlib.

- Voc√™ pode explorar isso com o pr√≥prio Copilot.
- Ou pode consultar a documenta√ß√£o oficial da biblioteca.

##

Uma funcionalidade interessante da Matplotlib, por exemplo, √© a possibilidade de criar v√°rios subgr√°ficos 
em uma √∫nica figura.

. . .

![](imagens/matplotlib_exemplo_doutorado.png){fig-align="center" fig-alt="Exemplo de v√°rios gr√°ficos em uma √∫nica figura usando Matplolib."}

##

Criei a figura do slide anterior para a minha tese de doutorado.

- Al√©m de mostrar o uso de v√°rios gr√°ficos em uma √∫nica figura,
- ela tamb√©m mostra que √© poss√≠vel usar preenchimento de √°rea em gr√°ficos de linha.

. . .

Pena que n√£o existia Copilot üò¢üò¢ durante o meu doutorado.

##

Outra funcionalidade interessante do Matplotlib s√£o seus estilos predefinidos.

- Cada estilo tem uma variedade de configura√ß√µes padr√µes para cores de fundo,
   linhas da grade, espessura de linha, fontes, etc.
- Assim podemos tornar nossas visualiza√ß√µes mais elegantes, sem precisar fazer muitas customiza√ß√µes.

. . .

Para demonstrar essas funcionalidades, vamos pedir ao Copilot para gerar o gr√°fico
de linhas de vendas, mas com diferentes estilos.

##

::: {.callout-caution title="Prompt" icon="false"}
Os dados abaixo que se referem √†s vendas mensais de tr√™s produtos.
Gostaria de ver, em uma √∫nica figura, v√°rios gr√°ficos de linha com estilos diferentes
usando Matplotlib.

```
M√™s	Produto A	Produto B	Produto C
Jan	150	100	80
Fev	200	120	90
Mar	250	180	100
Abr	300	160	120
Mai	280	170	140
Jun	320	150	160
```
:::

##

N√£o era o bem o que eu queria.

![](imagens/matplotlib_vendas_linhas_dif_estilos.png){fig-align="center" fig-alt="Gr√°fico de vendas mensais com linhas de diferentes estilos usando Matplolib."}

##

Pelo c√≥digo vemos que o Copilot entendeu que quer√≠amos diferentes estilos de linha para cada produto.

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

# Dados
meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun']
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 170, 150]
produto_c = [80, 90, 100, 120, 140, 160]

plt.figure(figsize=(10, 6))

# Gr√°ficos de linha com estilos diferentes
plt.plot(meses, produto_a, label='Produto A', color='blue', linestyle='-', marker='o')
plt.plot(meses, produto_b, label='Produto B', color='green', linestyle='--', marker='s')
plt.plot(meses, produto_c, label='Produto C', color='red', linestyle='-.', marker='^')

plt.title('Vendas Mensais por Produto')
plt.xlabel('M√™s')
plt.ylabel('Quantidade Vendida')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
```
:::

##

Vamos ent√£o fazer um pouco de **Engenharia de Prompt** para tentar obter o que queremos.

::: {.callout-caution title="Prompt" icon="false"}
Os dados abaixo que se referem √†s vendas mensais de tr√™s produtos.
Gostaria de experimentar diferentes estilos padr√µes dispon√≠veis na biblioteca matplotlib.
Para isso, gostaria que gerasse v√°rios subgr√°ficos em uma √∫nica figura, de forma que
cada subgr√°fico usasse um estilo diferente da biblioteca.

```
M√™s	Produto A	Produto B	Produto C
Jan	150	100	80
Fev	200	120	90
Mar	250	180	100
Abr	300	160	120
Mai	280	170	140
Jun	320	150	160
```
:::

##

![](imagens/matplotlib_vendas_sugraficos_dif_estilos.png){fig-align="center" fig-alt="Gr√°fico de vendas mensais com linhas de diferentes estilos usando Matplolib."}

Pelo menos agora foram gerados subgr√°ficos.

- Mas o resultado ainda me pareceu decepcionante.

##

No c√≥digo, vemos que foi usada uma lista de estilos predefinidos do Matplotlib.

- E foi gerado um subgr√°fico usando cada estilo.

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

# Dados
meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun']
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 170, 150]
produto_c = [80, 90, 100, 120, 140, 160]

# Seleciona alguns estilos dispon√≠veis
estilos = ['default', 'ggplot', 'seaborn-v0_8', 'bmh', 'classic', 'Solarize_Light2']

fig, axs = plt.subplots(2, 3, figsize=(18, 8))
axs = axs.flatten()

for i, estilo in enumerate(estilos):
    plt.style.use(estilo)
    ax = axs[i]
    ax.plot(meses, produto_a, marker='o', label='Produto A')
    ax.plot(meses, produto_b, marker='s', label='Produto B')
    ax.plot(meses, produto_c, marker='^', label='Produto C')
    ax.set_title(f'Estilo: {estilo}')
    ax.set_xlabel('M√™s')
    ax.set_ylabel('Vendas')
    ax.legend()

plt.tight_layout()
plt.show()
```
:::

##

Durante a prepara√ß√£o do material, a minha hip√≥tese foi de que misturar diferentes
estilos em uma mesma figura pode n√£o funcionar muito bem.

. . .

Pedi ent√£o ao Copilot para alterar o c√≥digo

::: {.callout-caution title="Prompt" icon="false"}
Altere o c√≥digo de forma que cada estilo seja usado em uma figura separada, em vez de se utilizar subgr√°ficos.
:::

##

:::: {.columns}
::: {.column width="33%"}
![](imagens/matplotlib_vendas_sugraficos_estilo_default.png){fig-align="center" fig-alt="Estilo default"}
![](imagens/matplotlib_vendas_sugraficos_estilo_ggplot.png){fig-align="center" fig-alt="Estilo ggplot"}
:::
::: {.column width="33%"}
![](imagens/matplotlib_vendas_sugraficos_estilo_seaborn.png){fig-align="center" fig-alt="Estilo seaborn"}
![](imagens/matplotlib_vendas_sugraficos_estilo_bmh.png){fig-align="center" fig-alt="Estilo bmh"}
:::
::: {.column width="33%"}
![](imagens/matplotlib_vendas_sugraficos_estilo_classic.png){fig-align="center" fig-alt="Estilo classic"}
![](imagens/matplotlib_vendas_sugraficos_estilo_solarize.png){fig-align="center" fig-alt="Estilo solarize"}
:::
::::

##

- Veja que o m√©todo `plt.show()` √© chamado separadamente para cada estilo.

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

# Dados
meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun']
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 170, 150]
produto_c = [80, 90, 100, 120, 140, 160]

# Seleciona alguns estilos dispon√≠veis
estilos = ['default', 'ggplot', 'seaborn-v0_8', 'bmh', 'classic', 'Solarize_Light2']

for estilo in estilos:
    plt.style.use(estilo)
    fig, ax = plt.subplots(figsize=(8, 5))
    ax.plot(meses, produto_a, marker='o', label='Produto A')
    ax.plot(meses, produto_b, marker='s', label='Produto B')
    ax.plot(meses, produto_c, marker='^', label='Produto C')
    ax.set_title(f'Estilo: {estilo}')
    ax.set_xlabel('M√™s')
    ax.set_ylabel('Vendas')
    ax.legend()
    plt.tight_layout()
    plt.show()
```
:::

##

Pelo coment√°rio no c√≥digo gerado, vemos que o Copilot selecionou apenas alguns dos estilos dispon√≠veis.

. . .

Perguntei a ele ent√£o como saber quais estilos est√£o dispon√≠veis.

- Ele gerou a linha de c√≥digo abaixo.

. . .

```python
print(plt.style.available)
```

. . .

Que trouxe o seguinte resultado:

```python
['Solarize_Light2', '_classic_test_patch', '_mpl-gallery', '_mpl-gallery-nogrid', 
 'bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 
 'grayscale', 'petroff10', 'seaborn-v0_8', 'seaborn-v0_8-bright', 'seaborn-v0_8-colorblind', 
 'seaborn-v0_8-dark', 'seaborn-v0_8-dark-palette', 'seaborn-v0_8-darkgrid', 'seaborn-v0_8-deep', 
 'seaborn-v0_8-muted', 'seaborn-v0_8-notebook', 'seaborn-v0_8-paper', 'seaborn-v0_8-pastel', 
 'seaborn-v0_8-poster', 'seaborn-v0_8-talk', 'seaborn-v0_8-ticks', 'seaborn-v0_8-white', 
 'seaborn-v0_8-whitegrid', 'tableau-colorblind10']
```

## 

N√≥s tamb√©m podemos salvar os gr√°ficos gerados em arquivos de imagem, via c√≥digo.

- O Copilot pode nos ajudar com isso tamb√©m.

. . .

::: {.callout-caution title="Prompt" icon="false"}
Altere o c√≥digo para que cada gr√°fico seja salvo em um arquivo PNG, em vez de ser
exibido na tela.
:::


##

```python
import matplotlib.pyplot as plt

# Dados
meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun']
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 170, 150]
produto_c = [80, 90, 100, 120, 140, 160]

# Seleciona alguns estilos dispon√≠veis
estilos = ['default', 'ggplot', 'seaborn-v0_8', 'bmh', 'classic', 'Solarize_Light2']

for estilo in estilos:
    plt.style.use(estilo)
    fig, ax = plt.subplots(figsize=(8, 5))
    ax.plot(meses, produto_a, marker='o', label='Produto A')
    ax.plot(meses, produto_b, marker='s', label='Produto B')
    ax.plot(meses, produto_c, marker='^', label='Produto C')
    ax.set_title(f'Estilo: {estilo}')
    ax.set_xlabel('M√™s')
    ax.set_ylabel('Vendas')
    ax.legend()
    plt.tight_layout()
    # Salva o gr√°fico em um arquivo PNG
    fig.savefig(f'grafico_{estilo}.png')
    plt.close(fig)
```

##

Voc√™ pode conhecer o que a biblioteca Matplotlib √© capaz de fazer consultando a documenta√ß√£o oficial.

- Veja, por exemplo, os [tipos de gr√°ficos dispon√≠veis](https://matplotlib.org/stable/plot_types/index.html#plot-types).
- E a [galeria de exemplos](https://matplotlib.org/stable/gallery/index.html).

# Gera√ß√£o de dados {background-color="#40666e"}

##

Os exemplos que vimos at√© agora geraram visualiza√ß√µes para dados que j√° t√≠nhamos.

- Mas h√° situa√ß√µes nas quais nossos pr√≥prios programas podem gerar os dados que precisamos.

. . .

Veremos a seguir dois exemplos simples dessa ideia.

## Exemplo 1: N√∫meros quadrados

Vamos come√ßar mostrar um gr√°fico simples dos n√∫meros quadrados de 1 a 1000.

. . .

::: {.callout-caution title="Prompt" icon="false"}
Gere um gr√°fico de dispers√£o usando Matplotlib mostrando os n√∫meros quadrados de 1 a 1000.
Use o estilo seaborn.
:::

##

![](imagens/matplotlib_numeros_quadrados.png){fig-align="center" fig-alt="Gr√°fico de dispers√£o dos n√∫meros quadrados de 1 a 1000 usando Matplolib."}

## 

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import numpy as np

import matplotlib.pyplot as plt

plt.style.use('seaborn-v0_8')

x = np.arange(1, 1001)
y = x ** 2

plt.scatter(x, y)
plt.title('N√∫meros Quadrados de 1 a 1000')
plt.xlabel('N√∫mero')
plt.ylabel('Quadrado')
plt.show()
```
:::

Vemos que o c√≥digo gerado usa a biblioteca `NumPy`.

- Vamos conhecer mais sobre ela com a ajuda do Copilot.

## 

::: {.callout-caution title="Prompt" icon="false"}
D√™ uma vis√£o geral sobre a biblioteca Numpy e explique o uso dela nesse exemplo.
:::

. . .

::: {.callout-note title="GitHub Copilot (in√≠cio)" icon="false" .nonincremental}
A biblioteca **NumPy** (Numerical Python) √© uma das principais bibliotecas para computa√ß√£o num√©rica em Python. Ela fornece suporte para arrays multidimensionais e fun√ß√µes matem√°ticas eficientes, sendo amplamente utilizada em ci√™ncia de dados, machine learning e processamento de imagens.

[Principais caracter√≠sticas do NumPy]{.alert}:

- **Arrays eficientes:** Estruturas de dados otimizadas para opera√ß√µes matem√°ticas r√°pidas.
- **Fun√ß√µes matem√°ticas:** Grande variedade de fun√ß√µes para √°lgebra linear, estat√≠stica, transformadas, etc.
- **Integra√ß√£o:** Compat√≠vel com outras bibliotecas como Pandas, Matplotlib e SciPy.
:::

##

::: {.callout-note title="GitHub Copilot (continua√ß√£o)" icon="false" .nonincremental}

[Uso do NumPy no exemplo (app.py)]{.alert}:

No seu c√≥digo, o NumPy √© utilizado para criar um array de n√∫meros inteiros de 1 a 1000:

```python
x = np.arange(1, 1001)
```

- **`np.arange(1, 1001)`**: Gera um array NumPy com valores de 1 at√© 1000 (inclusive).
- Em seguida, o array `x` √© elevado ao quadrado para criar o array `y`:
  
  ```python
  y = x ** 2
  ```

- O uso do NumPy permite que essas opera√ß√µes sejam feitas de forma vetorizada, ou seja, sem a necessidade de loops expl√≠citos, tornando o c√≥digo mais simples e eficiente.

Resumindo: **NumPy** facilita a cria√ß√£o e manipula√ß√£o de grandes conjuntos de dados num√©ricos, como no exemplo onde gera rapidamente os n√∫meros e seus quadrados para visualiza√ß√£o.
:::

##

Vamos aproveitar esse exemplo para mostrar outra funcionalidade do Matplotlib: [`Color Maps`]{.alert}.

- (ou mapas de cores) s√£o gradientes de cores usados para representar valores num√©ricos em gr√°ficos.
- O gradiente varia de uma cor inicial a uma cor final.
- Eles ajudam a visualizar a densidade ou intensidade dos dados.

. . .

Podemos, por exemplo, usar cores claras para valores baixos e cores escuras para valores altos.

##

Vamos demonstrar o uso de `Color Maps` no gr√°fico dos n√∫meros quadrados.

::: {.callout-caution title="Prompt" icon="false"}
Altere o gr√°fico de dispers√£o dos n√∫meros quadrados de 1 a 1000 para
usar um mapa de cores (Color Map) que v√° do azul claro (valores baixos) ao azul escuro (valores altos).
:::

##

![](imagens/matplotlib_numeros_quadrados_colormap.png){fig-align="center" fig-alt="Gr√°fico de dispers√£o dos n√∫meros quadrados de 1 a 1000 usando Matplolib com Color Map."}

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import numpy as np
import matplotlib.pyplot as plt

plt.style.use('seaborn-v0_8')

x = np.arange(1, 1001)
y = x ** 2

# Usando o colormap 'Blues' para ir do azul claro ao azul escuro
plt.scatter(x, y, c=y, cmap='Blues')
plt.title('N√∫meros Quadrados de 1 a 1000')
plt.xlabel('N√∫mero')
plt.ylabel('Quadrado')
plt.colorbar(label='Quadrado')  # Adiciona a barra de cores
plt.show()
```
:::

##

Um uso mais interessante de Color Maps √© em gr√°ficos de dispers√£o com muitas observa√ß√µes.

- Podemos usar a densidade de pontos para definir as cores.
- Assim, regi√µes com muitos pontos ficam mais escuras, e regi√µes com poucos pontos ficam mais claras.

. . .

Outra possibilidade √© usar Color Maps para representar uma terceira vari√°vel em gr√°ficos de dispers√£o 2D.

- Nesse caso, cada ponto do gr√°fico tem uma cor que representa o valor dessa terceira vari√°vel.

##

Vamos ver um exemplo disso, usando um [arquivo Excel](dados/municipios-mg.xlsx) com dados de munic√≠pios de Minas Gerais, obtidos do IBGE.

. . .

::: {.callout-caution title="Prompt" icon="false"}
O arquivo municipios-mg.xlsx possui dados sobre os munic√≠pios de Minas Gerais. A terceira linha possui a identifica√ß√£o das colunas e os dados v√™m a partir da quarta linha. Gostaria que o gr√°fico inclu√≠sse apenas os 40 munic√≠pios mais populosos.

Gostaria de gerar um gr√°fico de dispers√£o que mostrasse no eixo X o PIB per capita (coluna N) , no eixo Y a popula√ß√£o (coluna F) e como mapa de cores o IDH (coluna J). Gostaria que o nome do munic√≠pio fosse exibido (coluna A).
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import pandas as pd
import matplotlib.pyplot as plt

# Carregar o arquivo Excel, pulando as duas primeiras linhas (header na linha 2)
df = pd.read_excel('municipios-mg.xlsx', header=2)

# Selecionar apenas as colunas necess√°rias usando √≠ndices
# Supondo que as colunas estejam assim:
# Coluna F (√≠ndice 5): Popula√ß√£o
# Coluna J (√≠ndice 9): IDH
# Coluna N (√≠ndice 13): PIB per capita
# Coluna B (√≠ndice 0): Nome do munic√≠pio

df = df.iloc[:, [0, 5, 9, 13]]

# Renomear as colunas para facilitar
df.columns = ['municipio', 'populacao', 'idh', 'pib_per_capita']

# Selecionar os 40 munic√≠pios mais populosos
df_top40 = df.sort_values(by='populacao', ascending=False).head(40)

# Plotar o gr√°fico de dispers√£o
plt.figure(figsize=(12, 8))
scatter = plt.scatter(
    df_top40['pib_per_capita'],
    df_top40['populacao'],
    c=df_top40['idh'],
    cmap='viridis',
    s=100,
    alpha=0.7
)
plt.colorbar(scatter, label='IDH')
plt.xlabel('PIB per capita')
plt.ylabel('Popula√ß√£o')
plt.title('40 munic√≠pios mais populosos de MG: PIB per capita x Popula√ß√£o (cores = IDH)')

# Adicionar o nome dos munic√≠pios
for i, row in df_top40.iterrows():
    plt.text(row['pib_per_capita'], row['populacao'], row['municipio'], fontsize=8, alpha=0.7)

plt.tight_layout()
plt.show()
```
:::

##

Ao tentar executar o c√≥digo gerado pela primeira vez, obtive o seguinte erro:

```bash
  File "/home/julio/Downloads/aula_t7/.venv/lib/python3.11/site-packages/pandas/compat/_optional.py", line 138, in import_optional_dependency
    raise ImportError(msg)
ImportError: Missing optional dependency 'openpyxl'.  Use pip or conda to install openpyxl.
```

. . .

O c√≥digo gerado usa a biblioteca `Pandas` para ler o arquivo Excel.

- E ela depende uma biblioteca externa chamada `openpyxl`.

##

Como n√≥s hav√≠amos criado um arquivo `requirements.txt` para o projeto,

- basta incluirmos uma linha com o nome da biblioteca que queremos instalar.
- E depois rodarmos o comando `pip install -r requirements.txt` para instalar todas as depend√™ncias do projeto.
  - N√£o esque√ßa de rodar com o ambiente virtual ativado.

##

![](imagens/matplotlib_dados_municipios.png){fig-align="center" fig-alt="Gr√°fico de dispers√£o dos munic√≠pios mais populosos de Minas Gerais, mostrando PIB per capita, popula√ß√£o e IDH usando Matplolib."}

##

√â melhor analisar esse gr√°fico pela tela do programa.

. . .

E, mais adiante, conheceremos melhor a biblioteca `Pandas` com mais detalhes.

## Exemplo 2: Passeios aleat√≥rios

Vamos ver outro exemplo simples de gera√ß√£o de dados: [Passeios Aleat√≥rios]{.alert}.

- Vamos usar o Python para gerar dados a partir de um passeio aleat√≥rio.
- E depois usar a Matplotlib para criar uma representa√ß√£o visual desse passeio.

. . .

Um **passeio aleat√≥rio** √© um caminho determinado por uma s√©rie de decis√µes simples,
tomadas inteiramente ao acaso.

##

Um passeio aleat√≥rio pode ser, por exemplo:

- O caminho de que uma formiga confusa tomaria se desse cada passo em uma dire√ß√£o aleat√≥ria.

. . .

Esses passeios t√™m usos pr√°ticos na natureza, na f√≠sica, biologia, qu√≠mica e economia.

- Um gr√£o de p√≥len, por ex., flutua sobre uma gota de √°gua que se move de um lado por outro 
  devido ao movimento das mol√©culas de √°gua,
- e o movimento molecular da √°gua √© aleat√≥rio,
- fazendo com que o caminho percorrido pelo gr√£o de p√≥len seja um passeio aleat√≥rio.

##

Portanto, o c√≥digo abaixo modela muitas situa√ß√µes do mundo cotidiano.

```python
from random import choice

def gerar_passeio_aleatorio(num_pontos):
    # passeios come√ßam na coordenada (0,0)
    valores_x = [0]
    valores_y = [0]

    while len(valores_x) < num_pontos:
        
        # Decide qual dire√ß√£o toma, e at√© onde ir
        direcao_x = choice([1,-1])
        distancia_x = choice([0,1,2,3,4])
        passo_x = direcao_x * distancia_x

        direcao_y = choice([1,-1])
        distancia_y = choice([0,1,2,3,4])
        passo_y = direcao_y * distancia_y

        # Rejeita movimentos que n√£o v√£o a lugar algum
        if passo_x == 0 and passo_y == 0:
            continue

        # Calcula a nova posi√ß√£o
        x = valores_x[-1] + passo_x
        y = valores_y[-1] + passo_y

        valores_x.append(x)
        valores_y.append(y)

    return valores_x, valores_y
```

##

::: {.callout-caution title="Prompt" icon="false"}
```python
# Gera um gr√°fico de dispers√£o usando a biblioteca matplotlib
# de um passeio aleat√≥rio de 5000 pontos.
# Use pontos de tamanho 15.
# Mantenha os eixos x e y com a mesma escala
```
:::

##

```python
if __name__ == '__main__':
    import matplotlib.pyplot as plt

    x, y = gerar_passeio_aleatorio(5000)

    plt.figure(figsize=(10,6))
    plt.scatter(x, y, s=15)
    plt.title('Passeio Aleat√≥rio em 2D')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.grid(True)
    plt.axis('equal')
    plt.show()
```

##

Vamos usar mapas de cores para destacar o in√≠cio e o fim do passeio.

- E tamb√©m destacar o ponto inicial na cor verde e final na cor vermelha.

. . .

::: {.callout-caution title="Prompt" icon="false"}
Altere  o gr√°fico do passeio aleat√≥rio para usar um mapa de cores que v√° do azul claro (in√≠cio do passeio) ao azul escuro (fim do passeio).
Al√©m disso, destaque o ponto inicial na cor verde e o ponto final na cor vermelha (ambos com tamanho 100).
:::

##

```python
if __name__ == '__main__':    
    x, y = gerar_passeio_aleatorio(5000)

    pontos = np.arange(len(x))
    cmap = cm.get_cmap('Blues')

    plt.figure(figsize=(10,6))
    plt.scatter(x, y, c=pontos, cmap=cmap, s=15)
    # Destaca o ponto inicial em verde
    plt.scatter(x[0], y[0], c='green', s=100, label='In√≠cio')
    # Destaca o ponto final em vermelho
    plt.scatter(x[-1], y[-1], c='red', s=100, label='Fim')
    plt.title('Passeio Aleat√≥rio em 2D')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.grid(True)
    plt.axis('equal')
    plt.legend()
    plt.show()
```

##

Vamos alterar o c√≥digo para gerar 50 mil pontos no passeio aleat√≥rio,

- e vamos diminuir o tamanho para 1 para que a visualiza√ß√£o fique mais interessante.

##

Agora vamos gerar v√°rios passeios aleat√≥rios com o mesmo c√≥digo.

- Cada um deles ter√° uma cor diferente.

::: {.callout-caution title="Prompt" icon="false"}
Altere o c√≥digo para gerar 3 passeios aleat√≥rios, cada um com uma cor diferente
e com 50000 pontos cada (use pontos de tamanho 1).
Mantenha os eixos x e y com a mesma escala, os pontos do in√≠cio e do fim de cada passeio destacados
e os mapas de cores dos pontos.
:::

##

```python
if __name__ == '__main__':    
    num_passeios = 3
    num_pontos = 50000
    cores = ['Blues', 'Oranges', 'Greens']
    labels = ['Passeio 1', 'Passeio 2', 'Passeio 3']
    inicios = ['green', 'lime', 'yellow']
    fins = ['red', 'magenta', 'black']

    plt.figure(figsize=(12, 8))

    for i in range(num_passeios):
        x, y = gerar_passeio_aleatorio(num_pontos)
        pontos = np.arange(len(x))
        cmap = cm.get_cmap(cores[i])
        plt.scatter(x, y, c=pontos, cmap=cmap, s=1, label=labels[i], alpha=0.6)
        plt.scatter(x[0], y[0], c=inicios[i], s=60, edgecolors='k', marker='o', label=f'In√≠cio {i+1}')
        plt.scatter(x[-1], y[-1], c=fins[i], s=60, edgecolors='k', marker='X', label=f'Fim {i+1}')

    plt.title('3 Passeios Aleat√≥rios em 2D')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.grid(True)
    plt.axis('equal')
    plt.legend()
    plt.show()
```

##

Para um gr√°fico como esse o valor em si da coordenadas X e Y n√£o √© t√£o importante.

- Vamos ent√£o remover os valores dos eixos X e Y.

. . .

::: {.callout-caution title="Prompt" icon="false"}
Altere o gr√°fico para que os valores dos eixos X e Y n√£o sejam exibidos 
(e nem as linhas da grade e t√≠tulos de eixo).
:::

##

```python
if __name__ == '__main__':    
    num_passeios = 3
    num_pontos = 50000
    cores = ['Blues', 'Oranges', 'Greens']
    labels = ['Passeio 1', 'Passeio 2', 'Passeio 3']
    inicios = ['green', 'lime', 'yellow']
    fins = ['red', 'magenta', 'black']

    plt.figure(figsize=(12, 8))

    for i in range(num_passeios):
        x, y = gerar_passeio_aleatorio(num_pontos)
        pontos = np.arange(len(x))
        cmap = cm.get_cmap(cores[i])
        plt.scatter(x, y, c=pontos, cmap=cmap, s=1, label=labels[i], alpha=0.6)
        plt.scatter(x[0], y[0], c=inicios[i], s=60, edgecolors='k', marker='o', label=f'In√≠cio {i+1}')
        plt.scatter(x[-1], y[-1], c=fins[i], s=60, edgecolors='k', marker='X', label=f'Fim {i+1}')

    plt.title('3 Passeios Aleat√≥rios em 2D')
    plt.axis('equal')
    plt.legend()
    plt.xticks([])  # Remove valores do eixo X
    plt.yticks([])  # Remove valores do eixo Y
    plt.grid(False) # Remove linhas da grade
    plt.show()
```

##

Nessa aula pudemos conhecer a biblioteca Matplotlib para visualiza√ß√£o de dados.

- Revisamos para que servem alguns tipos de gr√°ficos mais comuns.
- E trabalhamos com alguns exemplos simples de gera√ß√£o de dados.

. . .

Na aula pr√°tica, vamos trabalhar com a biblioteca Pandas

- e experimentar um tipo diferente de visualiza√ß√£o de dados.