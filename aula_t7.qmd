---
title: Visualizando Dados
subtitle: PASIA - Aula T.7
---

##  

O conte√∫do dessa aula √© inspirado:

- no **cap√≠tulo 8** do livro Python para Ci√™ncia de Dados, de Yuli Vasiliev 
- e no **cap√≠tulo 15** do livro Curso Intensivo de Python, de Eric Matthes.

# Introdu√ß√£o {background-color="#40666e"}

## 

Imagine que voc√™ trabalha em uma empresa que comercializa um app para Smartphones.

- A empresa tem informa√ß√µes sobre a quantidade de licen√ßas vendidas por m√™s.
- E sobre o perfil de usu√°rio (como idade, pa√≠s, etc.) relacionado a essas vendas.

. . .

Voc√™ precisa apresentar essas informa√ß√µes para a diretoria da empresa.

- O objetivo √© ajudar a entender como aumentar o faturamento da empresa.

## 

Como voc√™ apresentaria as informa√ß√µes para a diretoria?

- voc√™ mostraria os dados em tabelas?
- ou voc√™ faria gr√°ficos?

. . .

A maioria das pessoas entende melhor informa√ß√µes apresentadas em gr√°ficos do que em tabelas.

- Um formato visual traz muito mais clareza para os dados.

##

Mas veja que n√£o basta mostrar os dados em um gr√°fico qualquer.

- √â necess√°rio que o gr√°fico seja simples, 
- visualmente agrad√°vel
- e, principalmente, que permita que todos entendem claramente o que veem.

. . .

Com isso, as pessoas conseguir√£o identificar padr√µes e tend√™ncias nos dados.

##

√â disso que se trata o que chamamos de [visualiza√ß√£o de dados]{.alert};

- que √© o uso de representa√ß√µes visuais para explorar e para evidenciar padr√µes em conjuntos de dados.

. . .

Um conjunto de dados (ou _dataset_) pode ser:

- desde uma simples lista de n√∫meros 
- at√© terabytes de dados com diversos tipos diferentes de inforama√ß√µes.

. . . 

A visualiza√ß√£o est√° estreitamente ligada ao que chamamos de **an√°lise explorat√≥ria de dados**.


##

Python deve ser a linguagem mais usada em Ci√™ncia de Dados.

. . .

Exemplos de √°reas que fazem uso intensivo de dados s√£o:

- gen√©tica, pesquisa clim√°tica, an√°lise pol√≠tica, an√°lise econ√¥mica, 
- e diversas outras.

. . .

Mas h√° muitos outros usos mesmo para √°reas que n√£o s√£o t√£o _"intensas em dados"_ assim.

- Qualquer empresa que queira tomar decis√µes baseadas em dados pode se beneficiar de visualiza√ß√µes eficazes.

##

Nosso foco aqui n√£o ser√° em Ci√™ncia dos Dados em si, nosso objetivo ser√°:

- Ter uma vis√£o geral sobre as principais **bibliotecas de visualiza√ß√£o de dados** em Python.
- Conhecer alguns dos **tipos de gr√°ficos mais comuns**.
- E aprender a usar essas bibliotecas **com a ajuda do GitHub Copilot**.

##

As bibliotecas mais usadas para visualiza√ß√£o de dados em Python s√£o:

- Matplotlib
- Seaborn
- Pandas
- Plotly

##

Antes de demonstrarmos o uso das bibliotecas, vamos criar uma pasta com um arquivo
`requirements.txt` com as bibliotecas que usaremos e abri-la no VS Code.

. . .

```text
pandas
matplotlib
seaborn
plotly
```

. . .

Lembre-se que para instalar as bibliotecas, voc√™ deve criar um ambiente virtual
e instalar as bibliotecas.

- Voc√™ pode fazer isso manualmente, como mostrei antes, ou...

. . .

```bash
python3 -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows
python -m pip install -r requirements.txt
```

##

Voc√™ pode, em vez de fazer manualmente, usar o VS Code para facilitar o processo.

. . .

Se voc√™ tiver um arquivo `requirements.txt` na raiz do projeto

- e depois acessar a paleta de comandos (Ctrl+Shift+P) e digitar **Python: Create Environment**
- o VS Code cria o ambiente virtual e j√° instala as bibliotecas listadas no arquivo.

# Matplotlib {background-color="#40666e"}

## Matplotlib

- √â a biblioteca **fundamental** para gr√°ficos em Python.  
- Suporta grande variedade de gr√°ficos 2D (linhas, barras, dispers√£o, histogramas).  
- Muito flex√≠vel, mas exige mais c√≥digo para personaliza√ß√µes.  
- √â a **base** de v√°rias outras bibliotecas (como Seaborn e Pandas).  

. . .

```python
# Exemplo simples
import matplotlib.pyplot as plt

plt.plot([1, 2, 3, 4], [10, 20, 25, 30])
plt.title("Exemplo Matplotlib")
plt.show()
```

##

Com o exemplo anterior, seria mostrado o gr√°fico abaixo:

:::: {.columns}
::: {.column width="50%"}
![](imagens/exemplo_matplotlib.png){fig-align="center" fig-alt="Exemplo gr√°fico matplotlib."}
:::

::: {.column width="50%"}
- Note que a primeira lista representa os valores do eixo X e a segunda os do eixo Y.

```{.python code-line-numbers="false"}
plt.plot([1, 2, 3, 4], [10, 20, 25, 30])
```
:::
::::

##

Repare que o gr√°fico √© exibido em uma tela que possui uma barra de ferramentas na parte inferior.

:::: {.columns}
::: {.column width="50%"}
![](imagens/exemplo_matplotlib_tela.png){fig-align="center" fig-alt="Tela do exemplo gr√°fico matplotlib."}
:::

::: {.column width="50%"}
- Com essa barra, podemos salvar o gr√°fico como uma imagem,
- ou interagir com o gr√°fico, fazendo zoom, por exemplo.
- Ou ainda alterando configura√ß√µes como o tamanho e espa√ßamento do gr√°fico.
:::
::::


##

Vamos usar agora, como exemplo, um conjunto de dados simples,
sobre üìä **vendas mensais de tr√™s produtos** 

- Vamos pedir ao Copilot para gerar um gr√°fico de linhas com esses dados,
usando a biblioteca Matplotlib.



| M√™s | Produto A | Produto B | Produto C |
|-----|-----------|-----------|-----------|
| Jan |   150     |   100     |    80     |
| Fev |   200     |   120     |    90     |
| Mar |   250     |   180     |   100     |
| Abr |   300     |   160     |   120     |
| Mai |   280     |   170     |   140     |
| Jun |   320     |   150     |   160     |

##

::: {.callout-caution title="Prompt" icon="false"}
Gere um gr√°fico de linhas usando Matplotlib com os dados abaixo que se referem √†s vendas mensais 
de tr√™s produtos.

```
M√™s	Produto A	Produto B	Produto C
Jan	150	100	80
Fev	200	120	90
Mar	250	180	100
Abr	300	160	120
Mai	280	170	140
Jun	320	150	160
```
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun']
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 170, 150]
produto_c = [80, 90, 100, 120, 140, 160]

plt.plot(meses, produto_a, marker='o', label='Produto A')
plt.plot(meses, produto_b, marker='o', label='Produto B')
plt.plot(meses, produto_c, marker='o', label='Produto C')

plt.title('Vendas Mensais por Produto')
plt.xlabel('M√™s')
plt.ylabel('Vendas')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
```
:::

##  

Note que o Copilot criou uma lista para cada coluna dos dados.

- E o gr√°fico de resultado seria esse:

. . .

:::: {.columns}
::: {.column width="50%"}
![](imagens/matplotlib_vendas.png){fig-align="center" fig-alt="Gr√°fico de vendas mensais usando matplotlib."}
:::

::: {.column width="50%"}

- Avalie o gr√°fico e o c√≥digo gerado pelo Copilot e tente identificar o que cada parte do c√≥digo faz.

- Depois, compare com o c√≥digo e gr√°ficos do primeiro exemplo mostrado.
:::
::::

##

Com o Copilot √© f√°cil alterarmos a forma como o gr√°fico √© gerado.

- Podemos, por exemplo, pedir que use marcadores diferentes para cada produto,
- Ou linhas mais grossas, cores diferentes, etc.

. . .

::: {.callout-caution title="Prompt" icon="false"}
Altere o gr√°fico usando marcadores diferentes para cada produto, linhas mais grossas
e esconda nas linhas de grade.
:::

##

![](imagens/matplotlib_vendas_alterado.png){fig-align="center" fig-alt="Gr√°fico de vendas mensais alterado usando matplotlib."}

##

Dava bastante trabalho üòÆ‚Äçüí® customizar gr√°ficos antes dos Assisentes de IA;

. . .

Agora com o Copilot podemos concentrar 

- [mais]{.alert} aten√ß√£o [no que queremos]{.alert} mostrar ü§ì com o gr√°fico  
- e **menos em como** fazer isso.

# Tipos de Gr√°ficos com Matplotlib {background-color="#40666e"}

## Gr√°fico de Linhas

[Gr√°ficos de linhas]{.alert}, como os que apresentamos, s√£o √∫teis quando precisamos:

- ilustrar tend√™ncias em dados ao longo de um per√≠odo de tempo.

. . .

Geral usamos per√≠odos de tempo no eixo `X` (horizontal).

- e uma ou mais colunas num√©ricas no eixo `Y` (vertical).

## 

Podemos fazer gr√°ficos de linha mais complexos, como quando sobrepomos dados de diferentes escalas.

. . .

![](imagens/matplotlib_linhas_escalas_diferentes.png){fig-align="center" fig-alt="Gr√°fico de temperatura e umidade em diferentes escalas."}

##

O gr√°fico do slide anterior anterior foi gerado com o seguinte c√≥digo:

```python
import matplotlib.pyplot as plt

# Dados de exemplo
dias = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S√°b', 'Dom']
temperatura = [22, 21, 23, 24, 22, 20, 19]
umidade = [60, 65, 58, 55, 62, 70, 75]

fig, ax1 = plt.subplots(figsize=(8, 5))

ax1.plot(dias, temperatura, marker='o', color='tab:red', label='Temperatura (¬∞C)')
ax1.set_xlabel('Dia')
ax1.set_ylabel('Temperatura (¬∞C)', color='tab:red')
ax1.tick_params(axis='y', labelcolor='tab:red')

ax2 = ax1.twinx()
ax2.plot(dias, umidade, marker='s', color='tab:blue', label='Umidade (%)')
ax2.set_ylabel('Umidade (%)', color='tab:blue')
ax2.tick_params(axis='y', labelcolor='tab:blue')

plt.title('Temperatura e Umidade ao longo da semana')
fig.tight_layout()
plt.show()
```

##

Como esse √© um exemplo um pouco mais complexo, vamos pedir ao Copilot para explicar o c√≥digo linha a linha

::: {.callout-caution title="Prompt" icon="false"}
`/explain` Explique o c√≥digo linha a linha.
:::

##

::: {.callout-note title="GitHub Copilot (in√≠cio)" icon="false" .nonincremental}

Vou explicar o c√≥digo Python linha a linha. Este c√≥digo cria um gr√°fico com dois eixos Y para mostrar temperatura e umidade ao longo da semana:

[Linha 1]{.alert}

```python
import matplotlib.pyplot as plt
```
Importa a biblioteca matplotlib.pyplot com o alias `plt`. Esta biblioteca √© usada para criar gr√°ficos e visualiza√ß√µes em Python.

[Linhas 3-6]{.alert}

```python
# Dados de exemplo
dias = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S√°b', 'Dom']
temperatura = [22, 21, 23, 24, 22, 20, 19]
umidade = [60, 65, 58, 55, 62, 70, 75]
```
- **Linha 3**: Coment√°rio indicando que os dados s√£o de exemplo
- **Linha 4**: Cria uma lista com os dias da semana abreviados
- **Linha 5**: Cria uma lista com valores de temperatura em graus Celsius para cada dia
- **Linha 6**: Cria uma lista com valores de umidade em percentual para cada dia
:::

##

::: {.callout-note title="GitHub Copilot (continua√ß√£o)" icon="false" .nonincremental}

[Linha 8]{.alert}

```python
fig, ax1 = plt.subplots(figsize=(8, 5))
```
Cria uma figura (fig) e um eixo principal (ax1) com tamanho de 8x5 polegadas. A fun√ß√£o `subplots()` retorna tanto a figura quanto o(s) eixo(s).

[Linhas 10-13]{.alert}

```python
ax1.plot(dias, temperatura, marker='o', color='tab:red', label='Temperatura (¬∞C)')
ax1.set_xlabel('Dia')
ax1.set_ylabel('Temperatura (¬∞C)', color='tab:red')
ax1.tick_params(axis='y', labelcolor='tab:red')
```
- **Linha 10**: Plota a temperatura no eixo principal com marcadores circulares ('o') em cor vermelha
- **Linha 11**: Define o r√≥tulo do eixo X como 'Dia'
- **Linha 12**: Define o r√≥tulo do eixo Y esquerdo como 'Temperatura (¬∞C)' em cor vermelha
- **Linha 13**: Configura a cor dos n√∫meros do eixo Y esquerdo para vermelho
:::

##

::: {.callout-note title="GitHub Copilot (continua√ß√£o)" icon="false" .nonincremental}

[Linhas 15-18]{.alert}

```python
ax2 = ax1.twinx()
ax2.plot(dias, umidade, marker='s', color='tab:blue', label='Umidade (%)')
ax2.set_ylabel('Umidade (%)', color='tab:blue')
ax2.tick_params(axis='y', labelcolor='tab:blue')
```
- **Linha 15**: Cria um segundo eixo Y (ax2) que compartilha o mesmo eixo X com ax1
- **Linha 16**: Plota a umidade no segundo eixo com marcadores quadrados ('s') em cor azul
- **Linha 17**: Define o r√≥tulo do eixo Y direito como 'Umidade (%)' em cor azul
- **Linha 18**: Configura a cor dos n√∫meros do eixo Y direito para azul

[Linhas 20-23]{.alert}

```python
plt.title('Temperatura e Umidade ao longo da semana')
fig.tight_layout()
plt.show()
```
- **Linha 20**: Define o t√≠tulo do gr√°fico
- **Linha 21**: Ajusta automaticamente o layout para evitar sobreposi√ß√£o de elementos
- **Linha 22**: Linha em branco para melhor legibilidade
- **Linha 23**: Exibe o gr√°fico na tela
:::

##

::: {.callout-note title="GitHub Copilot (continua√ß√£o)" icon="false" .nonincremental}

[Resultado]{.alert}

O c√≥digo gera um gr√°fico que mostra duas linhas:

- Uma linha vermelha com c√≠rculos mostrando a temperatura (eixo Y esquerdo)
- Uma linha azul com quadrados mostrando a umidade (eixo Y direito)

Ambas as linhas compartilham o mesmo eixo X (dias da semana), permitindo comparar facilmente como temperatura e umidade variam ao longo da semana.
:::

##

::: {.callout-tip}
Voc√™ pode estar se perguntando para que pedir explica√ß√µes sobre o c√≥digo ao Copilot,
se basta pedir a ele novamente se precisarmos fazer algo diferente.

Repare que, quanto mais um programador conhece uma biblioteca, melhor uso ele 
consegue fazer dos assistentes de IA.

Claro que n√£o √© necess√°rio entender os detalhes de sintaxe e decorar as fun√ß√µes que 
fazem os gr√°ficos. E dependendo do seu objetivo, talvez nem precise entender nada.

Mas, dependendo do que precisa, pode ser especialmente √∫til saber o que a biblioteca √©
capaz de fazer e entender o suficiente do c√≥digo para que tornar mais f√°cil o processo 
de depura√ß√£o e customiza√ß√£o do c√≥digo gerado.
:::

## Gr√°ficos de Barras

[Gr√°ficos de Barras]{.alert}, tamb√©m conhecidos como **Gr√°ficos de Colunas**, s√£o √∫teis para:

- comparar quantidades entre diferentes categorias.

. . .

Vamos usar o Copilot de maneira ligeiramente diferente que usamos antes.

- Vamos pedir que ele n√£o s√≥ gere o gr√°fico, como tamb√©m totalize os dados mensais antes
  de gerar o gr√°fico.

##

::: {.callout-caution title="Prompt" icon="false"}
Gere um gr√°fico de barras usando Matplotlib mostrando as vendas **totais** de cada produto
a partir da tabela abaixo que cont√©m dados de vendas mensais de tr√™s produtos.

```
M√™s	Produto A	Produto B	Produto C
Jan	150	100	80
Fev	200	120	90
Mar	250	180	100
Abr	300	160	120
Mai	280	170	140
Jun	320	150	160
```
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

# Dados de vendas mensais
meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun']
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 170, 150]
produto_c = [80, 90, 100, 120, 140, 160]

# Calculando vendas totais por produto
total_a = sum(produto_a)
total_b = sum(produto_b)
total_c = sum(produto_c)

produtos = ['Produto A', 'Produto B', 'Produto C']
totais = [total_a, total_b, total_c]

# Criando o gr√°fico de barras
plt.bar(produtos, totais, color=['blue', 'green', 'orange'])
plt.title('Vendas Totais por Produto (Jan-Jun)')
plt.xlabel('Produto')
plt.ylabel('Vendas Totais')
plt.tight_layout()
plt.show()
```
:::

##

Esse √© o gr√°fico gerado:

:::: {.columns}
::: {.column width="50%"}
![](imagens/matplotlib_vendas_totais.png){fig-align="center" fig-alt="Gr√°fico de vendas totais por produto usando matplotlib."}
:::

::: {.column width="50%"}
- Veja que, no c√≥digo, foi usado o m√©todo `bar` em vez do m√©todo `plot`.
- Ele recebe como primeiro argumento uma lista com os nomes das categorias (produtos)
- e como segundo argumento uma lista com os valores num√©ricos (vendas totais).
:::
::::

##

Vamos ver outras melhorias de visualiza√ß√£o que podemos fazer com a ajuda do Copilot.

- Podemos, por exemplo, pedir que o gr√°fico seja gerado na horizontal,
- ou que as barras sejam exibidas com cores diferentes.

. . .

::: {.callout-caution title="Prompt" icon="false"}
Altere o gr√°fico para que as barras sejam exibidas na horizontal, e os valores de 
cada barra sejam exibidos dentro da pr√≥pria barra. Use uma paleta de cores.
Tamb√©m altere o t√≠tulo do eixo X para Produtos e mude a cor do T√≠tulo e dos nomes dos
eixos para azul escuro.
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

# Dados de vendas mensais
meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun']
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 170, 150]
produto_c = [80, 90, 100, 120, 140, 160]

# Calculando vendas totais por produto
total_a = sum(produto_a)
total_b = sum(produto_b)
total_c = sum(produto_c)

produtos = ['Produto A', 'Produto B', 'Produto C']
totais = [total_a, total_b, total_c]

# Paleta de cores
colors = plt.cm.Set2.colors[:3]

# Criando o gr√°fico de barras horizontais
bars = plt.barh(produtos, totais, color=colors)
plt.title('Vendas Totais por Produto (Jan-Jun)', color='#003366')
plt.xlabel('Vendas Totais', color='#003366')
plt.ylabel('Produtos', color='#003366')

# Adicionando os valores dentro das barras
for bar in bars:
    width = bar.get_width()
    plt.text(width / 2, bar.get_y() + bar.get_height() / 2,
             str(width),
             ha='center', va='center', color='white', fontsize=10, fontweight='bold')

plt.tight_layout()
plt.show()
```
:::

##

![](imagens/matplotlib_vendas_totais_alterado.png){fig-align="center" fig-alt="Gr√°fico de vendas totais por produto alterado, usando Matplolib."}

. . .

Voc√™ pode notar pelo c√≥digo gerado, que a Matplotlib √© uma biblioteca bastante flex√≠vel,
mas que pode exigir bastante c√≥digo para fazer gr√°ficos como queremos.

## Gr√°ficos de Pizza

[Gr√°ficos de Pizza]{.alert} s√£o √∫teis para:

- mostrar propor√ß√µes de cada categoria em rela√ß√£o ao total,
- geralmente expressas em porcentagens.

. . .

Vamos pedir ao Copilot para mostrar as vendas totais de cada produto em um gr√°fico de pizza.

- E, em seguida, entender que diferen√ßa faz mostrar esses dados em gr√°ficos de barras ou de pizza.

##

::: {.callout-caution title="Prompt" icon="false"}
Gere um gr√°fico de **pizza** usando Matplotlib mostrando as vendas totais de cada produto
a partir da tabela abaixo que cont√©m dados de vendas mensais de tr√™s produtos.

```
M√™s	Produto A	Produto B	Produto C
Jan	150	100	80
Fev	200	120	90
Mar	250	180	100
Abr	300	160	120
Mai	280	170	140
Jun	320	150	160
```
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

# Dados de vendas mensais
produtos = ['Produto A', 'Produto B', 'Produto C']
vendas = [
    [150, 200, 250, 300, 280, 320],  # Produto A
    [100, 120, 180, 160, 170, 150],  # Produto B
    [80, 90, 100, 120, 140, 160]     # Produto C
]

# Soma das vendas de cada produto
vendas_totais = [sum(v) for v in vendas]

# Gr√°fico de pizza
plt.figure(figsize=(6, 6))
plt.pie(vendas_totais, labels=produtos, autopct='%1.1f%%', startangle=90)
plt.title('Vendas Totais por Produto')
plt.axis('equal')
plt.show()
```
:::

##

Esse √© o gr√°fico gerado:

![](imagens/matplotlib_vendas_totais_pizza.png){fig-align="center" fig-alt="Gr√°fico de vendas totais por produto em gr√°fico de pizza usando Matplolib."}

## 

Em que situa√ß√µes voc√™ preferiria usar o **gr√°fico de barras** ou o **gr√°fico de pizza**?

:::: {.columns}
::: {.column width="50%"}
![](imagens/matplotlib_vendas_totais.png){fig-align="center" fig-alt="Gr√°fico de vendas totais por produto usando matplotlib."}
:::

::: {.column width="50%"}
![](imagens/matplotlib_vendas_totais_pizza.png){fig-align="center" fig-alt="Gr√°fico de vendas totais por produto em gr√°fico de pizza usando Matplolib."}
:::
::::

## 

Repare que **gr√°ficos de barra** s√£o mais eficazes para comparar valores absolutos entre categorias.

- Eles facilitam a visualiza√ß√£o de diferen√ßas entre os valores.
- No nosso caso, conseguimos ver facilmente que o Produto A teve vendas muito maiores que os outros.

. . .

J√° **gr√°ficos de pizza** s√£o mais √∫teis para comparar as propor√ß√µes em rela√ß√£o ao total.

- Eles ajudam a entender a participa√ß√£o de cada categoria.
- No nosso caso, conseguimos ver facilmente que o Produto A representa quase metade das vendas totais.


## Histogramas

Os [histogramas]{.alert} s√£o √∫teis para:

- mostrar distribui√ß√µes de frequ√™ncia,
- ou seja, quantas vezes cada valor ou intervalo de valores ocorre em um conjunto de dados. 

. . .

Cada valor (ou intervalo) √© representado por uma barra vertical, cuja altura corresponde 
√† frequ√™ncia daquele valor.

##

Suponha, por exemplo, que um professor queira analisar as notas de uma turma.

- Ele pode usar um histograma para visualizar a distribui√ß√£o das notas.

. . .

::: {.callout-caution title="Prompt" icon="false"}
```python
import matplotlib.pyplot as plt

notas = [91, 92, 60, 82, 94, 54, 83, 81, 74, 91, 75, 70, 81, 48, 0, 82, 90, 65, 88, 89, 56, 51, 64, 63, 60, 61, 80, 66, 65, 79, 49, 71, 44, 72, 78, 60, 55, 53, 87, 80, 63, 60, 66, 61, 75, 48, 87, 53, 63, 39, 74, 27, 61]

# gerar um histograma com as notas, considerando intervalos de 10 em 10
```
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

notas = [91, 92, 60, 82, 94, 54, 83, 81, 74, 91, 75, 70, 81, 48, 0, 82, 90, 65, 88, 89, 56, 51, 64, 63, 60, 61, 80, 66, 65, 79, 49, 71, 44, 72, 78, 60, 55, 53, 87, 80, 63, 60, 66, 61, 75, 48, 87, 53, 63, 39, 74, 27, 61]

# gerar um histograma com as notas, considerando intervalos de 10 em 10
plt.hist(notas, bins=range(0, 101, 10), edgecolor='black', alpha=0.7)
plt.title('Distribui√ß√£o de Notas')
plt.xlabel('Notas')
plt.ylabel('N√∫mero de Alunos')
plt.xticks(range(0, 101, 10))
plt.grid(axis='y', alpha=0.75)
plt.show()
```
:::

##

![](imagens/matplotlib_histograma_notas.png){fig-align="center" fig-alt="Histograma de notas usando Matplolib."}

. . .

Analisando o histograma podemos ver que 15 alunos ficaram com nota entre 60 e 70.

- E que a maioria das notas est√° entre 60 e 90.

## Gr√°ficos de Dispers√£o

Os [gr√°ficos de dispers√£o]{.alert} s√£o √∫teis para:

- mostrar a rela√ß√£o entre duas (ou mais) vari√°veis num√©ricas.
- Cada ponto do gr√°fico tem o valor de uma vari√°vel no eixo X e o valor da outra vari√°vel no eixo Y.

. . .

Suponha, por exemplo, que um professor queira analisar a rela√ß√£o entre a presen√ßa nas aulas e as notas dos alunos.

- Ele pode usar um gr√°fico de dispers√£o para visualizar essa rela√ß√£o.

##

::: {.callout-caution title="Prompt" icon="false"}
```python
import matplotlib.pyplot as plt

notas = [91, 79, 39, 62, 96, 84, 82, 24, 69, 15, 50, 38, 64, 30, 62, 76, 57, 58, 75, 72, 63, 74, 47, 72, 60, 79, 67, 70, 24, 59, 75, 60, 58, 14, 42, 89, 83, 47, 79, 46, 48, 91, 63, 83, 74, 90, 92]
faltas = [12, 28, 6, 16, 4, 12, 4, 32, 12, 12, 14, 14, 16, 16, 12, 8, 16, 2, 10, 54, 4, 54, 0, 16, 10, 8, 10, 8, 14, 16, 2, 12, 12, 22, 20, 2, 4, 18, 20, 6, 4, 4, 10, 2, 20, 12, 4]

# gerar um gr√°fico de dispers√£o relacionando notas e faltas
```
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

notas = [91, 79, 39, 62, 96, 84, 82, 24, 69, 15, 50, 38, 64, 30, 62, 76, 57, 58, 75, 72, 63, 74, 47, 72, 60, 79, 67, 70, 24, 59, 75, 60, 58, 14, 42, 89, 83, 47, 79, 46, 48, 91, 63, 83, 74, 90, 92]
faltas = [12, 28, 6, 16, 4, 12, 4, 32, 12, 12, 14, 14, 16, 16, 12, 8, 16, 2, 10, 54, 4, 54, 0, 16, 10, 8, 10, 8, 14, 16, 2, 12, 12, 22, 20, 2, 4, 18, 20, 6, 4, 4, 10, 2, 20, 12, 4]

# gerar um gr√°fico de dispers√£o relacionando notas e faltas
plt.figure(figsize=(10, 6))
plt.scatter(faltas, notas, color='blue', alpha=0.6)
plt.title('Rela√ß√£o entre Notas e Faltas')
plt.xlabel('N√∫mero de Faltas')
plt.ylabel('Notas')
plt.xlim(0, max(faltas) + 5)
plt.ylim(0, 100)
plt.grid(True)
plt.axhline(y=60, color='r', linestyle='--', label='Nota de Corte')
plt.legend()
plt.show()
```
:::

##

![](imagens/matplotlib_dispersao_notas_faltas.png){fig-align="center" fig-alt="Gr√°fico de dispers√£o relacionando notas e faltas usando Matplolib."}

##

Esse gr√°ficos traz algumas quest√µes interessantes.

1. O Copilot adicionou, por conta pr√≥pria, uma linha horizontal indicando a nota de corte (60).

- J√° que ele fez isso, seria interessante destacar tamb√©m o limite de faltas para reprova√ß√£o.
- Que inclusive, depende se a nota √© 60 ou 70. 

##

2. Aƒ∫√©m disso, tem dois pontos no gr√°fico bem estranhos.

- Alunos que faltaram em quase todas as aulas e ainda assim passaram. O que poderia ser?
- S√£o alunos de matr√≠cula especial (turma Z).
- Esses dados deveriam exclu√≠dos (limpeza de dados) ou destacados de alguma forma no gr√°fico.

##

Vamos ent√£o alterar o gr√°fico:

- removendo os alunos de turma Z.
- destacando o limite de faltas/notas para reprova√ß√£o.

. . . 

::: {.callout-caution title="Prompt" icon="false"}
Altere o gr√°fico acrescentando uma nova linha de corte para a nota: 70 (em azul).
E linhas de corte tamb√©m para as faltas: 17 (em vermelho) e 23 (em azul).
:::

##

::: {.callout-note title="GitHub Copilot" icon="false" .nonincremental}
```python
import matplotlib.pyplot as plt

notas = [91, 79, 39, 62, 96, 84, 82, 24, 69, 15, 50, 38, 64, 30, 62, 76, 57, 58, 75, 63, 47, 72, 60, 79, 67, 70, 24, 59, 75, 60, 58, 14, 42, 89, 83, 47, 79, 46, 48, 91, 63, 83, 74, 90, 92]
faltas = [12, 28, 6, 16, 4, 12, 4, 32, 12, 12, 14, 14, 16, 16, 12, 8, 16, 2, 10, 4, 0, 16, 10, 8, 10, 8, 14, 16, 2, 12, 12, 22, 20, 2, 4, 18, 20, 6, 4, 4, 10, 2, 20, 12, 4]

plt.figure(figsize=(10, 6))
plt.scatter(faltas, notas, color='blue', alpha=0.6)
plt.title('Rela√ß√£o entre Notas e Faltas')
plt.xlabel('N√∫mero de Faltas')
plt.ylabel('Notas')
plt.xlim(0, max(faltas) + 5)
plt.ylim(0, 100)
plt.grid(True)

# Linhas horizontais de corte para notas
plt.axhline(y=60, color='r', linestyle='--', label='Nota de Corte 60')
plt.axhline(y=70, color='blue', linestyle='--', label='Nota de Corte 70')

# Linhas verticais de corte para faltas
plt.axvline(x=17, color='r', linestyle='-.', label='Faltas Corte 17')
plt.axvline(x=23, color='blue', linestyle='-.', label='Faltas Corte 23')

plt.legend()
plt.show()
```
:::

##

![](imagens/matplotlib_dispersao_notas_faltas_alterado.png){fig-align="center" fig-alt="Gr√°fico de dispers√£o relacionando notas e faltas alterado, usando Matplolib."}

## Outros tipos de gr√°ficos

Como j√° citado anteriormente, o Copilot nos permite manter foco no que queremos,

- em vez de preocuparmos sobre detalhes sobre como isso pode ser feito.

. . .

Por isso, √© interessante ter uma ideia do que √© poss√≠vel fazer com as bibliotecas de visualiza√ß√£o
como o Matplotlib.

- Voc√™ pode explorar isso com o pr√≥prio Copilot.
- Ou pode consultar a documenta√ß√£o oficial da biblioteca.

##

Uma funcionalidade interessante da Matplotlib, por exemplo, √© a possibilidade de criar v√°rios subgr√°ficos 
em uma √∫nica figura.

. . .

![](imagens/matplotlib_exemplo_doutorado.png){fig-align="center" fig-alt="Exemplo de v√°rios gr√°ficos em uma √∫nica figura usando Matplolib."}

##

Criei a figura do slide anterior para a minha tese de doutorado.

- Al√©m de mostrar o uso de v√°rios gr√°ficos em uma √∫nica figura,
- ela tamb√©m mostra que √© poss√≠vel usar preenchimento de √°rea em gr√°ficos de linha.

. . .

Pena que n√£o existia Copilot üò¢üò¢ durante o meu doutorado.

##

Veja os [tipos de gr√°ficos do Matplotlib](https://matplotlib.org/stable/plot_types/index.html#plot-types).

. . .

E a [galeria de exemplos do Matplotlib](https://matplotlib.org/stable/gallery/index.html).

# Pandas {background-color="#40666e"}

## Pandas (df.plot)

- üìå Permite criar gr√°ficos diretamente de DataFrames.
- Baseado no Matplotlib.
- Muito √∫til para an√°lises r√°pidas e relat√≥rios simples.
- Menos flex√≠vel para visualiza√ß√µes complexas.

```python
import pandas as pd

df = pd.DataFrame({
    "Ano": [2021, 2022, 2023],
    "Vendas": [150, 200, 250]
})

df.plot(x="Ano", y="Vendas", kind="bar", title="Vendas por Ano")
```

# Seaborn {background-color="#40666e"}

## Seaborn

- üìå Constru√≠da sobre o Matplotlib.
- Oferece visualiza√ß√µes estat√≠sticas com apar√™ncia mais elegante.
- Facilita cria√ß√£o de gr√°ficos de distribui√ß√µes, correla√ß√µes e regress√µes.
- Ideal para an√°lise explorat√≥ria de dados.

```python
import seaborn as sns
import matplotlib.pyplot as plt

sns.lineplot(x=[1, 2, 3, 4], y=[10, 20, 25, 30], marker="o")
plt.title("Exemplo Seaborn")
plt.show()
```

##


meses = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"]
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 220, 210]
produto_c = [80, 90, 100, 120, 140, 160]

Para ma

Suponha que tenhamos esses dados de vendas em um dicion√°rio Python:

- Note que as chaves dos dicion√°rios representam os nomes das colunas
- e os valores s√£o listas com os dados de cada coluna.

. . 

```python
import pandas as pd



df = pd.DataFrame(dados)
print(df)
```

## Os Dados

Para exemplicar o uso das bibliotecas, vamos usar um conjunto de dados simples.

- üìä Exemplo: **Vendas mensais de tr√™s produtos**

```python
import pandas as pd

dados = {
    "M√™s": ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"],
    "Produto A": [150, 200, 250, 300, 280, 320],
    "Produto B": [100, 120, 180, 160, 220, 210],
    "Produto C": [80, 90, 100, 120, 140, 160]
}

df = pd.DataFrame(dados)
print(df)
```



##

Esses dados poderiam estar dispon√≠veis em uma planilha ou arquivo CSV, por exemplo.

- Mas para usarmos aqui, vamos criar um dicion√°rio Python com esses dados.

. . .

```python
vendas = {
    "M√™s": ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"],
    "Produto A": [150, 200, 250, 300, 280, 320],
    "Produto B": [100, 120, 180, 160, 220, 210],
    "Produto C": [80, 90, 100, 120, 140, 160]
}
```

Repare que cada chave do dicion√°rio representa o nome de uma coluna.

- E os valores s√£o listas com os dados de cada coluna.

# Plotly {background-color="#40666e"}

## Plotly

- üìå Biblioteca para gr√°ficos interativos.
- Suporta zoom, hover, exporta√ß√£o e gr√°ficos 3D.
- Muito usada em dashboards e relat√≥rios din√¢micos.
- Integra-se bem com Dash para aplica√ß√µes web.

```python
import plotly.express as px

df = px.data.iris()
fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species")
fig.show()
```
