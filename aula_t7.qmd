---
title: Visualizando Dados
subtitle: PASIA - Aula T.7
---

##  

O conte√∫do dessa aula √© inspirado:

- no **cap√≠tulo 8** do livro Python para Ci√™ncia de Dados, de Yuli Vasiliev 
- e no **cap√≠tulo 15** do livro Curso Intensivo de Python, de Eric Matthes.

# Introdu√ß√£o {background-color="#40666e"}

## 

Imagine que voc√™ trabalha em uma empresa que comercializa um app para Smartphones.

- A empresa tem informa√ß√µes sobre a quantidade de licen√ßas vendidas por m√™s.
- E sobre o perfil de usu√°rio (como idade, pa√≠s, etc.) relacionado a essas vendas.

. . .

Voc√™ precisa apresentar essas informa√ß√µes para a diretoria da empresa.

- O objetivo √© ajudar a entender como aumentar o faturamento da empresa.

## 

Como voc√™ apresentaria as informa√ß√µes para a diretoria?

- voc√™ mostraria os dados em tabelas?
- ou voc√™ faria gr√°ficos?

. . .

A maioria das pessoas entende melhor informa√ß√µes apresentadas em gr√°ficos do que em tabelas.

- Um formato visual traz muito mais clareza para os dados.

##

Mas veja que n√£o basta mostrar os dados em um gr√°fico qualquer.

- √â necess√°rio que o gr√°fico seja simples e visualmente agrad√°vel
- e, principalmente, que permita que todos entendem claramente o que veem.
- Com isso, as pessoas conseguir√£o identificar padr√µes e tend√™ncias nos dados.

##

√â disso que se trata o que chamamos de [visualiza√ß√£o de dados]{.alert}.

- que √© o uso de representa√ß√µes visuais para explorar e para evidenciar padr√µes em conjuntos de dados.
- Onde um conjunto de dados (ou _dataset_) pode ser desde uma simples lista de n√∫meros at√© 
  terabytes de dados com diversos tipos diferentes de inforama√ß√µes.

. . . 

A visualiza√ß√£o est√° estreitamente ligada ao que chamamos de **an√°lise explorat√≥ria de dados**.


##

Python deve ser a linguagem mais usada em Ci√™ncia de Dados.

. . .

Exemplos de √°reas que fazem uso intensivo de dados s√£o:

- gen√©tica, pesquisa clim√°tica, an√°lise pol√≠tica, an√°lise econ√¥mica, 
- e diversas outras.

. . .

Mas h√° muitos outros usos mesmo para √°reas que n√£o s√£o t√£o _"intensas em dados"_ assim.

- Qualquer empresa que queira tomar decis√µes baseadas em dados pode se beneficiar de visualiza√ß√µes eficazes.

##

As bibliotecas mais usadas para visualiza√ß√£o de dados em Python s√£o:

- Matplotlib
- Seaborn
- Pandas
- Plotly

##

Antes de demonstrarmos o uso das bibliotecas, vamos criar um arquivo
`requirements.txt` com as bibliotecas que usaremos.

```text
pandas
matplotlib
seaborn
plotly
```

. . .

Lembre-se que para instalar as bibliotecas, voc√™ deve criar um ambiente virtual
e instalar as bibliotecas.

- Voc√™ pode fazer isso manualente, como mostrei antes, ou...

```bash
python3 -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows
python -m pip install -r requirements.txt
```

##

Voc√™ pode, em vez de fazer manualmente, usar o VS Code para facilitar o processo.

. . .

Se voc√™ criar um arquivo `requirements.txt` na raiz do projeto

- e depois acessar a op√ß√£o paleta de comandos (Ctrl+Shift+P) e digitar **Python: Create Environment**
- o VS Code cria o ambiente virtual e j√° instala as bibliotecas listadas no arquivo.

## Dados de exemplo

Para exemplicar o uso das bibliotecas, vamos usar um conjunto de dados simples
sobre **vendas mensais de tr√™s produtos** üìä

. . .


| M√™s | Produto A | Produto B | Produto C |
|-----|-----------|-----------|-----------|
| Jan |   150     |   100     |    80     |
| Fev |   200     |   120     |    90     |
| Mar |   250     |   180     |   100     |
| Abr |   300     |   160     |   120     |
| Mai |   280     |   170     |   140     |
| Jun |   320     |   150     |   160     |

# Matplotlib {background-color="#40666e"}

## Matplotlib

- üìå Biblioteca **fundamental** para gr√°ficos em Python.  
- Suporta grande variedade de gr√°ficos 2D (linhas, barras, dispers√£o, histogramas).  
- Muito flex√≠vel, mas exige mais c√≥digo para personaliza√ß√µes.  
- √â a **base** de v√°rias outras bibliotecas (como Seaborn e Pandas).  

. . .

```python
# Exemplo simples
import matplotlib.pyplot as plt

plt.plot([1, 2, 3, 4], [10, 20, 25, 30])
plt.title("Exemplo Matplotlib")
plt.show()
```

##

Com o exemplo anterior, seria mostrado o gr√°fico abaixo:

:::: {.columns}
::: {.column width="50%"}
![](imagens/exemplo_matplotlib.png){fig-align="center" fig-alt="Exemplo gr√°fico matplotlib." style="max-height: 50vh; width: auto;"}
:::

::: {.column width="50%"}
- Note que a primeira lista representa os valores do eixo X e a segunda os do eixo Y.

```{.python code-line-numbers="false"}
plt.plot([1, 2, 3, 4], [10, 20, 25, 30])
```
:::
::::

##

Vamos agora pedir ao Copilot para gerar um gr√°fico de linhas com os dados de vendas mensais
usando a biblioteca Matplotlib.

. . .

::: {.callout-caution title="Prompt" icon="false"}
Gere um gr√°fico de linhas usando Matplotlib com os dados abaixo que se referem √†s vendas mensais 
de tr√™s produtos.

```
M√™s	Produto A	Produto B	Produto C
Jan	150	100	80
Fev	200	120	90
Mar	250	180	100
Abr	300	160	120
Mai	280	170	140
Jun	320	150	160
```
:::

##

```python
import matplotlib.pyplot as plt

meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun']
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 170, 150]
produto_c = [80, 90, 100, 120, 140, 160]

plt.plot(meses, produto_a, marker='o', label='Produto A')
plt.plot(meses, produto_b, marker='o', label='Produto B')
plt.plot(meses, produto_c, marker='o', label='Produto C')

plt.title('Vendas Mensais por Produto')
plt.xlabel('M√™s')
plt.ylabel('Vendas')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
```

##  

Note que o Copilot criou uma lista para cada coluna dos dados.

- E o gr√°fico de resultado seria esse:

. . .

:::: {.columns}
::: {.column width="50%"}
![](imagens/matplotlib_vendas.png){fig-align="center" fig-alt="Gr√°fico de vendas mensais usando matplotlib." style="max-height: 50vh; width: auto;"}
:::

::: {.column width="50%"}

- Leia o c√≥digo gerado pelo Copilot e tente identificar o que cada parte faz.

- Depois, compare o gr√°fico gerado com o primeiro mostrado como exemplo.
:::
::::

##

Com o Copilot √© f√°cil alterarmos a forma como o gr√°fico √© gerado.

- Podemos, por exemplo, pedir que use marcadores diferentes para cada produto,
- Ou linhas mais grossas, cores diferentes, etc.

. . .

::: {.callout-caution title="Prompt" icon="false"}
Altere o gr√°fico usando marcadores diferentes para cada produto, linhas mais grossas
e esconda nas linhas de grade.
:::

##

:::: {.columns}
::: {.column width="50%"}
![](imagens/matplotlib_vendas_alterado.png){fig-align="center" fig-alt="Gr√°fico de vendas mensais laterado usando matplotlib." style="max-height: 50vh; width: auto;"}
:::

::: {.column width="50%"}

- Dava bastante trabalho customizar gr√°ficos antes dos Assisentes de IA üòÆ‚Äçüí®
- Agora com o Copilot podemos concentrar mais aten√ß√£o no que queremos mostrar com o gr√°fico ü§ì 
- e menos em como fazer isso.
:::
::::

# Seaborn {background-color="#40666e"}

## Seaborn

- üìå Constru√≠da sobre o Matplotlib.
- Oferece visualiza√ß√µes estat√≠sticas com apar√™ncia mais elegante.
- Facilita cria√ß√£o de gr√°ficos de distribui√ß√µes, correla√ß√µes e regress√µes.
- Ideal para an√°lise explorat√≥ria de dados.

```python
import seaborn as sns
import matplotlib.pyplot as plt

sns.lineplot(x=[1, 2, 3, 4], y=[10, 20, 25, 30], marker="o")
plt.title("Exemplo Seaborn")
plt.show()
```

##


meses = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"]
produto_a = [150, 200, 250, 300, 280, 320]
produto_b = [100, 120, 180, 160, 220, 210]
produto_c = [80, 90, 100, 120, 140, 160]

Para ma

Suponha que tenhamos esses dados de vendas em um dicion√°rio Python:

- Note que as chaves dos dicion√°rios representam os nomes das colunas
- e os valores s√£o listas com os dados de cada coluna.

. . 

```python
import pandas as pd



df = pd.DataFrame(dados)
print(df)
```

## Os Dados

Para exemplicar o uso das bibliotecas, vamos usar um conjunto de dados simples.

- üìä Exemplo: **Vendas mensais de tr√™s produtos**

```python
import pandas as pd

dados = {
    "M√™s": ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"],
    "Produto A": [150, 200, 250, 300, 280, 320],
    "Produto B": [100, 120, 180, 160, 220, 210],
    "Produto C": [80, 90, 100, 120, 140, 160]
}

df = pd.DataFrame(dados)
print(df)
```


## Seaborn



##

Esses dados poderiam estar dispon√≠veis em uma planilha ou arquivo CSV, por exemplo.

- Mas para usarmos aqui, vamos criar um dicion√°rio Python com esses dados.

. . .

```python
vendas = {
    "M√™s": ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"],
    "Produto A": [150, 200, 250, 300, 280, 320],
    "Produto B": [100, 120, 180, 160, 220, 210],
    "Produto C": [80, 90, 100, 120, 140, 160]
}
```

Repare que cada chave do dicion√°rio representa o nome de uma coluna.

- E os valores s√£o listas com os dados de cada coluna.

## Pandas (df.plot)

- üìå Permite criar gr√°ficos diretamente de DataFrames.
- Baseado no Matplotlib.
- Muito √∫til para an√°lises r√°pidas e relat√≥rios simples.
- Menos flex√≠vel para visualiza√ß√µes complexas.

```python
import pandas as pd

df = pd.DataFrame({
    "Ano": [2021, 2022, 2023],
    "Vendas": [150, 200, 250]
})

df.plot(x="Ano", y="Vendas", kind="bar", title="Vendas por Ano")
```

## Plotly

- üìå Biblioteca para gr√°ficos interativos.
- Suporta zoom, hover, exporta√ß√£o e gr√°ficos 3D.
- Muito usada em dashboards e relat√≥rios din√¢micos.
- Integra-se bem com Dash para aplica√ß√µes web.

```python
import plotly.express as px

df = px.data.iris()
fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species")
fig.show()
```python