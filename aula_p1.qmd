---
title: Introdução à Programação Suportada por IA
subtitle: PASIA - Aula P.1
---

##  {.smaller}

O conteúdo dessa aula é baseado nos capítulos 1 e 2 do livro abaixo.

![](imagens/livro_potter_zingaro.png){fig-align="center" fig-alt="Capa do livro de Potter e Zingaro." style="max-height: 60vh; width: auto;"}

# Introdução {background-color="#40666e"}

## {.smaller}

Você conhece alguma indústria ou negócio cuja forma de trabalho não tem sofrido impacto
do uso de softwares?

- Difícil de imaginar, não é?
- Software é essencial hoje em dia.

. . .

O resultado tem sido que cada vez mais pessoas querem aprender a programar

- E não estamos falando apenas de graduação em área de TI.
  - Pode ser um cientista que precisa de um programa para analisar dados.
  - Ou um trabalhador de escritório que gostaria de automatizar alguma tarefa repetitiva chata.
  - Ou alguém que quer criar um jogo por hobby.

## {.smaller}

Apesar do desejo de aprender a programar

- Décadas de pesquisa na área de educação em computação mostram que programar é difícil.
- Ferramentas de IA podem facilitar muito aprendizado
  - Evitando que o aluno tenha que saber detalhes de regras de sintaxe.

. . .

Nesta disciplina usaremos o GitHub Copilot como um assistente de IA.

- Algumas pessoas dizem que assistentes de IA acabarão com todos os empregros de desenvolvedores.
- Outros acham que assistentes de IA nunca serão confiáveis.
- Mas é fácil encontrar falhas nesses dois argumentos opostos e extremos.

. . .

O fato é que achar que assistentes de IA não deveriam ser usados hoje em dia

- seria o mesmo que um carpinteiro se recusar a usar ferramentas elétricas.

## {.smaller}

Os assistentes de IA possuem vantagens que são inegáveis

- Geram códigos que, na grande maioria das vezes, não têm erros de sintaxe.
  - Evitando frustrações comuns de iniciantes.
- São muito boas para explicar o que um código já implementado faz.
  - Fazendo com que um aluno não dependa tanto de um professor, monitor ou colega para ajudá-lo.

. . .

E, claro, muitas vezes assistentes de IA geram códigos corretos para problemas comuns

- Já que é treinado a partir de uma quantidade imensa de códigos.
- Por que então não utilizá-los?

## {.smaller}

Isso não quer dizer que criar software agora é algo trivial e podemos confiar toda habilidade de programação para a IA.

- O fato é que as habilidades para se criar um bom software estão evoluindo.

. . .

Habilidades como:

- decomposição de problemas
- especificação de código
- leitura de código
- teste de código

. . . 

Se tornaram mais importantes do que eram no passado.

. . .

Já habilidades como conhecer a semântica e sintaxe de uma biblioteca são agora menos importantes.

## {.smaller}

O que essa disciplina espera de você:

- Que conheça o básico de programação
  - Tendo feito IALG ou FP1.
- Que esteja disposto a realmente criar software útil com auxílio de IA.
  - Não faz sentido fazer uma disciplina para virar um operator de TAB :)
- Que tenha resiliência para lidar com todo o ciclo de desenvolvimento.
  - Que envolve criar, testar, corrigir, melhorar, documentar, etc.

. . .

Esperamos que ao final da disciplina você consiga

- Criar programas em Python com auxílio de IA.
- Saiba identificar se os programas funcionam corretamente e, se não funcionam, o que fazer para corrigir.
- Consiga ler e entender códigos em Python.
- Saiba utilizar bibliotecas de análise e visualização de dados em Python.
- Saiba automatizar tarefas repetitivas com Python.

## {.smaller}

Há um desafio ao utilizar assistentes de IA, que é especialmente relevante no caso de uma disciplina.

- Assistentes de IA estão evoluindo muito rapidamente,
- e ainda possuem comportamento não-determinístico.
- Com isso, se você resolver a mesma tarefa várias vezes, você pode obter soluções diferentes.

. . .

O resultado é que o que você fizer pode não bater exatamente com o que o professor preparou para a aula.

- Por isso é tão importante que você aprenda como verificar se uma solução do assistente de IA está correta ou não.

# Impacto da IA na programação {background-color="#40666e"}

## {.smaller}

O que você acha que esse código faz?

```{.assembly code-line-numbers="false"}
section .text 
global _start 
_start: 
    mov ecx, 10 
    mov eax, '0' 
    l1: 
    mov [num], eax 
    mov eax, 4 
    mov ebx, 1 
    push ecx 
    mov ecx, num 
    mov edx, 1 
    int 0x80 
    mov eax, [num] 
    inc eax 
    pop ecx 
    loop l1 
    mov eax, 1 
    int 0x80 
section .bss 
    num resb 1
```

. . .

Ele faz com que o computador conte de 0 a 9 e imprima os números na tela.

- Era assim que se programava antigamente.

## {.smaller}

O que você acha que esse código faz?

```{.assembly code-line-numbers="false"}
section .text 
global _start 
_start: 
    mov ecx, 10 
    mov eax, '0' 
    l1: 
    mov [num], eax 
    mov eax, 4 
    mov ebx, 1 
    push ecx 
    mov ecx, num 
    mov edx, 1 
    int 0x80 
    mov eax, [num] 
    inc eax 
    pop ecx 
    loop l1 
    mov eax, 1 
    int 0x80 
section .bss 
    num resb 1
```

Essa monstruosidade foi escrita em código Assembly.

- Projetada para ser entendida por máquinas e não humanos.
- Mesmo na década de 90 jogos como Doom e Quake tinham trechos escritos em Assembly para garantir desempenho.

## {.smaller}

Uma forma mais moderna de escrever o mesmo programa seria:

::: {.doublefontsize}
```{.python code-line-numbers="false"}
for numero in range(9):
    print(numero)
```
:::

- Escrito em Python, que se parece muito mais com uma linguagem natural.
  - Especialmente para quem fala inglês.
- E é mais fácil para uma pessoa tentar adivinhar o que o código faz, mesmo que não conheça Python.

. . .

Mas infelizmente, o código está errado, ele não exibe os números de 0 a 9.

- Apesar de parecer inglês, Python não é inglês.
- E, assim, confundir algum detalhe das regras de um programa pode "quebrá-lo".

## {.smaller}

Com assitentes de IA, o trabalho ficou muito mais fácil.

- Podemos escrever em português, e o GitHub Copilot gera o código em Python para nós.

. . .

Se escrevemos, por exemplo, o comentário abaixo:

::: {.doublefontsize}
```{.python code-line-numbers="false"}
# Exiba os números de 0 a 9
```
:::

. . .

Provavelmente, o GitHub Copilot irá sugerir o código a seguir

- que, diferentemente do código anterior, esse está correto.

::: {.doublefontsize}
```{.python code-line-numbers="false"}
# Exiba os números de 0 a 9
for i in range(10):
    print(i)
```
:::

## {.smaller}

Antes dos assistentes de IA, programadores profissionais costumavam trabalhar com duas telas.

- Uma com a IDE para programar
- Outra com o Google e/ou Stack Overflow para pesquisar como resolver problemas.

. . .

Muitas vezes a solução encontrada na internet já era o que o programador estava tentando fazer.

- especialmente no caso de programadores iniciantes.

. . .

Uma das coisas que os assistentes de IA fazem de melhor é automatizar esse processo.

- Fazendo isso não só mais rápido, como também contextualizado no código que está sendo escrito.

# Funcionamento de um assistente de IA {background-color="#40666e"}

## {.smaller}

Mas o que é exatamente um assistente de IA?

- É um agente de IA que te ajuda a completar uma tarefa de programação.
- De forma similar à Alexa, da Amazon, um assistente de IA entende instruções em linguagem natural.

. . . 

No caso do Copilot, uma das tarefas que ele faz é:

- converter uma linguagem, como o Português, em programas de computador.

. . .

Copilot é apenas um exemplo de assistente desse tipo.

- Existem outros como Amazon Q Developer, Tabnine, Ghostwriter, etc.

## {.smaller}

Mas como o Copilot funciona?

- Ele pode ser visto como uma camada entre você e o programa que você está implementando.
- Em vez de escrever diretamente em Python, você descreve o que você quer em palavras e o Copilot gera o programa para você.
- Essas palavras que escrevemos é o que chamamos de **_prompt_**.

. . .

O "cérebro" por traz do Copilot é um programa de computador bacana que chamamos de LLM.

- LLM vem do inglês Large Language Model, ou Modelo de Linguagem de Larga Escala.
- Um LLM guarda informações sobre o relacionamento entre palavras
  - Incluindo quais palavras fazem sentido em certos contextos
  - E usa isso para prever a melhor sequência de palavras para responder um prompt.

## {.smaller}

Imagine por exemplo que você pergunte qual a próxima palavra deveria ver na frase:

- "A pessoa abriu a _____".

. . .

Há várias palavras que fariam sentido nesse contexto, como "porta", "caixa" ou "sessão".

- Já outras claramente não fariam sentido como: "o", "ele" ou "abrir".

. . . 

Um LLM leva em conta o contexto para completar a próxima palavra e vai fazendo isso, palavra a palavra,
  até chegar na resposta final.

- O LLM faz isso de maneira **não determinística**, o que significa que há uma certa aleatoriedade no processo.
- Assim, às vezes a frase poderia ser completada com "caixa" e outras vezes com "porta", por exemplo.

. . . 

Isso é importante pois significa que o Copilot pode gerar códigos diferentes cada vez que você pede que ele seja gerado.

## {.smaller}

Repare que em nenhum momento dissemos que o Copilot "entende" o que ele está fazendo.

- Ele simplesmente completa o código com aquilo que parece fazer mais sentido.
 
. . .

Assim, durante nossa jornada na disciplina,

- caberá a você conferir se o que está sendo gerado é realmente o que você precisa que seja feito

## {.smaller}

Funcionamento do Copilot:

- obs.: atualmente você pode escolher diferentes LLMs no Copilot, não só o GPT da OpenAI.

![](imagens/fig1-2_prompt_to_program.png){fig-align="center" fig-alt="Fluxograma mostrando a sequência de passos do prompt até o programa gerado." style="max-height: 60vh; width: auto;"}

## {.smaller}

Não seria mais prático se o Copilot gerasse código de máquina diretamente?

- Por que você acha que o usamos para gerar um código em uma linguagem de programação como Python?

. . .

A questão é que o Copilot cometerá erros

- E nós precisaremos encontrá-los e corrigi-los (mesmo que com a ajuda do próprio Copilot).
- É muito mais fácil fazer isso em uma linguagem de alto nível como Python do que em código de máquina.


## {.smaller}

O vídeo abaixo é bem interessante e explica de forma simples como funcionam os modelos LLM.

::: {.center}
<iframe width="560" height="315" src="https://www.youtube.com/embed/LPZh9BOjkQs" title="Modelos LLM explicados resumidamente" frameborder="0" allowfullscreen></iframe>
::: 

. . .

Fica a dica:

- Esse canal [3Blue1Brown](https://www.youtube.com/@3blue1brown) é muito bom.
- Explica diversos conceitos matemáticos de forma visual e intuitiva.

# O que um assistente de IA pode fazer {background-color="#40666e"}

## {.smaller}

Programadores, especialmente iniciantes, gastam muito tempo aprendendo a escrever código sintaticamente correto.

- Mesmo programadores mais experientes podem gastar muito tempo quando utilizam uma nova linguagem de programação 
ou mesmo uma nova biblioteca em uma linguagem que já conhecem.

. . .

Assistentes como o Copilot podem ajudar muito nesse aspecto.

- Pois quase sempre geram códigos que são sintaticamente corretos.
- Evitando que precisemos escrevê-los do zero.

. . .

Com isso, conseguimos criar softwares mais complexos em menos tempo e com menos frustrações.

## {.smaller}

Não ter que se preocupar com detalhes de sintaxe pode ser um grande fator de aumento de produtividade.

- Afinal de contas o que precisamos é resolver o problema do usuário final, independente dos detalhes de como o código precisa ser escrito.
- Mas não é só assim que o Copilot pode nos ajudar.

## {.smaller}

O Copilot, assim como outros assistentes de IA, também pode:

. . .

**Explicar códigos que já existem** 

- Isso é útil tanto quando temos que trabalhar em um código que não fomos nós que escrevemos.
- Como também quando queremos entender um código que foi gerado pelo próprio Copilot.

. . .

**Tornar código mais fácil de entender**

- Há diferentes formas de escrever um código que resolve a mesma tarefa.
- E algumas são mais fáceis de entender do que outras.
- Podemos então pedir ao Copilot para reorganizar o código de forma que ele fique mais fácil de entender.

## {.smaller}

O Copilot, assim como outros assistentes de IA, também pode:

**Encontrar e corrigir bugs**

- Como já foi mencionado o código gerado pelo Copilot pode não funcionar corretamente.
- Ou pode funcionar em quase todos os casos, mas falhar em alguns.
- Podemos então pedir ao Copilot para nos ajudar a encontrar e corrigir esses bugs.

. . .

**Explicar erros**

- As mensagens de erro geradas pelas linguagens de programação podem ser difíceis de entender.
- O Copilot pode nos ajudar a entender o que está acontecendo e como corrigir o erro.
- É útil passar para o Copilot não só a mensagem de erro, como também a pilha de execução.

## {.smaller}

O Copilot, assim como outros assistentes de IA, também pode:

**Encontrar bibliotecas que podem ser úteis**

- Muitas vezes não sabemos que bibliotecas existem ou como utilizá-las.
- O Copilot pode nos ajudar a encontrar bibliotecas que podem ser úteis para o nosso problema.
- E também pode nos ajudar a entender como utilizá-las.

. . .

**Melhorar o desempenho do código**

- O Copilot pode nos ajudar a identificar gargalos de desempenho no código.
- E sugerir melhorias para torná-lo mais eficiente.

## {.smaller}

Uma **dica** geral para utilizar assistentes de IA é:

- Interaja com o assistente de IA, fazendo ciclos de perguntas e feedbacks.

. . .

Você pode, por exemplo:

1. Pedir ao Copilot para gerar um código que resolva um problema específico.
2. Pedir que ele explique o código que fez.
3. Pedir que ele melhore o código, tornando-o mais fácil de entender.
4. Pedir que ele encontre e corrija bugs no código.
5. Se necessário, pedir para melhorar o desempenho depois de ter a solução funcionando.

# Riscos e desafios ao usar assistentes de IA {background-color="#40666e"}

## {.smaller}

Além de falar das vantagens, é importante também falar dos riscos e desafios ao usar assistentes de IA.

. . .

**_Copyright_**
  
- A quem pertence um código gerado por um assistente de IA?
- O assistente de IA é treinado a partir de códigos disponíveis na internet, então é possível que o código 
  gerado seja muito parecido com algum código existente.
- As ferramentas têm evoluído e muitas identificam a fonte quando o código gerado é muito parecido com algum código existente.
- Isso levanta questões sobre a propriedade intelectual e o uso ético de código gerado por IA.
- A tecnologia evoluiu muito rápido do que a legislação, então ainda teremos muito debate sobre o assunto.

## {.smaller}

**Educação**

- Os autores do livro fizeram testes com exercícios de disciplinas introdutórias de programação.
- De cara, o Copilot acertou 50% dos exercícios.
  - Com um pouco mais de contexto acertou 80%.
- É fato que a educação precisa mudar para lidar com essa nova realidade.
  - Em algumas escolas, o aluno pode usar assitentes de IA para fazer os exercícios.
  - Em outras, o uso é proibido em provas ou dependendo do curso (como Computação ou Sistemas).
  - Algumas treinararam LLMs específicos para dar apenas certos tipos de respostas.
- O fato é que ainda está muito cedo para dizer como LLM vai afetar a educação em computação.
  - Mas certas tendências já começaram a aparecer.

## {.smaller}

**Qualidade do código**

- É necessário ser bem cuidadoso e não confiar cegamente no código gerado por assistentes de IA.
  - Especialmente em códigos sensíveis ou que precisam ser especialmente seguros.
  - Imagine um código de um dispositivo médico ou de um carro autônomo, por exemplo.
- É fundamental criar uma estrutura de testes, independente do assistente de IA,
  - Para garantir que o código funciona corretamente.

## {.smaller}

**Segurança do código**

- Não há nenhuma garantia de segurança em código gerado por assistentes de IA.
- Trabalhar com dados de usuários, por exemplo, requer cuidados especiais.
- Devemos também tomar cuidado com dados que são enviados para os assistentes de IA.
  - Por exemplo, não enviar dados sensíveis ou confidenciais.
- Muitas empresas proíbam ou limitam a forma de uso das ferramentas de IA, devido a essas preocupações.

## {.smaller}

**Assistentes de IA não são especialistas (_experts_)**

- A grande diferença de um especialista não é o que ele sabe, mas o que ele sabe que não sabe :)
- Um especialista consegue dizer o quão confiante ele está sobre uma determinada solução.
  - E se não estiver confiante o suficiente, ele estuda até conhecer melhor o que ele não sabe.
- Assistentes de IA não têm essa capacidade.
  - Há casos de assistentes que geraram obituários de pessoas mortas ou que explicaram com um ábaco é mais rápido que um computador.
- As ferramentas estão evoluindo muito, mas ainda são muito autoconfiantes.
- Em resumo: tudo que um assistente de IA faz deve ser verificado por um humano.

## {.smaller}

**Viés**

- LLMs vão reproduzir os mesmos vieses que estão presentes nos dados com os quais foram treinados.
- Um LLM é treinada com mais literatura inglesa do que de outras culturas, por exemplo.
  - E isso acabará se refletindo nas respostas que ele gera.
- Há também o risco de reforçar estereótipos negativos.
- Na geração de código, é provável que ele gere códigos em um estilo que é mais comum em grupos que têm maior representatividade na comunidade de programação.
- Por outro lado, as próprias LLMs podem ajudar a quebrar esses vieses ao facilitar o acesso à programação para pessoas que não têm tanta representatividade na comunidade.

# As habilidades que precisamos usando Assistentes de IA {background-color="#40666e"}

## {.smaller}

Se o Copilot pode gerar código para nós, explicá-lo e corrigi-lo, não temos que fazer nada, certo?

- Errado!
- Assistentes de IA cometem erros.

. . . 

Além disso, não podemos passar uma tarefa gigantesca para o Copilot e esperar que ele resolva tudo.

- Exemplo: "Crie um novo jogo de videogame. Ah, e ele precisa ser divertido!"
- Isso não vai funcionar.
- Precisamos quebrar um problema grande em parte menores para os quais o Copilot possa nos ajudar.
  - E fazer essa [decomposição de problemas]{.alert} não é algo tão simples quanto possa parecer à primeira vista.

## {.smaller}

Uma tarefa que já existia e agora é ainda mais fundamental é: [testes]{.alert} de software.

- Desenvolvedores profissionais e empresas já tratam esse tipo de tarefa.
- Mas é importante saber que o tipo de erro que um assistente de IA pode cometer é diferente do tipo de erro que um humano pode cometer.
  - Pode acontecer de em 20 linhas de código, uma delas tenha um erro tão absurdo ou sutil, que não esperaríamos que ele pudesse acontecer.
- Assim, é importante criar uma boa estrutura de testes para garantir que o código funciona corretamente.

## {.smaller}

Outra habilidade essencial é [depuração]{.alert} de código.

- Depuração é o processo de encontrar e corrigir erros em um código.
- Quando nós mesmos escrevemos o código já costuma ser uma tarefa que consome tempo e exige paciência.
- Com assistentes de IA, a depuração pode ser ainda mais desafiadora.
  - Mesmo que possamos usar a própria IA para ajudar a corrigir
  - ainda assim precisamos entender o que está acontecendo para poder explicar para a IA o que está errado.

## {.smaller}

Por fim, há uma habilidade totalmente nova quando usamos assistentes de IA: [engenharia de prompt]{.alert}.

- Engenharia de prompt envolve **como** dizer para o Copilot o que ele tem que fazer.
- Nós podemos escrever as instruções em português, mas a forma como escrevemos essas instruções pode fazer muita diferença.
  - Precisamos ser bastante precisos sobre o que queremos.
- E mesmo sendo precisos pode ser que a resposta gerada não seja correta.
  - Nesse caso, precisamos primeiro ser capazes de identificar o que está errado
  - e depois sermos capazes de reformular o prompt para tentar obter uma resposta melhor.
- Às vezes um pequeno detalhe no prompt pode fazer muita diferença.

# As ferramentas que vamos usar {background-color="#40666e"}

## {.smaller}

Para fazer atividades da disciplina você precisa instalar

- VS Code
- Python
- Extensão de Python para VS Code (da Microsoft)
  - Você pode instalar digitando `Ctrl+P` no VS Code e digitando `ext install ms-python.python`.

# {.smaller}

O VS Code possui o conceito de pasta de trabalho (_working folder_).

- Assim, o ideal é que sempre crie uma pasta para cada projeto que desenvolver.
- E abra a pasta acessando `File` &rarr; `Open Folder`.

. . .

Para testar se a extensão está instalada corretamente, vamos:

- Criar um arquivo acessando a opção `File` &rarr; `New File`.
- Escolhendo a opção `Python File`.
- Salvando o arquivo com a extensão `.py` (acessando `File` &rarr; `Save As` e usando um nome como `aula.py`, por exemplo).
- Digitamos um código simples como `print("Meu primeiro programa!")`.
- E acessamos a opção `Run` (no canto superior direito).
- Se tudo estiver certo, veremos a saída do programa na parte inferior do VS Code.

## {.smaller}

Além disso, precisamos, claro, do GitHub Copilot.

- E, como estudante da UFLA, você tem direito à versão GitHub Copilot Pro.

. . .

Para ter acesso a ela você deve:

- Criar uma conta no GitHub, se ainda não tiver, acessando [github.com/](https://github.com/).
- Após logar, clique no ícone do seu usuário no canto superior direito e acesse a opção `Settings`.
- Na barra lateral esquerda, clique em `Billing and licensing` &rarr; `Education benefits`.
- Acesse a opção `Start an application`
  - Siga as instruções (você precisará fornecer um comprovante de matrícula).

## {.smaller}

Vamos agora testar o uso do GitHub Copilot no VS Code

- Você deve logar com seu usuário no painel do Copilot.

. . .

Em seguida, apague o conteúdo do arquivo Python e digite um comentário com a instrução abaixo.

```python
# exiba na tela: bora começar!
```

. . . 

Ao apertar ENTER, aguarde um pouco e o Copilot deve sugerir um código que atenda à sua solicitação.

- O código aparece esmaecido e em itálico.
- E você deve apertar TAB para aceitar a sugestão.

## {.smaller}

Você deverá então ver um código semelhante a este:

- Execute então seu programa para testá-lo.

```python
# exiba na tela: bora começar!
print("bora começar!")
```

. . .

Apareceu algo diferente para você?

- Lembre que o Copilot é não determinístico e pode gerar soluções diferentes de cada vez.
- Você pode tentar reformular o prompt para ver se obtém uma resposta diferente.

## {.smaller}

Vamos experimentar um programa que mais do que um simples print na tela.

. . .

Experimente criar um programa a partir do prompt abaixo.

- Não esqueça de testá-lo.

```python
# peça ao usuário o tamanho dos lados de um retângulo e exiba a área do retângulo
```

Dica: às vezes o Copilot continua o comentário da linha anterior em vez de gerar código.

- Se isso acontecer, você pode tentar apertar ENTER novamente.
- Ou então começar a digitar um código para que ele entenda que é para completar.

## {.smaller}

Nós podemos também conversar com o Copilot dentro do contexto de uma parte de código.

- Para alterar um trecho de código, por exemplo.

. . .

Experimente selecionar o código que você acabou de gerar e aperte `Ctrl+I`.

- Na caixa de diálogo que aparece peça ao Copilot para usar emojis na interação com o usuário, por exemplo.
- Depois de processar o prompt, o Copilot fará uma sugestão de alteração no código
  - Você pode aceitar a sugestão (o código será alterado).
  - Fechar a caixa de diálogo (o que vai ignorar a sugestão).
  - Ou você pode pedir outra sugestão (clicando no botão da terceira opção).

. . .

Que tal agora pedir para o Copilot conversar com o usuário em mineirês :)

# Demonstrando o uso do Copilot para Processamento de Dados {background-color="#40666e"}

## {.smaller}

Vamos agora fazer algo mais interessante.

- E que já dê uma ideia de como podemos usar o Copilot em tarefas de processamento de dados.

. . .

Nós vamos utilizar um conjunto de dados (_dataset_) da plataforma Kaggle.

- Uma plataforma de competição de ciência de dados e aprendizado de máquina.
- Que tem milhares de conjuntos de dados dos mais variados assuntos.

## {.smaller}

Vamos trabalhar com dados sobre futebol.

- Acesse a página do _dataset_ [All footeball player stats in top 5 leagues 23/24](https://www.kaggle.com/datasets/orkunaktas/all-football-players-stats-in-top-5-leagues-2324).
- São dados estatísticos dos jogadores das 5 principais ligas de futebol europeias.
- Na página há informações sobre os dados disponíveis e uma amostra dos dados.

. . .

Vamos baixar os dados para usar em nosso programa. Para isso:

- Clique em `Download` &rarr; `Download dataset as zip`.
  - Logue no Kaggle ou crie uma conta se não tiver (pode ser logando com a conta do Google).
- Descompacte o arquivo zip baixado.
- Copie o arquivo `top5-players.csv` para a pasta do seu projeto Python.

## {.smaller}

Vamos agora escrever um prompt para carregar os dados do arquivo em nosso programa.

- Crie um novo arquivo python ou apague o conteúdo do arquivo que você tinha criado.
- Em seguida digite o prompt abaixo e gere o código com o Copilot.

. . .

::: {.halfincfontsize}
```python
# abra o arquivo csv chamado "top5-players.csv" 
# e guarde os dados em uma variável
```
:::

. . .

Execute o programa: 

- ele não deve exibir nada, mas serve para testar se o código gerado funciona.

. . .

É possível que o Copilot tenha sugerido uma biblioteca mas não a tenha importado.

- Para corrigir isso, ou algum outro tipo de erro, você pode selecionar, clicar na lâmpada que aparece
  - E acessar a opção `fix` (consertar).

- Se ele sugeriu usar uma biblioteca que precisaria ser instalada você pode alterar o prompt
  - pedindo para usar apenas as bibliotecas padrões do python.
 

## {.smaller}

Nessa parte cada aluno pode estar vendo um código diferente:

- pois há várias bibliotecas no Python para lidar com arquivos CSV.
- E, como já sabemos, os assistentes de IA são não determinísticos.

## {.smaller}

Vamos agora trabalhar com os dados que foram carregados.

- A ideia é analisar as estatísticas dos jogadores brasileiros nas principais ligas de futebol.

. . .

Com o prompt abaixo vamos processar os dados para calcular a quantidade de gol feitos por
brasileiros em cada liga.

::: {.halfincfontsize}
```python
# a terceira coluna traz o nome do país do jogador, a sexta o nome da liga
# e a nona o número de gols feitos pelo jogador. Para cada liga some
# o número de gols feitos por jogadores brasileiros (o país é identificado
# como "br BRA")
```
:::
. . .

Em seguida, vamos exibir as informações calculadas ordenadas pelo número de gols feitos.

::: {.halfincfontsize}
```python
# exiba o nome da liga e o número de gols feitos por brasileiros em ordem
# descrescente de gols feitos
```
:::

. . .

Teste seu programa!

- Caso seja gerado algum erro, use o Copilot para ajudá-lo a corrigir.

## {.smaller}

Repare que fizemos o nosso programa com apenas três prompts.

- Uma para lidar com a entrada de dados.
- Outro para processá-los.
- E o último para exibir os dados.

. . .

Esse ciclo de entrada, processamento e saída é extremamente comum em programação.

## {.smaller}

Vamos agora usar o Copilot para alterar o código que havíamos gerado.

- Suponha que estamos interessados apenas nos gols dos jogadores jovens.

. . .

Apague o código gerado pelo segundo prompt que você tinha feito altere o prompt

- Informando a coluna que contém a idade e pedindo os dados apenas jogadores com menos de 23 anos.

. . .

::: {.halfincfontsize}
```python
# a terceira coluna traz o nome do país do jogador, a sexta o nome da liga,
# a sétima a idade do jogador e a nona o número de gols feitos pelo jogador. 
# Para cada liga some o número de gols feitos por jogadores brasileiros 
# (o país é identificado como "br BRA") e que tenham menos de 23 anos.
```
:::

Teste seu programa!

## {.smaller}

Você deve ter notado que os nomes das ligas começam com um identificador do país.

- `eng`, `es`, `it`, `fr` ou `de`.

. . . 

Vamos pedir ao Copilot para substituir esse identificador pelo nome do país.

- Para isso, apague o código gerado pelo terceiro prompt e acrescente as quatro linhas abaixo.

. . . 

::: {.halfincfontsize}
```python
# exiba o nome da liga e o número de gols feitos por brasileiros em ordem
# descrescente de gols feitos.
# O nome da liga tem primeiro duas ou três letras para identificar o país,
# seguido de um espaço e depois o nome da liga propriamente dito. Substitua
# essas duas letras pelo nome do país. Os países são:
# eng: Inglaterra, es: Espanha, it: Itália, fr: França e de: Alemanha
```
:::

. . .

Dica: 

- Se o copilot não gerar o código selecione o comentário, clique na lâmpada, 
 acesse `Modify` e digite `complete o código`.


