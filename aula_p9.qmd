---
title: Desenvolvendo Jogos
subtitle: PASIA - Aula P.9
---

##  

Os exercícios dessa aula são baseados no **capítulo 14** do livro:


![](imagens/livro_curso_intensivo_python.jpg){fig-align="center" fig-alt="Capa do livro de Curso Intensivo de Python." style="max-height: 50vh; width: auto;"}


##

Na aula passada conhecemos o módulo `pygame`, que é uma biblioteca para desenvolvimento de jogos em Python.

- E também vimos o básico de Programação Orientada a Objetos (POO) em Python.

. . .

Nesta aula vamos, com a ajuda do Copilot, terminar o desenvolvimento do jogo Invasão Alienígena.

##

::: {.callout-important}
# Observação importante

O jogo que desenvolvemos é baseado em um jogo clássico: _Space Invaders_.

Por isso, se você pedir ao Copilot para completar o jogo "de uma vez só" é bem
possível que ele consiga fazer isso, já que existem diversas implementações desse
jogo disponíveis na internet.

Mas, fazendo dessa forma, você não estará aproveitando nada dessa aula.

A ideia é incrementar o jogo passo a passo, conforme os slides a seguir.
E realmente tentar entender o que está sendo feito a cada passo.

:::

# Acrescentando botão `Jogar` {background-color="#40666e"}

##

:::: {.callout-note title="Tarefa 1.1 - Botão Jogar" icon=false, .nonincremental}
Adicione um botão `Jogar` que deve aparecer antes do jogo começar e reaparecer
quando o jogo terminar. Portanto, o jogo só deverá ficar ativo depois que o 
jogador clicar nesse botão.

Para isso, você deve criar uma classe `Botao` que poderia ser reaproveitada para
outros botões (inclusive em outros jogos).

Sua classe deve desenhar o botão na tela (e não utilizar uma imagem pronta). 
Para isso, ela precisará fazer uso, por exemplo, de `pygame.font`.

Neste passo você deve apenas criar a classe. No passo seguinte vamos utilizá-la.
::::

. . .

:::: {.callout-note title="Tarefa 1.2 - Desenhando o botão na tela" icon=false, .nonincremental}
O botão agora deve ser desenhado na tela no início do jogo.

Você precisará usar o atributo `self.jogo_ativo` da classe `InvasaoAlienigena`.

No próximo passo vamos tratar o clique no botão.
::::

##

:::: {.callout-note title="Tarefa 1.3 - Iniciando o jogo" icon=false, .nonincremental}
Vamos agora tratar o clique no botão. Para isso será necessário tratar um evento de mouse
(tipo `MOUSEBUTTONDOWN`).

Ao clicar no botão, o mesmo deve desaparecer e o jogo deve começar.
::::

. . .

:::: {.callout-note title="Tarefa 1.4 - Reiniciando o jogo" icon=false, .nonincremental}
Quando o jogo terminar (Game Over), o botão deve reaparecer e o jogador deve poder
clicar nele para reiniciar o jogo.

Lembre-se de reiniciar as estatísticas e todos os demais atributos necessários para
voltar ao estado inicial do jogo.
::::

##

:::: {.callout-note title="Tarefa 1.5 - Desativando o botão Play" icon=false, .nonincremental}
Dependendo de como foi feita sua implementação nos passos anteriores, pode
ser que o botão não esteja aparecendo quando o jogo está iniciado, mas que ele
continue lá, escondido, inclusive, respondendo a cliques.

Tente clicar na região onde o botão deveria estar e verifique se o jogo reinicia.
Se isso acontecer, faça o tratamento necessário para que o botão não responda
a cliques quando o jogo estiver ativo.
::::

##

:::: {.callout-note title="Tarefa 1.6 - Ocultando o cursor do mouse" icon=false, .nonincremental}
A experiência do usuário fica mais interessante se o cursor do mouse for
ocultado quando o jogo estiver ativo e reaparecer quando o jogo terminar.

Faça a alteração necessária para implementar esse comportamento. Você precisará
utilizar o método `pygame.mouse.set_visible()`.
::::
 

# Passando de nível {background-color="#40666e"}

##

:::: {.callout-note title="Tarefa 2.1 - Modificando as configurações de velocidade" icon=false, .nonincremental}

Cria na classe `Config` um atributo para definir o quanto a velocidade do jogo vai
aumentar a cada passagem de nível, ou seja, a rapidez com que o jogo vai ficar mais difícil.

O valor deve ser um número maior que 1.0. Por exemplo, se o valor for 1.1, a velocidade
do jogo vai aumentar em 10% a cada nível.

Crie um método na classe que aumenta a velocidade do jogo. Basicamente o método vai atualizar
o valor dos atributos de velocidade multiplicando-os pelo fator de aumento.
É interessante aumentar não só as velocidades dos aliens, mas também da nave do jogador
e dos projéteis.
::::

##

:::: {.callout-note title="Tarefa 2.2 - Passando de nível" icon=false, .nonincremental}
Na classe `InvasaoAlienigena`, implemente a passagem de nível.

Quando todos os alienígenas forem destruídos, a velocidade do jogo deve ser aumentada
(chamando o método que você criou na tarefa anterior).

Você deverá também ter um método na classe `config` que permita reiniciar a velocidade
do jogo para o valor inicial. Esse método deve ser chamado quando o jogador clicar no botão
`Jogar` para iniciar uma nova partida.
::::

# Pontuação {background-color="#40666e"}

##

:::: {.callout-note title="Tarefa 3.1 - Classe Placar" icon=false, .nonincremental}
Acrescente um atributo `pontuacao` na classe `Estatisticas` para armazenar a pontuação
do jogador. A princípio vamos iniciá-la com zero, mas ainda não vamos atualizá-la.

Crie uma classe para representar o placar do jogo. A classe deve ter uma referência para o 
objeto `Estatisticas` para poder acessar a pontuação atual do jogador.
Ela também deve ter um método para desenhar o placar na tela, no canto superior direito.

Obs.: é mais eficiente se a montagem do texto do placar for feita apenas quando a pontuação
for atualizada, e não a cada vez que o placar for desenhado na tela.
::::

##

:::: {.callout-note title="Tarefa 3.2 - Adicionando o placar na tela" icon=false, .nonincremental}
Neste passo você deve criar um objeto da classe `Placar` na classe `InvasaoAlienigena`
e utilizá-lo para desenhar o placar na tela.

Lembre-se que, por enquanto, a pontuação do jogador não está sendo atualizada.
::::

##

:::: {.callout-note title="Tarefa 3.3 - Atualizando a pontuação" icon=false, .nonincremental}
Agora você deve atualizar a pontuação do jogador quando um alienígena for destruído.

Primeiramente, crie um atributo na classe `Config` para definir quantos pontos o jogador ganha
por alienígena destruído. Você pode definir um valor padrão, por exemplo, 50 pontos.

Depois, na classe `InvasaoAlienigena`, você deve atualizar a pontuação do jogador
sempre que um alienígena for destruído. Lembre-se de atualizar o placar também.

Não se esqueça de voltar a pontuação para zero quando o jogador clicar no botão `Jogar` para iniciar
uma nova partida.
::::

##

:::: {.callout-note title="Tarefa 3.4 - Aumentando os valores dos pontos" icon=false, .nonincremental}
Como o jogo fica mais difícil a cada nível, é interessante que o valor dos pontos ganhos
por alienígena destruído também aumente a cada nível.

Para isso, vamos seguir a mesma ideia do aumento de velocidade do jogo. Vamos definir um 
fator de escala do aumento do valor dos pontos na classe `Config` e aplicar esse aumento
sempre que o jogador passar de nível.

Dica: arredonte o valor dos pontos para o múltiplo de 10 mais próximo.
::::

##

:::: {.callout-note title="Tarefa 3.5 - Garantindo que todos os ataques são pontuados" icon=false, .nonincremental}
Dependendo de como foi feita a implementação até aqui, pode ser que o jogador não ganhe pontos
se um projétil atingir mais de um alienígena ou se dois projéteis atingirem dois alienígenas ao mesmo tempo.

Você pode testar isso aumentando, temporariamente, a largura do projétil para que ele possa atingir
mais de um alienígena de uma só vez.

Faça as alterações necessárias para garantir que o jogador ganhe pontos
para cada alienígena destruído, independentemente de como isso aconteça.
::::

##

:::: {.callout-note title="Tarefa 3.6 - Tratando recordes" icon=false, .nonincremental}
O jogador ficará mais motivado se puder tentar superar o seu recorde.

Crie um atributo na classe `Estatisticas` para armazenar o recorde do jogador.
Esse atributo deve ser inicializado com zero e atualizado sempre que a pontuação
atual do jogador superar o recorde.

O recorde deve ser exibido na tela do jogo, abaixo da pontuação atual.
::::

##

:::: {.callout-note title="Tarefa 3.7 - Exibindo o nível" icon=false, .nonincremental}
Vamos agora exibir o nível atual do jogo na tela. O nível deve ser exibido abaixo do recorde.

Lembre-se de voltar ele para zero sempre que o jogo for reiniciado.
::::

# Exibindo as vidas do jogador {background-color="#40666e"}

##

:::: {.callout-note title="Tarefa 4.1 - Preparando a classe Nave" icon=false, .nonincremental}
Para exibir as vidas do jogador, vamos desenhar naves no canto superior esquerdo da tela.

Nós podemos utilizar a própria classe `Nave` para desenhar as vidas do jogador.
Isso pode ficar mais fácil se fizemos a classe `Nave` herdar de `Sprite` pois, como
vimos na aula anterior, isso permite trabalhar com grupos de sprites.

Neste passo, basta fazer a classe `Nave` herdar de `Sprite` e chamar o construtor da
superclasse dentro do construtor da classe `Nave`.
::::

##

:::: {.callout-note title="Tarefa 4.2 - Desenhando as vidas do jogador" icon=false, .nonincremental}
Altere a classe `Placar` para que ela tenha um grupo de sprites para representar as vidas do jogador.
O número de sprites nesse grupo deve ser igual ao número de vidas do jogador, que pode ser
acessado através do atributo `vidas_restantes` da classe `Estatisticas`.
O grupo de sprites deve ser atualizado sempre que o número de vidas do jogador mudar.

O grupo de sprites deve ser desenhado no canto superior esquerdo da tela.
::::

# Deixando o jogo com o seu estilo {background-color="#40666e"}

##

:::: {.callout-note title="Tarefa 5.1 - Personalizando o jogo" icon=false, .nonincremental}
Agora que o jogo está funcionando, você pode personalizá-lo para deixá-lo com a sua cara.

Você pode, por exemplo, alterar as imagens da nave, dos alienígenas e usar imagens para os projéteis.

Para isso, procure imagens na internet (ex.: site [Kenney.nl](https://kenney.nl/assets)) ou crie as suas próprias imagens.
:::: 

# Dicas para interessados em jogos {background-color="#40666e"}

## Exemplos dentro do pygame

Para quem tiver interesse em jogos, o `pygame` tem diversos exemplos de jogos e de implementações relacionadas a jogos.

. . .

Para ver algum desses exemplos, você pode aproveitar o ambiente virtual que criamos para o jogo Invasão Alienígena,
e executar os comandos abaixo no terminal (assumindo que seu ambiente virtual esteja ativado e se chame
`venv`):

```bash
venv/bin/python -m pygame.examples.aliens
venv/bin/python -m pygame.examples.chimp
venv/bin/python -m pygame.examples.chimp
```

. . .

Os códigos desses exemplos estão disponíveis no repositório do `pygame` no [GitHub](https://github.com/pygame/pygame/tree/main/examples).

## Materiais na internet

Existem diversos materiais disponíveis na internet para quem quiser aprender mais sobre o `pygame`.

-  Como tutoriais, vídeos no Youtube, livros, etc.

. . .

Uma dica importante é que o `pygame` é muito antigo, e muitos desses materiais são antigos também.

- E acabam dando dicas de como fazer coisas que hoje em dia podem ser feitas de forma mais simples.

## Guia inicial e Livro

Sugiro a leitura do artigo [A Newbie Guide to pygame](https://www.pygame.org/docs/tut/newbieguide.html) 
(Um guia para iniciantes no PyGame).

- Inclusive, foi de lá tirei a dica de usar o método `convert()` para otimizar o desempenho do jogo.
- E também a dica de tomar cuidado com materiais antigos.

. . .

Para quem quiser se aprofundar mais, o livro [Making Games with Python & Pygame](https://inventwithpython.com/pygame/)
está disponível gratuitamente no site do autor (você pode ler online ou baixar o PDF).

## Game Programming Patterns

Para quem estiver interessado em conceitos mais avançados, a dica é o livro [Game Programming Patterns](https://gameprogrammingpatterns.com/).

- A versão web do livro também está disponível gratuitamente no site do autor.
