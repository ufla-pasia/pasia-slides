---
title: Desenvolvendo Jogos e POO
subtitle: PASIA - Aula T.9
---

##  

O conte√∫do dessa aula √© baseado nos **cap√≠tulos 9, 12 e 13** do livro:


![](imagens/livro_curso_intensivo_python.jpg){fig-align="center" fig-alt="Capa do livro de Curso Intensivo de Python." style="max-height: 50vh; width: auto;"}

##

Nessa aula n√≥s vamos [desenvolver um jogo]{.alert} usando a biblioteca `pygame`.

- Para desenvolver o jogo usaremos conceitos de POO: [Programa√ß√£o Orientada a Objetos]{.alert}.

. . .

Usaremos POO porque um jogo √© um projeto bem mais complexo do que os
exemplos que vimos na disciplina at√© agora.

- Em vez de apresentar como se implementa OO em Python e depois desenvolver o jogo,
- vamos aprender a usar OO √† medida que o jogo √© desenvolvido.

# Ideias sobre o formato da aula {background-color="#40666e"}

##

Ao preparar a aula, estudei os cap√≠tulos do livro.

- E tamb√©m experimentei usar um Assistente de IA em modo interativo.

. . .

Testei primeiro com o Copilot e depois com o ChatGPT.

- Apresento a seguir um resumo dessas tentativas.

## Experimentando com Copilot com GPT 4.1 no modo Ask

::: {.callout-caution title="Prompt" icon="false"}
Gostaria de iniciar uma sess√£o interativa para aprender a usar a biblioteca pygame para desenvolver um jogo 2D em Python. Nesta se√ß√£o considere que conhe√ßo o b√°sico de Python, mas nunca utilizei Orienta√ß√£o a Objetos nessa linguagem (eu aprendi usando Java). Gostaria que o jogo fosse constru√≠do um passo de cada vez, de forma bem did√°tica. O jogo se chamar√° Invas√£o Alien√≠gena. O jogador controlar√° uma nave que ficar√° na parte inferior da tela e poder√° se movimentar da direita para a esquerda. A nave consegue atirar. Os inimigos s√£o naves alien√≠genas que aparecem no topo da tela e se movimentam lateralmente, hora para esquerda, hora para a direita e tamb√©m se movimentam verticalmente, descendo em dire√ß√£o √† nave do jogador. Se as nave alien√≠genas atingirem a nave do jogador, o jogo termina. Se o tiro da nave do jogador atinge uma nave alien√≠gena, ela √© eliminada.
:::

##


O copilot rodou com `@workspace`, gerando uma estrutura de projeto com o jogo j√° "pronto" e sem nenhuma intera√ß√£o.

- Mas o projeto tinha v√°rios erros.

. . .

Cliquei em `Rerun without`

- A√≠ sim, o jogo come√ßou a ser gerado em um processo interativo.
- E eu podia direcionar a sequ√™ncia da conversa pedindo mais ou menos detalhes.
- Mas percebi que o resultado n√£o era t√£o bom quanto os cap√≠tulos de livro
  - Muita coisa era feita de forma direta, sem uma explica√ß√£o clara.

## Experimentando com ChatGPT

Experimentei o mesmo prompt no ChatGPT (veja [aqui](https://chatgpt.com/share/68e1078b-4544-800e-a468-29bfe8b4b34b)).

- O resultado foi mais interessante que usando o Copilot.
- As partes do c√≥digo que eram criadas eram explicadas em mais detalhes.
- Apesar de ter alguns erros em exemplos (de Java) de vez em quando.
- Foram tamb√©m legais as sugest√µes de onde conseguir imagens.

##

Mas, no geral, o material do livro era realmente bem mais did√°tico.

- E usava constru√ß√µes / funcionalidades importantes do pygame.
- que eram ignoradas nas sess√µes com Assitentes de AI.

. . .

Decidi ent√£o basear a aula nos cap√≠tulos do livro.

- E, na Aula Pr√°tica, a ideia √© que voc√™s incrementem o jogo com ajuda do Copilot.

# Invas√£o Alien√≠gena {background-color="#40666e"}

## Planejando seu projeto

Import√¢ncia de definir bem o que se quer desenvolver antes de sair fazendo.

## Instalando PyGame

Pygame n√£o √© um m√≥dulo _built-in_, portanto, precisa ser instalado.

## Iniciando o Projeto do Jogo

```{.python filename="invasao_alien.py"}
import sys

import pygame

class InvasaoAlien:
    """Classe geral para gerenciar ativos e comportamento do jogo."""

    def __init__(self):
        """Inicializa o jogo e cria os recursos do jogo."""
        pygame.init()                                      # <1>

        self.tela = pygame.display.set_mode((1200, 800))   # <2>
        pygame.display.set_caption("Invas√£o Alien√≠gena")
        
    def executar_jogo(self):
        """Inicia o loop principal do jogo."""
        while True:                                        # <3>
            # Observa eventos de teclado e mouse.
            for evento in pygame.event.get():              # <4>
                if evento.type == pygame.QUIT:             # <5>
                    sys.exit()

            pygame.display.flip()                          # <6>

if __name__ == '__main__':
    ai = InvasaoAlien()                                   
    ai.executar_jogo()                                    
```

1. Inicializa as configura√ß√µes de background.
2. Cria uma janela para exibi√ß√£o (_Surface_).
3. Loop de jogo.
4. Loop dos eventos detectados desde a √∫ltima itera√ß√£o.
5. Evento gerado quando o jogador clica no bot√£o de fechar a janela.
6. Atualiza o desenho na tela (_double buffer_).
:::

## Classes em Python

## Controlando o _frame rate_

```{.python filename="invasao_alien.py"}
    def __init__(self):
        """Inicializa o jogo e cria os recursos do jogo."""
        pygame.init()
        self.clock = pygame.time.Clock()
        # -- trecho de c√≥digo omitido -- 
        
    def executar_jogo(self):
        """Inicia o loop principal do jogo."""
        while True:
            # -- trecho de c√≥digo omitido -- 
            pygame.display.flip()
            self.clock.tick(60)  # Limita a 60 quadros por segundo                                 
```

## Definindo a cor de fundo

```{.python filename="invasao_alien.py"}
    def __init__(self):
        # -- trecho de c√≥digo omitido -- 
        pygame.display.set_caption("Invas√£o Alien√≠gena")

        # Define a cor de fundo
        self.cor_fundo = (230, 230, 230)
        
    def executar_jogo(self):
        """Inicia o loop principal do jogo."""
        while True:
            # Observa eventos de teclado e mouse.
            for evento in pygame.event.get():
                if evento.type == pygame.QUIT:
                    sys.exit()
            
            # Redesenha a tela a cada passagem pelo loop.
            self.tela.fill(self.cor_fundo)

            pygame.display.flip()
            self.clock.tick(60)  # Limita a 60 quadros por segundo
```

## Criando uma classe Settings

```{.python filename="config.py"}
class Settings:
    """ Classe para armazenar as configura√ß√µes do jogo Invas√£o Alien√≠gena. """

    def __init__(self):
        """ Inicializa as configura√ß√µes do jogo. """
        # Configura√ß√µes da tela
        self.largura_tela = 1200
        self.altura_tela = 800
        self.cor_fundo = (230, 230, 230)  # Cor de fundo cinza claro
```

##

```{.python filename="invasao_alien.py"}
import sys

import pygame

from config import Config

class InvasaoAlien:
    """Classe geral para gerenciar ativos e comportamento do jogo."""

    def __init__(self):
        """Inicializa o jogo e cria os recursos do jogo."""
        pygame.init()
        self.clock = pygame.time.Clock()
        self.config = Config()

        self.tela = pygame.display.set_mode(
            (self.config.largura_tela, self.config.altura_tela))
        pygame.display.set_caption("Invas√£o Alien√≠gena")
        
    def executar_jogo(self):
            # -- trecho de c√≥digo omitido -- 
            
            # Redesenha a tela a cada passagem pelo loop.
            self.tela.fill(self.config.cor_fundo)

            pygame.display.flip()
            self.clock.tick(60)  # Limita a 60 quadros por segundo
```

# Criando uma nave {background-color="#40666e"}

## üåê Sites de Sprites Gratuitos

::: {.callout-note title="ChatGPT" icon="false" .nonincremental .smaller}
1. OpenGameArt.org üîó https://opengameart.org

- Gigante reposit√≥rio de sprites gratuitos.
- Muitos j√° v√™m em pixel art ou estilo retr√¥ arcade.

2. Itch.io ‚Äì Asset Packs gratuitos üîó https://itch.io/game-assets/free

- Packs de sprites feitos por artistas independentes.
- Muitos permitem uso em jogos comerciais.

3. Kenney.nl üîó https://kenney.nl/assets

- Sprites profissionais e organizados.
- Tudo em CC0 (sem restri√ß√£o de uso).
:::

##

::: {.callout-note title="ChatGPT" icon="false" .nonincremental .smaller}
4. CraftPix.net (Freebies) üîó https://craftpix.net/freebies/

- Arte mais elaborada.
- Tem alguns pacotes gratuitos, mas muitos s√£o pagos.

5. Google + Filtros de Licen√ßa üîó V√° em Google Images

- Em Ferramentas > Direitos de uso, filtre por Creative Commons.
- Assim evita problemas de copyright.
:::

## Criando a classe Nave


```{.python filename="nave.py"}
import pygame

class Nave:
    """ Classe para cuidar da nave do jogador """

    def __init__(self, jogo):
        """ Inicializa a nave e define sua posi√ß√£o inicial. """
        self.tela = jogo.tela
        self.ret_tela = jogo.tela.get_rect()

        # Sobe a imagem da nave e obt√©m seu ret√¢ngulo.
        # M√©todo convert √© importante para melhorar desempenho!
        self.imagem = pygame.image.load('imagens/nave.png').convert()
        self.ret = self.imagem.get_rect()

        # Come√ßa cada nave nova no centro inferior da tela.
        self.ret.midbottom = self.ret_tela.midbottom

    def desenhar(self):
        """ Desenha a nave em sua posi√ß√£o atual. """
        self.tela.blit(self.imagem, self.ret)
```

## Desenhando a nave na tela

```{.python filename="invasao_alien.py"}
from config import Config
from nave import Nave

class InvasaoAlien:
    """Classe geral para gerenciar ativos e comportamento do jogo."""

    def __init__(self):
        # -- trecho de c√≥digo omitido -- 
        pygame.display.set_caption("Invas√£o Alien√≠gena")

        self.nave = Nave(self)
        
    def executar_jogo(self):
            # -- trecho de c√≥digo omitido -- 
            # Redesenha a tela a cada passagem pelo loop.
            self.tela.fill(self.config.cor_fundo)
            self.nave.desenhar()
```

## Refatora√ß√£o: m√©todo `_verificar_eventos()` e `_atualizar_tela()`

```{.python filename="invasao_alien.py"}
    def executar_jogo(self):
        """Inicia o loop principal do jogo."""
        while True:
            self._verificar_eventos()
            self._atualizar_tela()
            self.clock.tick(60)
    
    def _verificar_eventos(self):
        """Responde a eventos de teclado e mouse."""
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                sys.exit()
    
    def _atualizar_tela(self):
        """Desenha a nova imagem da tela do jogo e a utiliza na tela."""
        self.tela.fill(self.config.cor_fundo)
        self.nave.desenhar()
        
        pygame.display.flip()
```

## Pilotando a nave

```{.python filename="invasao_alien.py"}
    def _verificar_eventos(self):
        """Responde a eventos de teclado e mouse."""
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                sys.exit()
            elif evento.type == pygame.KEYDOWN:
                if evento.key == pygame.K_RIGHT:
                    self.nave.ret.x += 1
```

## Movimento cont√≠nuo

```{.python filename="nave.py"}
    def __init__(self, jogo):
        # -- trecho de c√≥digo omitido --

        # Come√ßa cada nave nova no centro inferior da tela.
        self.ret.midbottom = self.ret_tela.midbottom

        # Flag de movimento; come√ßa com uma nave que n√£o est√° se movendo.
        self.movendo_direita = False
    
    def atualizar(self):
        """ Atualiza a posi√ß√£o da nave com base na flag de movimento. """
        if self.movendo_direita:
            self.ret.x += 1
```

##

```{.python filename="invasao_alien.py"}
    def executar_jogo(self):
        """Inicia o loop principal do jogo."""
        while True:
            self._verificar_eventos()
            self.nave.atualizar()
            self._atualizar_tela()
            self.clock.tick(60)
    
    def _verificar_eventos(self):
        """Responde a eventos de teclado e mouse."""
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                sys.exit()
            elif evento.type == pygame.KEYDOWN:
                if evento.key == pygame.K_RIGHT:
                    self.nave.movendo_direita = True
            elif evento.type == pygame.KEYUP:
                if evento.key == pygame.K_RIGHT:
                    self.nave.movendo_direita = False
```

## Movendo nas duas dire√ß√µes

```{.python filename="nave.py"}
    def __init__(self, jogo):
        # -- trecho de c√≥digo omitido --

        # Flags de movimento; come√ßa com uma nave que n√£o est√° se movendo.
        self.movendo_direita = False
        self.movendo_esquerda = False
    
    def atualizar(self):
        """ Atualiza a posi√ß√£o da nave com base nas flags de movimento. """
        if self.movendo_direita:
            self.ret.x += 1
        if self.movendo_esquerda:
            self.ret.x -= 1
```

##

```{.python filename="invasao_alien.py"}
    def _verificar_eventos(self):
            # -- trecho de c√≥digo omitido --  
            elif evento.type == pygame.KEYDOWN:
                if evento.key == pygame.K_LEFT:
                    self.nave.movendo_esquerda = True
            elif evento.type == pygame.KEYUP:
                if evento.key == pygame.K_LEFT:
                    self.nave.movendo_esquerda = False
```

## Ajustando a velocidade da nave

```{.python filename="config.py"}
    def __init__(self):
        # -- trecho de c√≥digo omitido --

        # Configura√ß√µes da nave
        self.velocidade_nave = 10.0
```

Ajuste a velocidade testando o jogo.

##

```{.python filename="nave.py"}
    def __init__(self, jogo):
        """ Inicializa a nave e define sua posi√ß√£o inicial. """
        self.tela = jogo.tela
        self.ret_tela = jogo.tela.get_rect()
        self.config = jogo.config
        
        # -- trecho de c√≥digo omitido --

        # Armazena um float para guardar a posi√ß√£o horizontal exata da nave
        self.x = float(self.ret.x)
    
    def atualizar(self):
        """ Atualiza a posi√ß√£o da nave com base nas flags de movimento. """
        if self.movendo_direita:
            self.x += self.config.velocidade_nave
        if self.movendo_esquerda:
            self.x -= self.config.velocidade_nave
        
        self.ret.x = int(self.x)
```

## Restringindo o alcance da Nave

```{.python filename="nave.py"}
    def atualizar(self):
        """ Atualiza a posi√ß√£o da nave com base nas flags de movimento. """
        if self.movendo_direita and self.ret.right < self.ret_tela.right:
            self.x += self.config.velocidade_nave
        if self.movendo_esquerda and self.ret.left > 0:
            self.x -= self.config.velocidade_nave
        
        self.ret.x = int(self.x)
```

## Refatorando o m√©todo `_verificar_eventos()`

```{.python filename="invasao_alien.py"}
    def _verificar_eventos(self):
        """Responde a eventos de teclado e mouse."""
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                sys.exit()
            elif evento.type == pygame.KEYDOWN:
                self._verificar_eventos_tecla_pressionada(evento)
            elif evento.type == pygame.KEYUP:
                self._verificar_eventos_tecla_liberada(evento)
    
    def _verificar_eventos_tecla_pressionada(self, evento):
        """ Responde a teclas pressioandas"""
        if evento.key == pygame.K_RIGHT:
            self.nave.movendo_direita = True
        elif evento.key == pygame.K_LEFT:
            self.nave.movendo_esquerda = True
    
    def _verificar_eventos_tecla_liberada(self, evento):
        """ Responde a teclas liberadas"""
        if evento.key == pygame.K_LEFT:
            self.nave.movendo_esquerda = False
        elif evento.key == pygame.K_RIGHT:
            self.nave.movendo_direita = False
```

# Modo Tela Cheia {background-color="#40666e"}

## Fechar o jogo com a tecla `q`

```{.python filename="invasao_alien.py"}
    def _verificar_eventos_tecla_pressionada(self, evento):
        """ Responde a teclas pressioandas"""
        if evento.key == pygame.K_RIGHT:
            self.nave.movendo_direita = True
        elif evento.key == pygame.K_LEFT:
            self.nave.movendo_esquerda = True
        elif evento.key == pygame.K_q:
            sys.exit()
```

## Executando o jogo em modo Tela Cheia

```{.python filename="invasao_alien.py"}
    def __init__(self):
        """Inicializa o jogo e cria os recursos do jogo."""
        pygame.init()
        self.clock = pygame.time.Clock()
        self.config = Config()

        self.tela = pygame.display.set_mode((0,0), pygame.FULLSCREEN)
        self.config.largura_tela = self.tela.get_rect().width
        self.config.altura_tela = self.tela.get_rect().height
        pygame.display.set_caption("Invas√£o Alien√≠gena")
```

- Agora a largura e altura do jogo n√£o √© pr√©-definida.
- Provavelmente pode ser interessante mudar a velocidade da nave.

. . .

::: {.callout-warning} 
Se n√£o tiv√©ssemos tratado a tecla `q` para sair do jogo, n√£o ter√≠amos uma forma
de sair do jogo no modo tela cheia.
:::

##

Nessa demonstra√ß√£o vamos ficar no modo janela mesmo.

- Devido ao tamanho das imagens e como foi planejada a inclus√£o de alien√≠genas.

# Atirando {background-color="#40666e"}

## Configura√ß√£o dos proj√©teis

```{.python filename="config.py"}
    def __init__(self):
        # -- trecho de c√≥digo omitido --

        # Configura√ß√µes dos proj√©teis
        self.velocidade_projetil = 15.0
        self.largura_projetil = 3
        self.altura_projetil = 15
        self.cor_projetil = (60, 60, 60)  # Cor cinza escuro
```

## Classe Projetil

```{.python filename="projetil.py"}
import pygame
from pygame.sprite import Sprite

class Projetil(Sprite):
    """ Classe para gerenciar proj√©teis disparados pela nave. """

    def __init__(self, ai_game):
        """ Cria um objeto de proj√©til na posi√ß√£o atual da nave. """
        super().__init__()
        self.tela = ai_game.tela
        self.config = ai_game.config
        self.cor = self.config.cor_projetil

        # Cria um proj√©til na posi√ß√£o (0,0) e depois define a posi√ß√£o correta.
        self.ret = pygame.Rect(0, 0, self.config.largura_projetil,
            self.config.altura_projetil)
        self.ret.midtop = ai_game.nave.ret.midtop

        # Guarda a posi√ß√£o do proj√©til como um float.
        self.y = float(self.ret.y)

    def update(self):
        """ Move o proj√©til para cima na tela. 
            Exemplo de sobrescrita de m√©todo.
            √ötil para usarmos em um grupo de sprites.
        """
        # Atualiza a posi√ß√£o exata do proj√©til.
        self.y -= self.config.velocidade_projetil
        # Atualiza a posi√ß√£o do ret√¢ngulo.
        self.ret.y = self.y

    def desenhar(self):
        """ Desenha o proj√©til na tela. """
        pygame.draw.rect(self.tela, self.cor, self.ret)
```

## Heran√ßa em Python


## Grupos de proj√©teis

```{.python filename="invasao_alien.py"}
from nave import Nave
from projetil import Projetil

class InvasaoAlien:

    def __init__(self):
        # -- trecho de c√≥digo omitido --

        self.nave = Nave(self)
        self.projeteis = pygame.sprite.Group()
        
    def executar_jogo(self):
        """Inicia o loop principal do jogo."""
        while True:
            self._verificar_eventos()
            self.nave.atualizar()
            self.projeteis.update()
            self._atualizar_tela()
            self.clock.tick(60)
```

## Disparando proj√©teis

```{.python filename="invasao_alien.py"}
    def _verificar_eventos_tecla_pressionada(self, evento):
        # -- trecho de c√≥digo omitido --
        elif evento.key == pygame.K_q:
            sys.exit()
        elif evento.key == pygame.K_SPACE:
            self._disparar_projetil()
    
    def _verificar_eventos_tecla_liberada(self, evento):
        # -- trecho de c√≥digo omitido --

    def _disparar_projetil(self):
        """ Cria um novo proj√©til e o adiciona ao grupo de proj√©teis. """
        novo_projetil = Projetil(self)
        self.projeteis.add(novo_projetil)
    
    def _atualizar_tela(self):
        """Desenha a nova imagem da tela do jogo e a utiliza na tela."""
        self.tela.fill(self.config.cor_fundo)
        for projetil in self.projeteis.sprites():
            projetil.desenhar()
        self.nave.desenhar()
        
        pygame.display.flip()
```

## Apagando proj√©teis fora da tela

```{.python filename="invasao_alien.py"}
    def executar_jogo(self):
        """Inicia o loop principal do jogo."""
        while True:
            self._verificar_eventos()
            self.nave.atualizar()
            self.projeteis.update()

            # Descarta os proj√©teis que desapareceram
            for projetil in self.projeteis.copy():
                if projetil.ret.bottom <= 0:
                    self.projeteis.remove(projetil)
            print(len(self.projeteis)) # REMOVER DEPOIS DE TESTAR!

            self._atualizar_tela()
            self.clock.tick(60)
```

## Limitando o n√∫mero de proj√©teis

```{.python filename="config.py"}
    def __init__(self):
        # -- trecho de c√≥digo omitido --
        self.cor_projetil = (60, 60, 60)  # Cor cinza escuro
        self.max_projeteis = 5
```

```{.python filename="invasao_alien.py"}
    def _disparar_projetil(self):
        """ Cria um novo proj√©til e o adiciona ao grupo de proj√©teis. """
        if len(self.projeteis) < self.config.max_projeteis:
            novo_projetil = Projetil(self)
            self.projeteis.add(novo_projetil)
```

## Criando o m√©todo atualizar proj√©teis

```{.python filename="invasao_alien.py"}
    def executar_jogo(self):
        """Inicia o loop principal do jogo."""
        while True:
            self._verificar_eventos()
            self.nave.atualizar()
            self._atualizar_projeteis()
            self._atualizar_tela()
            self.clock.tick(60)
    
    # -- trecho de c√≥digo omitido --

    def _atualizar_projeteis(self):
        """ Atualiza a posi√ß√£o dos proj√©teis e descarta os proj√©teis antigos. """
        self.projeteis.update()

        # Livra-se dos proj√©teis que desapareceram.
        for projetil in self.projeteis.copy():
            if projetil.ret.bottom <= 0:
                self.projeteis.remove(projetil)
```

# Alien√≠genas {background-color="#40666e"}

## Criando a classe Alien

```{.python filename="alien.py"}
import pygame

from pygame.sprite import Sprite


class Alien(Sprite):
    """ Classe para representar um √∫nico alien de um esquadr√£o. """

    def __init__(self, ai_game):
        """ Inicializa o alien e define sua posi√ß√£o inicial. """
        super().__init__()
        self.tela = ai_game.tela

        # Carrega a imagem do alien e define seu atributo retangulo.
        # ATEN√á√ÉO: aqui precisamos usar os nomes image e rect, pois
        # s√£o esses nomes que o Pygame espera e usa internamente.
        self.image = pygame.image.load('imagens/alien.png')
        self.rect = self.image.get_rect()

        # Come√ßa cada novo alien pr√≥ximo ao canto superior esquerdo da tela.
        # Considera um espa√ßo a partir da borda, do tamanho do ret√¢ngulo.
        self.rect.x = self.rect.width
        self.rect.y = self.rect.height

        # Armazena a posi√ß√£o horizontal exata do alien.
        self.x = float(self.rect.x)
```

## Criando uma inst√¢ncia do alien√≠gena

```{.python filename="invasao_alien.py"}
from projetil import Projetil
from alien import Alien

class InvasaoAlien:
    """Classe geral para gerenciar ativos e comportamento do jogo."""

    def __init__(self):
        # -- trecho de c√≥digo omitido --

        self.nave = Nave(self)
        self.projeteis = pygame.sprite.Group()
        self.aliens = pygame.sprite.Group()

        self._criar_esquadr√£o()

    def _criar_esquadr√£o(self):
        """Cria um esquadr√£o completo de aliens."""
        # por enquanto vamos criar apenas um alien
        alien = Alien(self)
        self.aliens.add(alien)
    
    def _atualizar_tela(self):
        # -- trecho de c√≥digo omitido --
        self.nave.desenhar()
        # ATEN√á√ÉO: para que todos os aliens sejam desenhados automaticamente
        # ele deve ter atributos chamados image e rect
        self.aliens.draw(self.tela)
        
        pygame.display.flip()
```

## Criando uma fileira de alien√≠genas

```{.python filename="invasao_alien.py"}
    def _criar_esquadr√£o(self):
        """Cria um esquadr√£o completo de aliens."""
        # Cria um alien√≠gena e continua criando aliens at√© que n√£o haja mais espa√ßo.
        # O distanciamento entre os aliens √© a largura de um alien.
        alien = Alien(self)
        largura_alien = alien.rect.width

        x_atual = largura_alien
        while x_atual < (self.config.largura_tela - 2 * largura_alien):
            self._criar_alien(x_atual)
            x_atual += 2 * largura_alien

    def _criar_alien(self, posicao_x):
        """ Cria um alien e coloca-o no esquadr√£o. """
        novo_alien = Alien(self)
        novo_alien.x = posicao_x
        novo_alien.rect.x = posicao_x
        self.aliens.add(novo_alien)
```

## Adicionando fileiras

```{.python filename="invasao_alien.py"}
    def _criar_esquadr√£o(self):
        """Cria um esquadr√£o completo de aliens."""
        # Cria um alien√≠gena e continua criando aliens at√© que n√£o haja mais espa√ßo.
        # O distanciamento entre os aliens √© a largura de um alien.
        alien = Alien(self)
        largura_alien, altura_alien = alien.rect.size

        x_atual, y_atual = largura_alien, altura_alien
        while y_atual < (self.config.altura_tela - 5 * altura_alien):            
            while x_atual < (self.config.largura_tela - 2 * largura_alien):
                self._criar_alien(x_atual, y_atual)
                x_atual += 2 * largura_alien

            x_atual = largura_alien
            y_atual += 2 * altura_alien
```

# Movendo o esquadr√£o {background-color="#40666e"}

## Movendo os alien√≠genas para a direita

```{.python filename="config.py"}
    def __init__(self):
        # -- trecho de c√≥digo omitido --

        # Configura√ß√µes dos aliens
        self.velocidade_alien = 1.0
```

. . .

```{.python filename="alien.py"}
    def __init__(self, ai_game):
        """ Inicializa o alien e define sua posi√ß√£o inicial. """
        super().__init__()
        self.tela = ai_game.tela
        self.config = ai_game.config

        # -- trecho de c√≥digo omitido --

    def update(self):
        """ Move o alien para a direita. """
        self.x += self.config.velocidade_alien
        self.rect.x = self.x
```

##

```{.python filename="invasao_alien.py"}
    def executar_jogo(self):
        """Inicia o loop principal do jogo."""
        while True:
            self._verificar_eventos()
            self.nave.atualizar()
            self._atualizar_projeteis()
            self._atualizar_aliens()
            self._atualizar_tela()
            self.clock.tick(60)

    def _atualizar_aliens(self):
        """Atualiza as posi√ß√µes de todos os aliens do esquadr√£o."""
        self.aliens.update()
```

## Configurando descida e mudan√ßa de dire√ß√£o

```{.python filename="config.py"}
    def __init__(self):
        # -- trecho de c√≥digo omitido --

        # Configura√ß√µes dos aliens
        self.velocidade_alien = 1.0
        self.velocidade_descida_esquadrao = 10.0
        self.direcao_esquadrao = 1  # 1 representa a direita; -1 representa a esquerda
```

## Tratando dire√ß√£o e criando m√©todo para verificar borda

```{.python filename="alien.py"}
    def update(self):
        """ Move o alien para a direita ou para a esquerda. """
        self.x += self.config.velocidade_alien * self.config.direcao_esquadrao
        self.rect.x = self.x
    
    def verificar_borda(self):
        """ Retorna True se o alien estiver na borda da tela. """
        ret_tela = self.tela.get_rect()
        return self.rect.right >= ret_tela.right or self.rect.left <= 0
```

## Fazendo a frota descer e mudar de dire√ß√£o

```{.python filename="invasao_alien.py"}
    def _atualizar_aliens(self):
        """ Verifica se o esquadr√£o est√° na borda e atualiza as posi√ß√µes dos aliens. """
        self._verificar_bordas_esquadrao()
        self.aliens.update()

    def _verificar_bordas_esquadrao(self):
        """ Faz o esquadr√£o descer se um dos aliens atingiu uma borda. """
        for alien in self.aliens.sprites():
            if alien.verificar_borda():
                self._descer_esquadrao()
                break
    
    def _descer_esquadrao(self):
        """ Desce o esquadr√£o e muda sua dire√ß√£o. """
        for alien in self.aliens.sprites():
            alien.rect.y += self.config.velocidade_descida_esquadrao
        self.config.direcao_esquadrao *= -1
```

# Eliminando aliens {background-color="#40666e"}

## Detectando colis√µes de proj√©teis

```{.python filename="invasao_alien.py"}
    def _atualizar_projeteis(self):
        # -- trecho de c√≥digo omitido --

        # Verifica se algum proj√©til atingiu um alien.
        # Se sim, descarta tanto o proj√©til quanto o alien.
        colisoes = pygame.sprite.groupcollide(
            self.projeteis, self.aliens, True, True)
```

##

```output
Traceback (most recent call last):
  File "/home/julio/Downloads/invasao-alienigena/invasao_alien.py", line 141, in <module>
    ai.executar_jogo()
  File "/home/julio/Downloads/invasao-alienigena/invasao_alien.py", line 33, in executar_jogo
    self._atualizar_projeteis()
  File "/home/julio/Downloads/invasao-alienigena/invasao_alien.py", line 72, in _atualizar_projeteis
    if projetil.ret.bottom <= 0:
       ^^^^^^^^^^^^
AttributeError: 'Projetil' object has no attribute 'ret'. Did you mean: 'rect'?
```

- Precisamos mudar o nome do atributo `ret` da classe `Projetil` para `rect`.

## Criando proj√©teis maiores para testes

Para facilitar os testes.

- Vamos experimentar 400.

## Recriando o esquadr√£o

```{.python filename="invasao_alien.py"}
    def _atualizar_projeteis(self):
        # -- trecho de c√≥digo omitido --
        
        if not self.aliens:
            # Destr√≥i os proj√©teis existentes e cria um novo esquadr√£o.
            self.projeteis.empty()
            self._criar_esquadr√£o()
```

## Refatorando `_atualizar_projeteis()`

```{.python filename="invasao_alien.py"}
    def _atualizar_projeteis(self):
        """ Atualiza a posi√ß√£o dos proj√©teis e descarta os proj√©teis antigos. """
        self.projeteis.update()

        # Livra-se dos proj√©teis que desapareceram.
        for projetil in self.projeteis.copy():
            if projetil.rect.bottom <= 0:
                self.projeteis.remove(projetil)

        self._verificar_colisoes_projeteis_aliens()
    
    def _verificar_colisoes_projeteis_aliens(self):
        """ Responde a colis√µes entre proj√©teis e aliens. """
        # Verifica se algum proj√©til atingiu um alien.
        # Se sim, descarta tanto o proj√©til quanto o alien.
        colisoes = pygame.sprite.groupcollide(
            self.projeteis, self.aliens, True, True)
        
        if not self.aliens:
            # Destr√≥i os proj√©teis existentes e cria um novo esquadr√£o.
            self.projeteis.empty()
            self._criar_esquadr√£o()
```

# Dando um fim ao jogo {background-color="#40666e"}


## Detectando colis√µes entre naves e aliens

```{.python filename="invasao_alien.py"}

# -- trecho de c√≥digo omitido --
    def _atualizar_aliens(self):
        """ Verifica se o esquadr√£o est√° na borda e atualiza as posi√ß√µes dos aliens. """
        self._verificar_bordas_esquadrao()
        self.aliens.update()

        # Detecta colis√µes entre a nave e os aliens.
        if pygame.sprite.spritecollideany(self.nave, self.aliens):
            print("A nave foi atingida!")
```

Talvez seja interessante aumentar a velocidade (e de descida) dos aliens para testar. 

##

Aqui, novamente, precisaremos usar atributo com nome `rect` em vez de `ret`.

. . .

Se estiver usando um linter como o pylance voc√™ ver√° um warning em `self.nave`.

- Isso porque o m√©todo `spritecollideany` espera um `Sprite`, mas nossa classe `Nave`
  n√£o herda dela.
- Mesmo assim o c√≥digo funciona, por que?

. . .

[Duck Typing]{.alert}

## Tratando as colis√µes entre a nave e aliens


```{.python filename="config.py"}
    def __init__(self):
        # -- trecho de c√≥digo omitido --

        # Configura√ß√µes da nave
        self.velocidade_nave = 10.0
        self.max_naves = 3
```

. . .

```{.python filename="estatisticas.py"}
class Estatisticas:
    """ Rastreia as estat√≠sticas do jogo. """

    def __init__(self, jogo):
        """ Inicializa as estatisticas """
        self.config = jogo.config
        self.reiniciar()

    def reiniciar(self):
        """ Inicializa as estat√≠sticas que podem mudar ao longo do jogo. """
        self.naves_restantes = self.config.max_naves
```


##

```{.python filename="invasao_alien.py"}
import sys
from time import sleep

import pygame

from config import Config
from estatisticas import Estatisticas

# -- trecho de c√≥digo omitido --

    def __init__(self):
        # -- trecho de c√≥digo omitido --
        pygame.display.set_caption("Invas√£o Alien√≠gena")

        # Cria uma inst√¢ncia para armazenar estat√≠sticas do jogo.
        self.estatisticas = Estatisticas(self)

    # -- trecho de c√≥digo omitido --

    def _atualizar_aliens(self):
        # -- trecho de c√≥digo omitido --

        # Detecta colis√µes entre a nave e os aliens.
        if pygame.sprite.spritecollideany(self.nave, self.aliens):
            self._acertar_nave()
    
    def _acertar_nave(self):
        """ Responde a uma colis√£o entre a nave e um alien. """
        # Decrementa naves_restantes.
        self.estatisticas.naves_restantes -= 1

        # Esvazia a lista de aliens e proj√©teis.
        self.aliens.empty()
        self.projeteis.empty()

        # Cria um novo esquadr√£o e centraliza a nave.
        self._criar_esquadr√£o()
        self.nave.centralizar()

        # Faz uma pausa.
        sleep(0.5)
```

##

```{.python filename="nave.py"}
    def centralizar(self):
        """ Centraliza a nave na tela. """
        self.rect.midbottom = self.ret_tela.midbottom
        self.x = float(self.rect.x)
```

Repare que sempre usamos a mesma inst√¢ncia da nave.

- N√≥s n√£o criamos outro objeto quando a nave √© atingida.
- N√≥s apenas a centralizamos.
- A classe de estat√≠sticas cuida de lidar com quantas vidas existem.

## Tratando alien√≠genas na borda inferior

```{.python filename="invasao_alien.py"}
    def _atualizar_aliens(self):
        # -- trecho de c√≥digo omitido --

        # Detecta colis√µes entre a nave e os aliens.
        if pygame.sprite.spritecollideany(self.nave, self.aliens):
            self._acertar_nave()

        # Verifica se algum alien atingiu a parte inferior da tela.
        self._verificar_aliens_borda_inferior()

    def _verificar_aliens_borda_inferior(self):
        """ Verifica se algum alien atingiu a parte inferior da tela. """
        for alien in self.aliens.sprites():
            if alien.rect.bottom >= self.config.altura_tela:
                # Trata esse caso do mesmo modo que se a nave tivesse sido atingida.
                self._acertar_nave()
                break
```

## Game Over!

```{.python filename="invasao_alien.py"}

    def __init__(self):
        # -- trecho de c√≥digo omitido --

        # Inicializa o jogo em um estado ativo
        self.jogo_ativo = True
    
    # -- trecho de c√≥digo omitido --

    def _acertar_nave(self):
        """ Responde a uma colis√£o entre a nave e um alien. """
        if self.estatisticas.naves_restantes <= 0:
            self.jogo_ativo = False
            return
        
        # -- trecho de c√≥digo omitido --
```

##

```{.python filename="invasao_alien.py"}
    def executar_jogo(self):
        """Inicia o loop principal do jogo."""
        while True:
            self._verificar_eventos()
            
            if self.jogo_ativo:
                self.nave.atualizar()
                self._atualizar_projeteis()
                self._atualizar_aliens()

            self._atualizar_tela()
            self.clock.tick(60)
```

## Exemplos dentro do pygame

## Tutoriais



